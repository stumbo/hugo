[{"body":"Interlisp The 1970s and 80s saw major advances in computing and Human-Computer interaction. Interlisp was one of the many experimental systems developed during these heady times. It represents and early example of a system with a GUI (Graphical User Interface), and IDE (Integrated Development Environment) and within the Xerox PARC environment, it was an early example of a network enabled machine supporting email, file sharing . In essence it was a forerunner of today’s computing systems.\nMedley Medley Interlisp represents the last Xerox Interlisp release. Medley continued Xerox PARC’s experimentation with developing systems for D-machines, a family of computers (Dorado, Dolphin, Dandelion, Daybreak) descended. The project was later spun out to a company called Envos, which then turned into Venue.\nIt was the first IDE with a window/mouse/menu GUI, launched as a product from Xerox in 1980. It was a base from which AI applications were built, as well as a research project in its own right.\nMedley Interlisp User Interface. Restoration Our aim is to restore Medley Interlisp to usability on modern systems, sufficient to allow someone to develop some code and experience what it was like. You could think of this as a kind of “vintage software” project, to try to capture the sense of fluidity in the development cycle.\nWe hope to provide a platform for demonstration of early experiments of hypertext (Notecards), Desktop management (Rooms), Object-oriented programming (LOOPS), as well as Interlisp itself.\nProcess Primarily this is a matter of testing and debugging. Identified issues are documented in the Interlisp/medley repo.\nWe’re also trying to “modernize” some things; for example, we’re adding Unicode support for IO (Interlisp-D was built before Unicode, and supports an older Xerox encoding). As with most open source projects, what we’re able to accomplish depends on volunteers\nFor example, Interlisp SEDIT is the canonical ancestral structure editor. Masterscope and the “file package” included system-management tools that combined features of version control and build systems, with comprehensive cross referencing support.\nMedley was the last release of the Xerox Lisp environment, before the whole environment was renamed Medley. It was originally written in Interlisp (a dialect separate from the MACLISP/Common Lisp tradition, with its own ancestry), but later, Common Lisp also became part of the environment. Medley includes a WYSIWYG text editor (TEdit), email organizer (Lafite), performance tools (Spy) and many other libraries and user contributed code (from the 1980s).\nThe 1992 ACM Software System Award, to Daniel G. Bobrow, Richard R. Burton, L. Peter Deutsch, Ronald M. Kaplan, Larry Masinter, Warren Teitelman\n… for their pioneering work in programming environments that integrated\n– source-language debuggers,\n– fully compatible integrated interpreter/compiler,\n– automatic change management,\n– structure-based editing,\n– logging facilities,\n– interactive graphics, and\n– analysis/profiling tools\nin the Interlisp system.\n","categories":"","description":"","excerpt":"Interlisp The 1970s and 80s saw major advances in computing and …","ref":"/hugo/about/","tags":"","title":"About"},{"body":"Makes “hierarchical” or layered drawings of directed graphs.\ndot is the default tool to use if edges have directionality.\nThe layout algorithm aims edges in the same direction (top to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge length.\nPDF Manual\n","categories":"","description":"","excerpt":"Makes “hierarchical” or layered drawings of directed graphs.\ndot is …","ref":"/hugo/docs/layouts/dot/","tags":"","title":"dot"},{"body":"The following is an abstract grammar defining the DOT language. Terminals are shown in bold font and nonterminals in italics. Literal characters are given in single quotes. Parentheses ( and ) indicate grouping when needed. Square brackets [ and ] enclose optional items. Vertical bars | separate alternatives.\ngraph : [ strict ] (graph | digraph) [ ID ] '{' stmt_list '}' stmt_list : [ stmt [ ';' ] stmt_list ] stmt : node_stmt | edge_stmt | attr_stmt | ID '=' ID | subgraph attr_stmt : (graph | node | edge) attr_list attr_list : '[' [ a_list ] ']' [ attr_list ] a_list : ID '=' ID [ (';' | ',') ] [ a_list ] edge_stmt : (node_id | subgraph) edgeRHS [ attr_list ] edgeRHS : edgeop (node_id | subgraph) [ edgeRHS ] node_stmt : node_id [ attr_list ] node_id : ID [ port ] port : ':' ID [ ':' compass_pt ] | ':' compass_pt subgraph : [ subgraph [ ID ] ] '{' stmt_list '}' compass_pt : (n | ne | e | se | s | sw | w | nw | c | _) The keywords node, edge, graph, digraph, subgraph, and strict are case-independent. Note also that the allowed compass point values are not keywords, so these strings can be used elsewhere as ordinary identifiers and, conversely, the parser will actually accept any identifier.\nAn ID is one of the following:\nAny string of alphabetic ([a-zA-Z\\200-\\377]) characters, underscores ('_') or digits([0-9]), not beginning with a digit; a numeral [-]?(.[0-9]⁺ | [0-9]⁺(.[0-9]*)? ); any double-quoted string (\"...\") possibly containing escaped quotes (\\\")¹; an HTML string (\u003c...\u003e). An ID is just a string; the lack of quote characters in the first two forms is just for simplicity. There is no semantic difference between abc_2 and \"abc_2\", or between 2.34 and \"2.34\". Obviously, to use a keyword as an ID, it must be quoted. Note that, in HTML strings, angle brackets must occur in matched pairs, and newlines and other formatting whitespace characters are allowed. In addition, the content must be legal XML, so that the special XML escape sequences for \", \u0026, \u003c, and \u003e may be necessary in order to embed these characters in attribute values or raw text. As an ID, an HTML string can be any legal XML string. However, if used as a label attribute, it is interpreted specially and must follow the syntax for HTML-like labels.\nBoth quoted strings and HTML strings are scanned as a unit, so any embedded comments will be treated as part of the strings.\nAn edgeop is -\u003e in directed graphs and -- in undirected graphs.\nThe language supports C++-style comments: /* */ and //. In addition, a line beginning with a ‘#’ character is considered a line output from a C preprocessor (e.g., # 34 to indicate line 34 ) and discarded.\nSemicolons and commas aid readability but are not required. Also, any amount of whitespace may be inserted between terminals.\nAs another aid for readability, dot allows double-quoted strings to span multiple physical lines using the standard C convention of a backslash immediately preceding a newline character². In addition, double-quoted strings can be concatenated using a ‘+’ operator. As HTML strings can contain newline characters, which are used solely for formatting, the language does not allow escaped newlines or concatenation operators to be used within them.\nSubgraphs and Clusters Subgraphs play three roles in Graphviz. First, a subgraph can be used to represent graph structure, indicating that certain nodes and edges should be grouped together. This is the usual role for subgraphs and typically specifies semantic information about the graph components. It can also provide a convenient shorthand for edges. An edge statement allows a subgraph on both the left and right sides of the edge operator. When this occurs, an edge is created from every node on the left to every node on the right. For example, the specification\nA -\u003e {B C} is equivalent to\nA -\u003e B A -\u003e C In the second role, a subgraph can provide a context for setting attributes. For example, a subgraph could specify that blue is the default color for all nodes defined in it. In the context of graph drawing, a more interesting example is:\nsubgraph { rank = same; A; B; C; } This (anonymous) subgraph specifies that the nodes A, B and C should all be placed on the same rank if drawn using dot.\nThe third role for subgraphs directly involves how the graph will be laid out by certain layout engines. If the name of the subgraph begins with cluster, Graphviz notes the subgraph as a special cluster subgraph. If supported, the layout engine will do the layout so that the nodes belonging to the cluster are drawn together, with the entire drawing of the cluster contained within a bounding rectangle. Note that, for good and bad, cluster subgraphs are not part of the DOT language, but solely a syntactic convention adhered to by certain of the layout engines.\nLexical and Semantic Notes A graph must be specified as either a digraph or a graph. Semantically, this indicates whether or not there is a natural direction from one of the edge’s nodes to the other. Lexically, a digraph must specify an edge using the edge operator -\u003e while a undirected graph must use --. Operationally, the distinction is used to define different default rendering attributes. For example, edges in a digraph will be drawn, by default, with an arrowhead pointing to the head node. For ordinary graphs, edges are drawn without any arrowheads by default.\nA graph may also be described as strict. This forbids the creation of multi-edges, i.e., there can be at most one edge with a given tail node and head node in the directed case. For undirected graphs, there can be at most one edge connected to the same two nodes. Subsequent edge statements using the same two nodes will identify the edge with the previously defined one and apply any attributes given in the edge statement. For example, the graph\nstrict graph { a -- b a -- b b -- a [color=blue] } will have a single edge connecting nodes a and b, whose color is blue.\nIf a default attribute is defined using a node, edge, or graph statement, or by an attribute assignment not attached to a node or edge, any object of the appropriate type defined afterwards will inherit this attribute value. This holds until the default attribute is set to a new value, from which point the new value is used. Objects defined before a default attribute is set will have an empty string value attached to the attribute once the default attribute definition is made.\nNote, in particular, that a subgraph receives the attribute settings of its parent graph at the time of its definition. This can be useful; for example, one can assign a font to the root graph and all subgraphs will also use the font. For some attributes, however, this property is undesirable. If one attaches a label to the root graph, it is probably not the desired effect to have the label used by all subgraphs. Rather than listing the graph attribute at the top of the graph, and the resetting the attribute as needed in the subgraphs, one can simply defer the attribute definition in the graph until the appropriate subgraphs have been defined.\nIf an edge belongs to a cluster, its endpoints belong to that cluster. Thus, where you put an edge can effect a layout, as clusters are sometimes laid out recursively.\nThere are certain restrictions on subgraphs and clusters. First, at present, the names of a graph and it subgraphs share the same namespace. Thus, each subgraph must have a unique name. Second, although nodes can belong to any number of subgraphs, it is assumed clusters form a strict hierarchy when viewed as subsets of nodes and edges.\nCharacter encodings The DOT language assumes at least the ASCII character set. Quoted strings, both ordinary and HTML-like, may contain non-ASCII characters. In most cases, these strings are uninterpreted: they simply serve as unique identifiers or values passed through untouched. Labels, however, are meant to be displayed, which requires that the software be able to compute the size of the text and determine the appropriate glyphs. For this, it needs to know what character encoding is used.\nBy default, DOT assumes the UTF-8 character encoding. It also accepts the Latin1 (ISO-8859-1) character set, assuming the input graph uses the charset attribute to specify this. For graphs using other character sets, there are usually programs, such as iconv, which will translate from one character set to another.\nAnother way to avoid non-ASCII characters in labels is to use HTML entities for special characters. During label evaluation, these entities are translated into the underlying character. This table shows the supported entities, with their Unicode value, a typical glyph, and the HTML entity name. Thus, to include a lower-case Greek beta into a string, one can use the ASCII sequence \u0026beta;. In general, one should only use entities that are allowed in the output character set, and for which there is a glyph in the font.\nIn quoted strings in DOT, the only escaped character is double-quote \". That is, in quoted strings, the dyad \\\" is converted to \"; all other characters are left unchanged. In particular, \\\\ remains \\\\. Layout engines may apply additional escape sequences. Previous to 2.30, the language allowed escaped newlines to be used anywhere outside of HTML strings. The new lex-based scanner makes this difficult to implement. Given the perceived lack of usefulness of this generality, we have restricted this feature to double-quoted strings, where it can actually be helpful. ","categories":"","description":"","excerpt":"The following is an abstract grammar defining the DOT language. …","ref":"/hugo/doc/info/lang.html","tags":"","title":"DOT Language"},{"body":"The 2021 Medley Interlisp Annual Report provides a detailed report on 2021 accomplishments.\nRecent Updates 3/2022 Interlisp Online new version! Many new/improved features. From any (recent) browser. Medley is running “in the cloud” and you connect to it (and your account) over the web. Medley Documentation. We’ve been updating the online documentation at least for getting started – instructions on Running in various contexts and Building and Using. Interlisp.Org has been approved as tax-exempt by California Franchise Tax Board and the California AG, State Charity Registration Number: CT0278267 We have joined (as an “implementation sponsor”) the Software Preservation Network. See Interlisp and SPN for more information. Many updates to Medley features and files; most releases have a ‘What’s Changed’ section or URL. 1/2022 Merry Christmas and Happy New Year\nSteve’s Medley Interlisp: The Interactive Environment reformated for easier online reading. Joining the Software Preservation Network. Interlisp.online progress, changes expected New User documentation Still awaiting California Franchise Tax Board (FTB) to confirm exempt status (ETA April) work on Lisp-based GitHub client, comparison of Lisp files 12/2021 Interlisp Online: Run Medley Interlisp in the cloud with just a browser. No download or install. Lower the barrier to entry. Of course, it’s better to install a release on your own machine, but for the casual visitor, this is better. Still under development but try it out, report problems (use issue tag ‘online’). There seem to be problems with Safari on older macs–try Firefox or Chrome. a mouse and keyboard are still necessary on tablets. For the immersive “Lisp Machine” experience, run “fullscreen”. HiRes display? Most browsers will let you scale the pixels. InterlispOrg Inc has been approved as a 501c3 with the IRS. The simplest way to donate is using the GitHub Sponsor button. recent reviews on twitter were complimentary of our efforts 11/2021 Medley Interlisp: Tools and Utilities (Interlisp book 3) now available for preview; comments and corrections welcome.\n2021 Annual Report November 15, 2021 (also in PDF).\n","categories":"","description":"","excerpt":"The 2021 Medley Interlisp Annual Report provides a detailed report on …","ref":"/hugo/news/","tags":"","title":"News"},{"body":"Zotero Interlisp Bibliography The collection of Interlisp and Lisp related materials can be found at Intelisp Bibliography\n","categories":"","description":"","excerpt":"Zotero Interlisp Bibliography The collection of Interlisp and Lisp …","ref":"/hugo/publications/zotero/","tags":"","title":"Zotero Bibliography"},{"body":"All Graphviz programs have a similar invocation:\ncmd [ flags ] [ input files ] For example:\n$ dot -Tsvg input.dot If no input files are supplied, the program reads from stdin. For example:\n$ echo 'digraph { a -\u003e b }' | dot -Tsvg \u003e output.svg Generates:\nFlags -Gname[=value] Set a graph attribute, with default value = true\nFor example,\n$ echo 'digraph { a -\u003e b }' | dot -Tsvg -Gfontcolor=red -Glabel=\"My favorite letters\" Overrides the default fontcolor and label attributes of the graph, producing a red legend:\n-Nname[=value] Set a default node attribute, with default value = true.\nFor example,\n$ echo 'digraph { a -\u003e b }' | dot -Tsvg -Nfontcolor=red -Nshape=rect Overrides the default node fontcolor and shape attributes, producing rectangular nodes with red text:\n-Ename[=value] Set a default edge attribute, with default value = true.\nFor example,\n$ echo 'digraph { a -\u003e b }' | dot -Tsvg -Ecolor=red -Earrowhead=diamond Overrides the default edge color and arrowhead attributes, producing red edges with a diamond arrowhead:\n-Klayout Specifies which default layout engine to use, overriding the default from the command name. For example, running dot -Kneato is equivalent to running neato.\n-Tformat[:renderer[:formatter]] Set output language to one of the supported formats. By default, attributed dot is produced.\nDepending on how Graphviz was built, there may be multiple renderers for generating a particular output format, and multiple formatters for creating the final output. For example, a typical installation can produce PNG output using either the Cairo or GD library. The desired rendering engine can be specified after a colon. If there are multiple formatting engines available, the desired one can be specified in a similar fashion after the rendering engine. Thus, -Tpng:cairo specifies PNG output produced by Cairo (using the Cairo’s default formatter), and -Tpng:cairo:gd specifies PNG output produced by Cairo formatted using the GD library.\nIf no renderer is specified, or a renderer but no formatter, the default one is invoked. The flag -Tformat: produces a list of all of the renderers available for the specified format, the first one listed with a prefix matching format being the default. Using the -v flag, described below, will print which format, renderer, and formatter are actually used.\n-V Emit version information and exit. For example:\n$ dot -V dot - graphviz version 2.47.1 (20210417.1919) -llibrary User-supplied, device-dependent library text. Multiple flags may be given. These strings are passed to the code generator at the beginning of output.\nFor PostScript output, they are treated as file names whose content will be included in the preamble after the standard preamble. If library is the empty string \"\", the standard preamble is not emitted.\n-n[num] Sets no-op flag in neato. If set, neato assumes nodes have already been positioned and all nodes have a pos attribute giving the positions. It then performs an optional adjustment to remove node-node overlap, depending on the value of the overlap attribute, computes the edge layouts, depending on the value of the splines attribute, and emits the graph in the appropriate format. If num is supplied, the following actions occur:\nnum = 1 Equivalent to -n. num \u003e 1 Use node positions as specified, with no adjustment to remove node-node overlaps, and use any edge layouts already specified by the pos attribute. neato computes an edge layout for any edge that does not have a pos attribute. As usual, edge layout is guided by the splines attribute. -ooutfile Write output to file outfile. For example,\n$ echo 'digraph { a -\u003e b }' | dot -Tsvg -o output.svg Generates output.svg:\nBy default, output goes to stdout.\n-O Automatically generate output file names based on the input file name and the various output formats specified by the -T flags.\nFor example,\n$ dot -Tsvg -O ~/family.dot ~/debug.dot Generates ~/family.dot.svg and ~/debug.dot.svg files.\n-P Automatically generate a graph that shows the plugin configuration of the current executable. e.g.\n$ dot -P -Tsvg -o plugins.svg -q Suppress warning messages.\n-s[scale] Set input scale to scale. If this value is omitted, 72.0 is used. This number is used to convert the point coordinate units used in the pos attribute into inches, which is what is expected by neato and fdp. Thus, feeding the output of a graph laid out by one program into neato or fdp almost always requires this flag. Ignored if the -n flag is used.\n-v Verbose mode\n-x In neato, on input, prune isolated nodes and peninsulas. This removes uninteresting graph structure and produces a less cluttered drawing.\n-y By default, the coordinate system used in generic output formats, such as attributed dot, extended dot, plain and plain-ext, is the standard cartesian system with the origin in the lower left corner, and with increasing y coordinates as points move from bottom to top. If the -y flag is used, the coordinate system is inverted, so that increasing values of y correspond to movement from top to bottom.\n-? Print usage information, then exit.\nIf multiple -T flags are given, drawings of the graph are emitted in each of the specified formats. Multiple -o flags can be used to specify the output file for each format. If there are more formats than files, the remaining formats are written to stdout.\nNote that the -G, -N and -E flags override any initial attribute declarations in the input graph, i.e., those attribute statements appearing before any node, edge or subgraph definitions. In addition, these flags cause the related attributes to be permanently attached to the graph. Thus, if attributed dot is used for output, the graph will have these attributes.\nEnvironment Variables GDFONTPATH List of pathnames giving directories which a program should search for fonts. Overridden by DOTFONTPATH. Used only if Graphviz is not built with the fontconfig library\nDOTFONTPATH List of pathnames giving directories which a program should search for fonts. Overridden by fontpath. Used only if Graphviz is not built with the fontconfig library\nSERVER_NAME If defined, this indicates that the software is running as a web application, which restricts access to image files. See GV_FILE_PATH.\nGV_FILE_PATH If SERVER_NAME is defined, image files are restricted to exist in one of the directories specified by GV_FILE_PATH. This last is a list of directory pathnames, separated by semicolons in Windows or by colons otherwise. Note that sometimes, when using one of the layout programs in a web script, it is not enough to use an export command but rather the variables should be set when the command is run, for example,\nSERVER_NAME=xxx GV_FILE_PATH=\"images:etc/images:/usr/share/images\" dot -Tpng -o x.png x.gv Note that the image files must really reside in one of the specified directories. If the image file is specified as an absolute or relative pathname, a warning is given and only the base name is used.\nGVBINDIR Indicates which directory contains the Graphviz config file and plug-in libraries. If it is defined, the value overrides any other mechanism for finding this directory. If Graphviz is properly installed, it should not be needed, though it can be useful for relocation on platforms not running Linux or Windows.\n","categories":"","description":"","excerpt":"All Graphviz programs have a similar invocation:\ncmd [ flags ] [ input …","ref":"/hugo/doc/info/command.html","tags":"","title":"Command Line"},{"body":"Source Code Source code packages for the latest stable and development versions of Graphviz are available, along with instructions for anonymous access to the sources using Git.\nExecutable Packages Packages marked with an asterisk(*) are provided by outside parties. We list them for convenience, but disclaim responsibility for the contents of these packages.\nLinux We do not provide precompiled packages any more. You may find it useful to try one of the following third-party sites.\nUbuntu packages*\nsudo apt install graphviz Fedora project*\nsudo yum install graphviz Debian packages*\nsudo apt install graphviz Stable and development rpms for Redhat Enterprise, or CentOS systems* available but are out of date.\nsudo yum install graphviz Windows Stable Windows install packages:\nPrior to 2.46 series Development Windows install packages\n2.46.0 and newer Prior to 2.46.0 Cygwin Ports* provides a port of Graphviz to Cygwin.\nWinGraphviz* Win32/COM object (dot/neato library for Visual Basic and ASP).\nChocolatey packages Graphviz for Windows.\nchoco install graphviz Windows Package Manager provides Graphviz Windows packages.\nwinget install graphviz Mostly correct notes for building Graphviz on Windows can be found here.\nMac MacPorts* provides both stable and development versions of Graphviz and the Mac GUI Graphviz.app. These can be obtained via the ports graphviz, graphviz-devel, graphviz-gui and graphviz-gui-devel.\nsudo port install graphviz Homebrew* has a Graphviz port.\nbrew install graphviz We need help with OSX, if you would like to volunteer.\nWe would appreciate if someone donates a script to run pkgbuild or productbuild to automatically generate OSX installers. Packaging for Apple Administrators could be a good reference. Note graphviz needs postinstall actions, at least dot -c; also fc-cache if Graphviz has freetype/cairopango drivers.\nSolaris For Solaris, please use the graphviz stable releases here. These are maintained by Laurent Blume / John Ellson. Currently available packages are:\ngraphviz Graph Visualization Tools graphviz_dev Graphviz headers etc. for development graphvizdoc Graphviz documentation graphvizgdGraphviz renderers using gd graphvizgraphsGraphviz example graphs graphvizguileGraphviz language binding for guile graphvizperlGraphviz language binding for perl graphvizpythonGraphviz language binding for python graphvizrubyGraphviz language binding for ruby graphvizsharpGraphviz language binding for C# graphviztclGraphviz language binding for tcl Minimally, graphviz and graphvizgd should be installed.\nOther Unix FreeBSD* ","categories":"","description":"","excerpt":"Source Code Source code packages for the latest stable and development …","ref":"/hugo/download/","tags":"","title":"Download"},{"body":"NOTE: Lately, the effort has focused on developing a Zotero annotated bibliography; the idea is to focus the timeline on material and source code published at the time. Any narrative around that would then constitute secondary sources. That will allow future researchers to construct their own narratives.\nInterlisp Timeline This draft started with Teitelman’s History of Interlisp, Still need to merge in links from Software Preservation History, https://Interlisp.org/#history, info-1100, and other sources. “facts” should be backed up by links to their sources.\nSee Interlisp History. which should also be merged in.\nSee/comment on Demo Plans for Medley Interlisp for ideas for demos.\n1960s Through the 1960s, the languages of programming were primarily Fortran and assembly. Lisp enabled expressing recursion simply. Lisp also provided the ability to modify a program as it was running, since Lisp programs were themselves data—the same as other list structures used to represent program data. This made Lisp an ideal language for writing programs that themselves constructed programs or proved things about programs. As an area of Artificial Intelligence, programs writing programs was something of great interest to those working on applying AI to programming. Lisp was at that time just a language. Programming in Lisp consisted of submitting a job, usually as a deck of punched cards to run in batch mode on a mainframe. You could then pick up your output a few hours later, if lucky, otherwise the next day, and hope that it did not consist of a lengthy sequence of left parentheses or NILs, as would be the case if the program had certain kinds of bugs. 1964 L. Peter Deutsch (high school student) developed PDP-1 Lisp at MIT. [L. Peter Deutsch, quoted in lisp_doc.txt accompanying Bob Supnik’s Software Kit] L. Peter Deutsch and Edmund C. Berkeley. The LISP Implementation for the PDP-1 Computer. March 1964, pages 326-375 in Berkeley and Bobrow. PDF: Describes Basic PDP-1 LISP in detail, including full PDP-1 assembly language source code.\nThe introduction of time-sharing in the mid-60s changed the paradigm of software development. Instead of the developer doing their debugging offline, users could now interact directly with their program online. Time-sharing was originally developed as a way of making more efficient and economic use of a very expensive computer, but it also had the surprising side-effect of drastically reducing the amount of time it took to get a program working. Users experiencing this phenomenon reported that it was because they did not have to lose and then reestablish context so frequently, but could get very deep into their programs and the problems they presented, and stay there. The situation is analogous to trying to resolve an issue between two people via a conversation rather than sending letters back and forth. Regardless of how short the cycle of iteration is, e.g., if email is used instead of letters, if the process involves discovery and a lot of back-and-forth, it is much easier to do via a conversation. You could establish a context and stay focused until the problem was solved.\n1965 Teitelman’s experience with his Ph.D. work led him to the notion of building a system where the computer took an active role in helping make changes to a program. At the time, this was a very novel idea. The term “programming environment” was meant to suggest not only the usual specifics of both a programming system and language but also more elusive and subjective considerations such as ease of use and level of interaction, “forgiveness” of errors, human engineering, and system “initiative.” The programmer’s environment influences and to a large extent determines, what sort of problems they can (and will want to) tackle, how far they can go, and how fast. If the environment is “cooperative” and “helpful”, then the programmer can be more ambitious and productive. If not, they will spend most of their time and energy “fighting” the system, which at times seems bent on frustrating one’s best efforts. In 1965, there were very few tools for developing Lisp programs, and those that were available were very primitive.\n1966 MIT EE Dept PDP-36 manual http://bitsavers.org/pdf/mit/rle_pdp1/memos/pdp36_lisp_may66.pdf Teitelman started at Bolt, Beranek and Newman in Cambridge. At the time, BBN’s computer was a DEC PDP-1, and Daniel Murphy had written a version of Lisp 1.5 for it using ideas from Deutch’s work. This Lisp was really just a toy – single user, slow, small address space, but Teitelman started with Break and Prettyprint from MIT on his pursuit of a Lisp programming environment. http://www.softwarepreservation.org/projects/LISP/bbnlisp/BBN-LISP-System_Feb1966.pdf#page=49\n1967 In 1967, BBN purchased an SDS 940 computer from Scientific Data Systems and began work building a time-sharing system on it. The SDS 940 had a larger address space and the ability to support a paging system. BBN was awarded an ARPA contract to provide a LISP system that could be distributed to other ARPA sites for doing A.I. research. (ARPA = Advanced Research Projects Administration of the Department of Defense.) http://www.bitsavers.org/pdf/sds/9xx/940/ucbProjectGenie/940_LISP_Memo_2_Apr67.pdf Advising was a means of allowing the user to treat a particular function as a black box without knowing what was inside the box, wrap “advice” around it that could operate before the function ran, potentially changing its input parameters, after it ran, possibly changing its value, or { PrettyPrint which printed out a nicely formatted representation of Lisp programs, using indentation to indicate depth of structure. A Trace facility was also available which modified specified functions to print on the terminal their input parameters on entry and their value on exit. You could think of this as a special case of Advising. There was also a Break package which enabled the user to cause program execution to halt at the entry point to specific functions. The user could then examine the value of the function’s input parameters, and even change them, then cause the function to run, and again gain control so as to examine the value that the function returned or side effects of the function’s operation. The user could change input parameters and re-execute the function, or manually specify the desired value and have it be returned to the caller as though it had been the value produced by that function. Teitelman memo to SDS 940 LISP Users.\n1968 Work on Demand Paging software virtual memory was focused on supporting Lisp. Peter Deutsch wrote a structure editor in Lisp for editing Lisp programs. Prior to this, Lisp source was prepared and edited offline in textual form and read into the Lisp system. Peter’s editor enabled the user to edit Lisp programs without ever leaving Lisp. The editor provided operations for moving up, down, left or right in the list structure definition of a Lisp function, and to make insertions, deletions, or replacements, e.g. (-3 X) to insert X in front of the 3rd item in the current list, 2 to descend into the second item in the current list, 0 to ascend one level, etc. Other more sophisticated commands were soon added, such as a find command to search through all levels of the function being edited looking for a specified string or pattern, a mark command to mark, i.e. save, the current location, and a command to restore the context to one that had previously been marked, an ability to define macros, etc. The ability to edit a Lisp program in situ meant that a user could modify a running program and continue execution. For example, the user might be at a Break, evaluate the current function, identify a problem, edit the definition using the structure editor, and reevaluate the current, now modified function and go on.\n1969 Alice K. Hartley took over Dan Murphy’s role in BBN-LISP. A number of new data types were added to augment lists and numbers: arrays, strings, large numbers, floating-point numbers.\n1970s 1970 As Lisp users began to write larger and larger programs, performance began to be an issue. A compiler had been available for Lisp programs since the early sixties. In 1970, Danny Bobrow and Alice Hartley designed and implemented the “spaghetti stack”. This enabled running programs to search the current execution stack, e.g., find the second occurrence up the stack of the function FOO, and return the name of the function that called FOO, to alter the normal flow of control, e.g., return from a specified stack pointer a specified value (very useful when debugging programs in order to manually bypass a known problem), and to evaluate an expression or variable in a specified context, e.g., what is the value of x as of six function calls back up the stack. DWIM, the most well known, and in some cases reviled, feature of BBN-LISP was introduced in 1970. DWIM stands for Do-What-I-Mean and embodies Teitelman’s view that people’s time was more valuable/expensive than computer time. (This was a radical idea at the time.) When Teitelman first started programming in FORTRAN in 1960, he was appalled at receiving the error message, “on line 70, DIMENSION is misspelled”. If the FORTRAN compiler knew this to be the case, why didn’t it accept this and go on and compile his program? The BBN-LISP interpreter was modified so that rather than signal an error when an undefined function or unset variable was encountered, DWIM would use various heuristics to identify and attempt to correct the error. Spelling correction was the most common scenario. An algorithm was implemented that took advantage of the most common types of errors made by a touch typist, e.g., doubled characters, transpositions, case error, etc. A spelling list appropriate for the context of the error was searched, and a metric computed for each item on the list that measured the difference between that item and the unknown word. If the match was sufficiently close, e.g., the only difference being a doubled character or a transposition, the correction was performed without the user having to approve. Otherwise, the user was offered the closest match and asked to approve the correction. If the user approved or the correction was automatically done, a message was printed on the terminal and computation would continue as though the error had not occurred. If the user was not at the terminal, after an appropriate interval, DWIM would default to Yes or No depending on how close the match was. It was not uncommon for a user to perform some editing, then start a computation, go get some coffee, and come back to find the computation complete with several corrections having been made. DWIM could also handle the case where the user typed a number instead of ‘(‘ or ‘)’ because of failure to hit the shift key, e.g. 8COND instead of COND. This kind of error was particularly difficult to fix, because not only did it cause a misspelled function or variable, but totally altered the structure of the expression being evaluated. For the user to manually fix such an error using the structure editor required not only removing the 8 or 9, but rearranging the list structure. Having DWIM handle such errors was quite helpful. Spelling correction was also used in contexts besides evaluating Lisp expressions. For example, there was a spelling list of edit commands that was used to correct a mistyped editor command. When loading a file where the file name was not found, a spelling list of previously encountered file names would be used. Another innovation introduced to BBN-LISP in 1970 was the History package. The idea was rather than simply performing the operations requested by the user, call functions, edit expressions, perform break commands, etc., and discarding that information, to have an agent that would record what the user entered so that the user could examine the history, and replay portions of it, possibly with substitutions. (The history feature of the UNIX C-shell introduced in the late 70’s was patterned after the Interlisp history package.) The history also contained any messages displayed to the user during the execution of the corresponding event, e.g., any DWIM corrections, or messages about global variables being reset or functions being redefined, etc. As with DWIM, the History package grew out of the desire to offload manual tasks to the computer. Perhaps the most important piece of information stored in each history event was the information required to UNDO that operation. This was especially valuable in the context of editing. UNDO is functionality that every user now expects in an editor, but it was first introduced in BBN-LISP in 1970. The UNDO functionality provided in BBN-LISP still surpasses that available in today’s editors in that the user could UNDO operations out of order. For example, after performing a series of four or five editing operations, the user could realize that the information deleted in the first operation is needed, and would be able to UNDO just that operation by explicitly referring to that operation using the history package, without affecting the intervening operations. In addition to being able to UNDO edit operations, the user could also UNDO operations that were typed in at the top level or in a Break. This was most frequently used to undo assignments. It could also be used to undo an entire edit session, rather than undoing one command at a time, sort of a revert operation for S-expressions. The user could also arrange to have functions that they defined to be undoable by storing information on the history list.\n1971 The File Package was added in 1971. This was essentially a “make” for Lisp. The user could specify the set of functions, global variables, property lists, etc., to be contained in a specified file, and then “make” that file. When the file was loaded in a subsequent session, this information would be recorded and available. Whenever a component known to be in a specified file was modified, the system would know that the corresponding file needed to be rewritten. A cleanup function was provided that would write out all files that contained components that had been changed. The user would be informed about any items created or modified during the course of their session that did not appear in any of the user’s files, and therefore might be lost if the user abandoned their session without saving them somewhere. The only thing missing from the File Package that would be provided in UNIX Make was the notion of dependencies.\n1972 In 1972, Danny Bobrow and Warren Teitelman left BBN and went to the newly formed Xerox Palo Alto Research Center – PARC. BBN continued to provide the low-level support for the Lisp system, i.e., compiler, garbage collector, and all of the operating system interface, while the Lisp-based center of activity for the various packages and utilities moved to PARC. Both sites continued to be supported by ARPA, and to indicate this partnership and shared responsibility, BBN-LISP was renamed to be Interlisp. Around the ARPAnet, Interlisp continued to use the DEC PDP-10 as its principal platform.\n1973 “Interlisp Reference Manual, Acknowledgements and Background” (PDF). 1973. 1974 By 1974 a number of impressive extensions to Interlisp had been developed by Larry Masinter. These included a much more sophisticated version of Interlisp’s iterative statement, as well as a Record package that enabled a user to label various components of a list structure and refer to them by name, thereby eliminating the CADADRs and CDADDRs that made Lisp programs so difficult to read. The Record package also had the advantage that the user could change a record definition, and the program would automatically adopt the new structure. For example, if PERSON were defined as (RECORD PERSON (FIRSTNAME LASTNAME TITLE)), the expression (X:TITLE) would translate to (CADDR X). If the user later changed the definition of PERSON to (RECORD PERSON (FIRSTNAME INITIAL LASTNAME TITLE)), all expressions involving TITLE would automatically be retranslated to use CADDDR. Interlisp-10 sources from 1974\nMasterscope would analyze a large program and build a database of relationships between the various components that could then be queried using a natural language front end. For example, WHO CALLS FOO AND USES MUMBLE, EDIT WHERE X IS USED FREELY AND Y IS BOUND, etc. As LISP programs became larger and more complex and were being built by teams of programmers, rather than a single programmer, functionality such as that provided by Masterscope was invaluable in understanding, maintaining, and extending programs.\n1975 By 1975, Interlisp had become so rich in functionality that it was clear that word of mouth was no longer sufficient and in depth documentation was needed, especially since there was a large and growing community of users at the various ARPA sites that had little or no direct contact with the developers of Interlisp at PARC and BBN. Work on the first Interlisp manual, which turned out to be a year long project. When completed, the manual was over 500 pages and heavily indexed. It was written using PUB, a text formatting program developed at Stanford by Dan Swinehart and Larry Tesler. (This was back in the days when the only WYSIWYG editor was PARC’s Bravo which ran only on the Alto.) The fact that the manual was machine readable, and heavily indexed, meant Interlisp could use it to provide online help and documentation. The user could type in something like TELL ME ABOUT FILE PACKAGE and see on the terminal/screen the relevant text. In a break, the user could simply type ‘?’ and see an explanation of the input parameters for the current function.\n1976 In 1976, Dan Ingalls gave a presentation at PARC in which he demonstrated the first window system. Written in and for Smalltalk, the user interface and paradigm it provided for enabling the user to manage and work with multiple contexts was very compelling, and immediately inspired work to provide such a mechanism for Interlisp. At the time, although Peter Deutsch had developed a byte-coded instruction set for the Alto, it was under-powered for Lisp development. Bob Sproull came up with the idea for what would turn out to be the first client-server window system: use the Alto as the window server and Interlisp running on the time-shared PDP-10 clone as the client. and develop a protocol for having Interlisp tell the Alto what to display, and for the Alto to tell Interlisp about mouse clicks. Bob developed the ADIS (for Alto Display) package and Teitelman wrote DLISP in Interlisp. DLISP included a window manager and windowing system that enabled overlapping windows, cut and paste, etc. J Moore implemented a text package that would support display and editing of text in windows. Teitelman demonstrated this functionality at IJCAI in 1977, and presented a paper, a Display Oriented Programmer’s Assistant.\n1979 In 1979, PARC began the design of the Dorado, a high performance personal workstation. The availability of the Dorado also made possible building a Lisp with a native display capability, which led to the Interlisp-D project. 1980s Teitelman \u0026 Masinter, IEEE Computer, “The Interlisp Programming Environment” April 1981. https://github.com/Interlisp/history/tree/master/1980s/interlisp-10/1983-sumex-lisp\n1982 AAAI launch of 1108 (Dandelion) and 1132 (Dorado)\n1983 Chorus and Fugue Releases of Interlisp-D\n1984 Carol Release?\n1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp\n1987 Lyric release\n1988 Medley 1.0 release. Medley supported all Sun’s running on SunOS, plus IRIX, AIX, HPUX, Ultrix, (i.e., BSD Unix)\n1989 Envos formed from XAIS April 10, Envos closes\n1990s 1991 August: Venue moves to new offices [Arun Weoch email] 3-byte atoms\n1992 Medley 2.0 with CLOS, MOP, for Dos 4.0 and Xerox 1186 ACM Software Systems award was given to the Interlisp team: “For their pioneering work in programming environments that integrated source-language debuggers, fully compatible integrated interpreter/compiler, automatic change management, structure-based editing, logging facilities, interactive graphics, and analysis/profiling tools in the Interlisp system.”\n1993 2000 The ADVISE/advice idea and names carried through to the Aspect/J system, and on into contemporary, mainstream Java frameworks. e.g. Spring: Chapter 6. Aspect Oriented Programming with Spring 2009 John Sybalsky obituary\n2010 Web Archive of top2bottom.ne medley.html MEDLEY Medley provides a rich software development environment, including a debugger, a list structure editor, a file package, a compiler, text-editing facilities, and other useful tools. With any interactive computer language, the user interacts with the system through an “executive,” which interprets and executes commands. Medley includes three such executives: Common Lisp, Xerox Common Lisp, and Interlisp. Medley is a programming system, containing not only a programming language but also many predefined programs and specialized programming tools. Medley’s interactive window-based debugger automatically appears when an error occurs. You can enter the debugger through a program execution error, a user-entered keyboard interrupt, or a programmer-specified break. When execution is halted for one of these reasons, the user can reset the system and unwind the stack, or enter the debugger. The break window is an executive window; you can perform any activity here that you can in other executive windows, including looking at the program’s current state, changing data structures, evaluating expressions changing a function, and calling the editor. These break facilities, familiar to Interlisp users, are now in the common Lisp executive as well. The programmer’s assistant. This tracks the user’s actions during a session, allowing them to be replayed, undone, or altered. The most common interaction with the programmer’s assistant occurs at the top level read-evaluate-print loop or in a break, where the user types in expressions for evaluation and sees the value printed out. The file package and compiler. The file browser provides a convenient user interface for manipulating files stored on a workstation or file server. The makefile option in the file package lets you compile an entire file. You can compile individual functions using the compile command for functions in memory, the Tcompl command for definitions stored in files, or the Recompile command for a combination of in-memory and file definitions. Medley also supports block compiling. The Spy tool lets you identify program bottlenecks. Structure and text editors. Medley offers a choice of structure (list) editors. Dedit and Sedit. When loaded, the Dedit library utility becomes the default structure editor. Sedit does not have the type-in buffer of Dedit; it automatically places Lisp structures that the user fills in by selecting a character or a structure. Sedit recognizes Lisp functions such as single quotes, back quotes, and commas. It automatically adds spaces to maintain legal structures. Medleys Tedit supports multiple fonts, embedded graphics, and document formatting. Figures created with the drawing program, Sketch, can also take screen snapshots. NOTECARDS Notecards tool collects, organizes, and presents hypermedia information. Many cards can be displayed at once, and each can contain text, sketches, or scanned graphics. Cards are connected by typed links and stored in “file boxes.” LOOPS Lisp Object-Oriented Programming System Objects give you a lot of power, but they’re not the whole answer. Sometimes, other ways of looking at a problem will work better. At times, plain procedural programming is best. Other times, you’ll want to trigger actions in response to changes in variables’ values. Yet other times, you’ll want to use rules to capture domain specific knowledge. LOOPS gives you all of these in one coherent package. LOOPS also gives you development tools that really help you while you work. You’ll want to keep track of the classes and objects you’ve created. LOOPS’ browsers let you do that. You’ll want to watch your rules in operation to find out where they’re going awry. LOOPS’ rule auditing facility lets you do that. Big systems often have many objects that start out the same, and slowly diverge as the system runs. Normally, you’d have to start off with completely separate objects, at a tremendous cost in memory. LOOPS lets you start with only a single real object. All the others are tiny “virtual copies” of that one. Each copy grows only as you change the values of its instance variables. The effect is the same as having many independent objects, without the memory cost. The classes and objects you create are the same blocks LOOPS is built out of. So the classes you create can be combined with LOOPS itself to extend its power. You wind up with a system that speaks your language and has tools to fit your needs-and your specialized tools have become part of LOOPS, so its power is brought to bear to solve your problem. “Medley is and has been a system before its time. Through the debuggers, the graphics and window systems, and the organized structure of the underlying Lisp systems, Medley provides a marvelous tool that creates enthusiasm and motivation for programmers, applications builders, application users, teachers, and students alike.\"-Patrick Goddi and Anne M. Keuneke\n2019 Jill Marci Sybalsky obituary\n2020 Medley Interlisp project begins\n","categories":"","description":"","excerpt":"NOTE: Lately, the effort has focused on developing a Zotero annotated …","ref":"/hugo/doc/info/history.html","tags":"","title":"History"},{"body":"Interlisp Online provides access to a version of Medley running in the cloud. All that is needed to get started is to create an account - simply an email address and password. Once an account has been created you can log in and start a Medley Interlisp session.\nSessions are preserved for an indefinite time (we haven’t worked out for how long – after 30 days of inactivity?). But it should be good for experimenting and introducing yourself to the environment. Anything you create in the online environment should be treated as transient. If you’re interested in developing and experimenting with Lisp programs then you will want to investigate other options. But, for a first foray, this is a good starting place. The Interlisp/online repository may have more details.\n","categories":"","description":"","excerpt":"Interlisp Online provides access to a version of Medley running in the …","ref":"/hugo/online/","tags":"","title":"Interlisp Online"},{"body":"“spring model” layouts.\nneato is a reasonable default tool to use for undirected graphs that aren’t too large (about 100 nodes), when you don’t know anything else about the graph.\nneato attempts to minimize a global energy function, which is equivalent to statistical multi-dimensional scaling.\nThe solution is achieved using stress majorization, though the older Kamada-Kawai algorithm1, using steepest descent, is also available.\nPDF Manual\nTomihisa Kamada, Satoru Kawai, An algorithm for drawing general undirected graphs, Information Processing Letters, Volume 31, Issue 1, 1989, Pages 7-15. ↩︎\n","categories":"","description":"","excerpt":"“spring model” layouts.\nneato is a reasonable default tool to use for …","ref":"/hugo/docs/layouts/neato/","tags":"","title":"neato"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/docs/layouts/","tags":"","title":"Layout Engines"},{"body":"The output format is specified with the -Tlang flag on the command line, where lang is one of the parameters listed above.\nThe formats actually available in a given Graphviz system depend on how the system was built and the presence of additional libraries. To see what formats dot supports, run dot -T?. See the description of the -T flag for additional information.\nNote that the internal coordinate system has the origin in the lower left corner. Thus, positions in the canon, dot, xdot, plain, and plain-ext formats need to be interpreted in this manner.\nImage Formats The image and shapefile attributes specify an image file to be included as part of the final diagram. Not all image formats can be read. In addition, even if read, not all image formats can necessarily be used in a given output format.\nThe graph below shows what image formats can be used in which output formats, and the required plugins. On the left are the supported image formats. On the right are the supported output formats. In the middle are the plugins: image loaders, renderers, drivers, arranged by plugin library. This presents the most general case. A given installation may not provide one of the plugins, in which case, that transformation is not possible.\nID Output Note In the formats: -Tcmap, -Tcmapx, -Tsvg, -Tvml, the output generates id=\"node#\" properties for nodes, id=\"edge#\" properties for edges, and id=\"cluster#\" properties for clusters, with the # replaced by an internally assigned integer. These strings can be provided instead by an externally provided id=xxx attribute on the object. Normal \\N \\E \\G substitutions are applied. Externally provided id values are not used internally, and it is the user’s reponsibilty to ensure that they are sufficiently unique for their intended downstream use. Note, in particular, that \\E is not a unique id for multiedges.\n","categories":"","description":"","excerpt":"The output format is specified with the -Tlang flag on the command …","ref":"/hugo/docs/outputs/","tags":"","title":"Output Formats"},{"body":"Radial layouts, after Graham Wills 19971.\nNodes are placed on concentric circles depending their distance from a given root node.\nYou can set the root node, or let twopi do it.\nPDF Manual\nGraham J. Wills (1999) NicheWorks—Interactive Visualization of Very Large Graphs, Journal of Computational and Graphical Statistics, 8:2, 190-212 ↩︎\n","categories":"","description":"","excerpt":"Radial layouts, after Graham Wills 19971.\nNodes are placed on …","ref":"/hugo/docs/layouts/twopi/","tags":"","title":"twopi"},{"body":"The table below describes the attributes used by various Graphviz tools. The table gives the name of the attribute, the graph components (node, edge, etc.) which use the attribute and the type of the attribute (strings representing legal values of that type). Where applicable, the table also gives a default value for the attribute, a minimum allowed setting for numeric attributes, and certain restrictions on the use of the attribute.\nNote that attribute names are case-sensitive. This is usually true for attribute values as well, unless noted.\nAll Graphviz attributes are specified by name-value pairs. Thus, to set the color of a node abc, one would use\ndigraph { abc [color = red] } Edit in Playground Similarly, to set the arrowhead style of an edge abc -\u003e def, one would use:\ndigraph { abc -\u003e def [arrowhead = diamond] } Edit in Playground Further details concerning the setting of attributes can be found in the description of the DOT language.\nAt present, most device-independent units are either inches or points, which we take as 72 points per inch.\nNote: Some attributes, such as dir or arrowtail, are ambiguous when used in DOT with an undirected graph since the head and tail of an edge are meaningless. As a convention, the first time an undirected edge appears, the DOT parser will assign the left node as the tail node and the right node as the head. For example, the edge A -- B will have tail A and head B. It is the user’s responsibility to handle such edges consistently. If the edge appears later, in the format\ngraph { B -- A [taillabel = \"tail\"] } Edit in Playground the drawing will attach the tail label to node A. To avoid possible confusion when such attributes are required, the user is encouraged to use a directed graph. If it is important to make the graph appear undirected, this can be done using the dir, arrowtail or arrowhead attributes.\nThe tools accept standard C representations for int and double types. For the bool type, TRUE values are represented by true or yes (case-insensitive) and any non-zero integer, and FALSE values by false or no (case-insensitive) and zero. In addition, there are a variety of specialized types such as arrowType, color, point and rankdir. Legal values for these types are given at the end.\nIn the Used By field, the characters E, N, G, S and C represent edges, nodes, the root graph, subgraphs and cluster subgraphs, respectively. This field indicates which graph component uses the attribute.\nIn the Notes field, an annotation of write only indicates that the attribute is used for output, and is not used or read by any of the layout programs.\n","categories":"","description":"","excerpt":"The table below describes the attributes used by various Graphviz …","ref":"/hugo/doc/info/attrs.html","tags":"","title":"Attributes"},{"body":"Circular layout, after Six and Tollis 199912, Kauffman and Wiese 20023.\nThis is suitable for certain diagrams of multiple cyclic structures, such as certain telecommunications networks.\nPDF Manual\nSix J.M., Tollis I.G. (1999) A Framework for Circular Drawings of Networks. In: Kratochvíyl J. (eds) Graph Drawing. GD 1999. Lecture Notes in Computer Science, vol 1731. Springer, Berlin, Heidelberg. ↩︎\nSix J.M., Tollis I.G. (1999) Circular Drawings of Biconnected Graphs. In: Goodrich M.T., McGeoch C.C. (eds) Algorithm Engineering and Experimentation. ALENEX 1999. Lecture Notes in Computer Science, vol 1619. Springer, Berlin, Heidelberg. ↩︎\nMichael Kaufmann, Roland Wiese (2002) Embedding Vertices at Points: Few Bends suffice for Planar Graphs. In: Journal of Graph Algorithms and Applications. vol. 6, no. 1, pp. 115–129 ↩︎\n","categories":"","description":"","excerpt":"Circular layout, after Six and Tollis 199912, Kauffman and Wiese …","ref":"/hugo/docs/layouts/circo/","tags":"","title":"circo"},{"body":"On-line reference pages History Bibliography Output Formats Node, Edge and Graph Attributes Node Shapes Arrow Shapes User’s Guides Tool manual pages ","categories":"","description":"","excerpt":"On-line reference pages History Bibliography Output Formats Node, Edge …","ref":"/hugo/documentation/","tags":"","title":"Documentation"},{"body":"Catalogue of the schemas/types/grammars expected by attributes.\nThe following list gives the legal strings corresponding to values of the given types. The syntax for describing legal type strings is a mixture of literal strings, stdio encodings (e.g., %f for a double), and regular expressions. For regular expressions, (...)* indicates 0 or more copies of the expression enclosed in the parentheses, (...)+ indicates 1 or more, and (...)? denotes 0 or 1 copy.\n","categories":"","description":"","excerpt":"Catalogue of the schemas/types/grammars expected by attributes.\nThe …","ref":"/hugo/docs/attr-types/","tags":"","title":"Attribute Types"},{"body":"Interlisp Bibliography The following table represents a snapshot of the information captured in the Interlisp Zotero library.\nAuthor Title Notes Affenzeller, Michael Pichler, Franz Mittelmann, Rudolf On CAST.FSM Computation of Hierarchical Multi-layer Networks of Automata collection-title: Lecture Notes in Computer Science DOI: 10.1007/3-540-45654-6_3 Burwell, A. D. M. Computer manipulation of geological exploration data Shanor, Gordy G. Shanor, Gordy G. The Dipmeter Advisor - A dipmeter interpretation workstation Balzer, Robert Erman, Lee Feather, Martin Goldman, Neil London, Philip Wile, David Wilczynski, David Lingard, Robert Mark, William Mann, William Moore, James Pirtle, Mel Dyer, David Rizzi, William Cohen, Danny Barnett, Jeff Kameny, Iris Yemini, Yechiam Research in Progress at the Information Sciences Institute, University of Southern California Jain, Rekha Expert Systems: A Management Perspective Alberga, C. N. Brown, A. L. Leeman, G. B. Mikelsons, M. Wegman, M. N. A program development tool Sheil, Beau Interlisp-D: further steps in the flight from time-sharing Teitelman, Warren INTERLISP Teitelman, Warren History of Interlisp Teitelman, Warren INTERLISP documentation Myers, J. D. The background of INTERNIST I and QMR Friedland, Peter Special section on architectures for knowledge-based systems Lehtola, A. Jäppinen, H. Nelimarkka, E. Language-based environment for natural language parsing Allchin, James E. Keller, Arthur M. Wiederhold, Gio FLASH: a language-independent, portable file access system Sproull, Robert F. Raster graphics for interactive programming environments Cohen, Shimon The A-TABLE data-type for LISP systems Clinger, William D. Wand, Mitchell Hygienic macro technology Becker, Brett A. Denny, Paul Pettit, Raymond Bouchard, Durell Bouvier, Dennis J. Harrington, Brian Kamil, Amir Karkare, Amey McDonald, Chris Osera, Peter-Michael Pearce, Janice L. Prather, James Compiler Error Messages Considered Unhelpful: The Landscape of Text-Based Programming Error Message Research Bouvin, Niels Olof From NoteCards to Notebooks: There and Back Again Karttunen, Lauri Word play Korkut, Joomy Christiansen, David Thrane Extensible type-directed editing Bouvin, Niels Olof Klokmose, Clemens Nylandsted Classical Hypermedia Virtues on the Web with Webstrates Fisher, Lawrence M. Marvin Minsky: 1927-2016 Freeman, Dustin Balakrishnan, Ravin Tangible actions Viriyakattiyaporn, Petcharat Murphy, Gail C. Improving program navigation with an active help system , Wang, Yuejiao An empirical analysis of the evolution of user-visible features in an integrated development environment Pitman, Kent M. Common Lisp: the untold story White, Jon L. Bourbaki, Nickieben From massively monster machines to microchips: forces affecting Lisp language design for five decades Eisenberg, Andrew D. Kiczales, Gregor Expressive programs through presentation extension Floyd, Robert W. The paradigms of programming Kersten, Mik Murphy, Gail C. Using task context to improve programmer productivity Chapuis, Olivier Roussel, Nicolas Metisse is not a 3D desktop! Fuqua, Paul Slagle, James R. Gini, Maria L. List processing Fateman, Richard McCarthy, John Lisp Barron, David W. Linkers and loaders Filman, Robert E. Barrett, Stuart Lee, Diana D. Linden, Ted Inserting ilities by controlling communications Albizuri-Romero, Miren Begoña A retrospective view of CASE tools adoption Reiss, Steven P. The Desert environment Annotation: This is an example of an annotation on an item. Deutsch, L. Peter Finkbine, Ronald B. ACM Fellow profile Ehrlich, Kate A conversation with Austin Henderson Konkin, Douglas P. Oster, Gregory M. Bunt, Richard B. Exploiting software interfaces for performance measurement Beesley, Kenneth R. Arabic morphology using only finite-state operations Lampson, Butler W. Pier, Kenneth A. A processor for a high-performance personal computer Ungar, David Lieberman, Henry Fry, Christopher Debugging and the experience of immediacy Law, Rob An overview of debugging tools Stroustrup, Bjarne A history of C++: 1979--1991 Ungar, David Annotating objects for transport to other worlds Malone, Thomas W. Lai, Kum-Yew Fry, Christopher Experiments with Oval: a radically tailorable tool for cooperative work Prakash, Atul Knister, Michael J. A framework for undoing actions in collaborative systems Berlage, Thomas A selective undo mechanism for graphical user interfaces based on command objects Denning, Peter J. Dargan, Pamela A. A discipline of software architecture Wiil, Uffe K. Leggett, John J. Hyperform: using extensibility to develop dynamic, open, and distributed hypertext systems Kazman, Rick Kominek, John Information organization in multimedia resources Mancoridis, Spiros A multi-dimensional taxonomy of software development environments Prakash, Atul Knister, Michael J. Undoing actions in collaborative work Goldman, Neil Narayanaswamy, K. Software evolution through iterative prototyping Kurlander, David Feiner, Steven Interactive constraint-based search and replace Museum+Labs, Living Computers: livingcomputermuseum/Darkstar original-date: 2019-01-15T20:40:02Z Bobrow, Daniel G. Murphy, Daniel L. Structure of a LISP system using two-level storage: Communications of the ACM Bobrow, Daniel G. Wegbreit, Ben A model and stack implementation of multiple environments Bobrow, Daniel G. A note on hash linking Bates, Raymond L. Dyer, David Koomen, Johannes A. G. M. Implementation of Interlisp on the VAX Deutsch, L. Peter Bobrow, Daniel G. An efficient, incremental, automatic garbage collector Moore, J. Strother The Interlisp Virtual Machine Specification Sproull, Robert F. INTERLISP DISPLAY PRIMITIVES Masinter, Larry Interlisp-D at AAAI-82 Bobrow, Daniel Mittal, Sanjay Lanning, Stanley Stefik, Mark Programming Languages -- The LOOPS Project (1982-1986) , X3J13 Charter Steele, Guy L. COMMON LISP : the language Pitman, Kent M. Common Lisp Condition System , , , , , , Iterative technique for phrase query formation and an information retrieval... Greenfeld, Norton R. Apparatus for analyzing source code Bier, Eric A. Customizable user interfaces for programmed computer systems Reboh, Rene , Data-driven, functional expert system shell Gendron, Robert F. , , Computer based workstation for development of graphic representation of \u0026hellip; Rao, Ramana B. Window system with independently replaceable window functionality Teitelman, Warren Recent Improvements to 940 LISP Library , 1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp , Medley Burton, Richard R. Kaplan, Ronald M. Masinter, B. Sheil, B. A. Bell, A. Bobrow, D. G. Deutsch, L. P. Haugeland, W. S. Papers on interlisp-D Interlisp Barela, Anne Introducing Darkstar: A Xerox Star Emulator Masinter, Larry Common Lisp Cleanup. — Software Preservation Group Masinter, Larry Melvin Global Program Analysis in an Interactive Envi ronment by Larry Melvin Masinter SSL.80-1 JANUARY 1980 , , , , , The BBN-LISP System Mears, Lyn Ann Rees, Ted Artificial intelligence Systems Xerox LOOPS, A Friendly Primer Chailloux, Jerome The use of LISP at computer centers in Western Germany Stoyan, Herbert LISP history Swanson, Mark Kessler, Robert Lindstrom, Gary An implementation of portable standard LISP on the BBN butterfly Bates, Raymond David, Dayer Koomen, Johannes Saunders, Steven Voreck, Donald Interlisp-VAX Users Manual Masintcr, Larry M. Interlisp-VAX: A Report Teitelman, Warren Kaplan, Ron new-lisp-messages.txt.1. Masinter, Larry PARCMESSAGE.TXT.1. Adeli, H. Paek, Y. J. Computer-aided analysis of structures in INTERLISP environment Allard, James R. Hawkinson, Lowell B. Real-time programming in Common Lisp Anderson, Kenneth R. Freeing the essence of a computation Becker, Jeffrey M. AQINTERLISP: An INTERLISP Program for Inductive Generalization of VL1 Event Sets Berkeley, Edmund Callis Bobrow, Daniel Gureasko The programming language LISP: Its operation and applications Bobrow, D. G. LISP bulletin Bobrow, Robert Grignetti, Mario Interlisp performance measurements Brachman, Ronald J. Smith, Brian C. Special issue on knowledge representation Chailloux, Jerome Technical notes: a VLISP interpreter on the VCMC1 machine Chailloux, Jérôme The VLISP KIT: description implementation and evaluation Galvani, Andrea Rodriguez-Natal, Alberto Cabellos-Aparicio, Albert Risso, Fulvio LISP-ROAM: network-based host mobility with LISP Greussay, Patrick Iterative interpretation of tail-recursive LISP procedures Moon, David A. Garbage collection in a large LISP system Moore, J. Strother The TXDT Package-Interlisp Text Editing Primitives Padget, Julian Chailloux, Jérôme Christaller, Thomas DeMantaras, Ramon Dalton, Jeff Devin, Matthieu Fitch, John Krumnack, Timm Neidl, Eugen Papon, Eric Pope, Stephen Queinnec, Christian Steels, Luc Stoyan, Herbert Desiderata for the standardization of LISP Pitman, Kent M. Ambitious evaluation: a new reading of an old issue Pratt, V. R. LISP-an Amicus Curiae Brief Queinnec, Christian A subjective view of Lisp Rhodes, Christophe Using Lisp-based pseudocode to probe student understanding Saeed, Faisel Book Review: EXPERT DATABASE SYSTEMS Proceedings from the 2nd Intl. Conference. April 25-27, 1988 Vienna, VA. Edited by Larry Kerschberg (Benjamin/Cummings Publishing Company, 1988) Schafmeister, Christian E. CANDO: A Compiled Programming Language for Computer-Aided Nanomaterial Design and Optimization Based on Clasp Common Lisp Smith, Robert Common Lisp's Predilection for Mathematical Programming Steele, Guy L. Parallelism in Lisp Stoyan, Herbert Lisp: themes and history Strandh, Robert An Improvement to Sliding Garbage Collection Tatar, Deborah G. Weinreb, Daniel A programmer's guide to common Lisp Tomoyuki, Tanaka Shigeru, Uzuhara Futures and multiple values in parallel Lisp Trancón y Widemann, Baltasar A reference-counting garbage collection algorithmfor cyclical functional programming Turner, Roy M. LP/LISP: literate programming for Lisp Wertz, Harald A system to understand incorrect programs Wood, Amy LJ Interviews Larry Gritz X3J13 Format for proposals to the cleanup committee (Version 14) Bobrow, Daniel G. Murphy, Daniel L. A note on the efficiency of a LISP computation in a paged machine Bobrow, Daniel G. Clark, Douglas W. Compact Encodings of List Structure Gabriel, Richard P. Steele, Guy L. A pattern of language evolution Kossow, Al PDP-10 software archive Tavani, Herman T. Cyberethics and the future of computing Wood, Larry Book Review: Practical User Interface Design by Larry Wood Dawson, Jeffrey L. Improved effectiveness from a real time LISP garbage collector McCarthy, J. An interesting LISP function Böhnke, Dorothea Eggerth, Claudia Die Arbeitsweise hypermedialer Lernsysteme am Beispiel der Systeme Lisp-Tutor und ELM-ART Böcker, Heinz-Dieter IX. OPTIMIST. Ein System zur Beurteilung und Verbesserung von Lisp-Code Lisp and Symbolic Computation McCarthy, John Recursive functions of symbolic expressions and their computation by machine, Part I Slagle, James R. A Heuristic Program that Solves Symbolic Integration Problems in Freshman Calculus Beckerle, Michael Beiser, Paul Duggan, Jerry Kerns, Robert Layer, Kevin Linden, Thom Masinter, Larry Unietis, David Extensions to Common LISP to Support International Character Sets Lenat, Douglas B. Prakash, Mayank Shepherd, Mary CYC: Using common sense knowledge to overcome brittleness and knowledge acquisition bottlenecks Waguespack, Leslie J. Hass, David F. A workbench for project oriented software engineering courses Foderaro, John Lisp environments Emanuelson, Pär Haraldsson, Anders On compiling embedded languages in LISP Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Burton, Richard R. Masinter, L. M. Bobrow, Daniel G. Haugeland, Willie Sue Kaplan, Ronald M. Sheil, B. A. Overview and status of DoradoLisp Rao, Ramana Pedersen, Jan O. Hearst, Marti A. Mackinlay, Jock D. Card, Stuart K. Masinter, Larry Halvorsen, Per-Kristian Robertson, George C. Rich interaction in the digital library Knight, James Y. Rideau, François-René Walczak, Andrzej Building Common Lisp programs using Bazel Strandh, Robert Fast Generic Dispatch for Common Lisp Gabriel, Richard P. Lisp: Good News, Bad News, How to Win Big , INTERLISP The Language And Its Usage International Lisp Conference 2014 Masinter, Larry M. Deutsch, L. Peter Local optimization in a compiler for stack-based Lisp machines Computer-Assisted Instruction (Bits and Bytes, Episode 7) Lisp Editing in the 80s - Interlisp SEdit Oldford, Wayne Graphical Programming (1988) - Part 0 , All the Widgets 2: Menus Oldford, Wayne Graphical Programming (1988) - Parts 1 and 2 Myers, Brad scrollbars Malone, Thomas W. The Information Lens Building towards a holistic development service — Amjad Masad Tannir, Adam The Next HOPE (2010): Lisp, The Oldest Language of the Future Barstow, David R. Overview of a display-oriented editor for INTERLISP Teitelman, W. Masinter, L. The Interlisp Programming Environment publisher: IEEE Computer Society , Truckin Knowledge Competition (1983) , The Colab Movie (1987) Wiederhold, Gio Blum, Robert L. Walker, Michael An Integration of Knowledge and Data Representation DOI: 10.1007/978-1-4612-4980-1_33 Weyl, Stephen An Interlisp Relational Data Base System. section: Technical Reports Reboh, Rene Sacerdoti, Earl A Preliminary QLISP Manual section: Technical Reports Stoyan, Herbert Early LISP history (1956 - 1959) Deutsch, L. Peter Experience with a microprogrammed Interlisp system Deutsch, L. Peter ByteLisp and its Alto implementation , Interlisp reference manual OCLC: 802551877 , , , Interlisp reference manual: Revised OCLC: 11098633 Deutsch, P. Status Report on Alto Lisp Deutsch, L. Peter A LISP machine with very compact programs Deutsch, L. Peter INSIDE INTERLISP: TWO IMPLEMENTATIONS , XEROX COMMON LISP IMPLEMENTATION NOTES , Artificial Intelligence Systems, Interlisp-D: A Friendly Primer , INTERLISP-D RELEASE NOTES Interlisp-D Reference Manual, Volume I: Language OCLC: 802551877 Interlisp-D Reference Manual, Volume II: Environment OCLC: 802551877 Interlisp-D Reference Manual, Volume III: Input/Output OCLC: 802551877 Teitelman, Warren A display oriented programmer's assistant Teitelman, Warren A display oriented programmer's assistant , LISP-details INTERLlSP / 360 - 370 Teitelman, Warren Clisp: Conversational Lisp event: IEEE Transactions on Computers Teitelman, Warren Automated programmering: the programmer's assistant Teitelman, Warren PILOT: A Step Toward Man-Computer Symbiosis Accepted: 2004-10-20T20:06:03Z Gladwin, Lee A. Gladwin, Lee A. Review of Interlisp: The Language and Its Usage publisher: IEEE Computer Society Moore, J. Strother The INTERLISP Virtual Machine Specification: Revised Deutsch, P. Display primitives in Lisp Deutsch, L. Peter Lampson, Butler W. 930 LISP Reference Manual Weizenbaum, Joseph ELIZA, a computer program for the study of natural language communication between man and machine , , Preliminary Specification for BBN 940 LISP Bobrow, Daniel G. Teitelman, Warren Format-directed list processing in LISP Deutsch, L. Peter PDP-1 Lisp Deutsch, P. Preliminary Guide to the LISP Editor McCarthy, John LISP - notes on its past and future Stoyan, Herbert Lisp 50 years ago McCarthy, John LISP: a programming system for symbolic manipulations Bobrow, Daniel G. DeMichiel, Linda G. Gabriel, Richard P. Keene, Sonya E. Kiczales, Gregor Moon, David A. Common Lisp Object System specification Bobrow, Daniel G. Raphael, Bertram New Programming Languages for Artificial Intelligence Research Schrag, Robert C. Notes on the Conversion of LogLisp from Rutgers/UCI-Lisp to InterLisp, section: Technical Reports Teitelman, W. Proposal for Research on Interlisp and Network-Based Systems section: Technical Reports Gabriel, Richard P. McCarthy, John Queue-based multi-processing LISP Bates, Raymond L. Dyer, David Feber, Mark Recent developments in ISI-interlisp Burton, Richard R. Semantic grammar: an engineering technique for constructing natural language understanding systems Frieder, Gideon Shifting Reiss, Steven P. Simplifying data integration: the design of the desert software development environment Petrus, Edwin S. SKILL: a Lisp based extension language Bobrow, Daniel G. Storage management in LISP section: Technical Reports DeMichiel, Linda G. Gabriel, Richard P. The Common Lisp Object System: An Overview Steele, Guy L. Gabriel, Richard P. The evolution of Lisp Stoyan, Herbert The influence of the designer on the design—J. McCarthy and LISP Koomen, Johannes A. G. M. The interlisp virtual machine: study of its design and its implementation as multilisp DOI: 10.14288/1.0051801 Gabriel, Richard P. Performance and evaluation of LISP systems Jayaprakash, Rajesh pLisp: A Friendly Lisp IDE for Beginners Sheil, Beau POWER TOOLS FOR PROGRAMMERS DOI: 10.1016/B978-0-934613-12-5.50048-3 Chen, Wen-ke Bhansali, Sanjay Chilimbi, Trishul Gao, Xiaofeng Chuang, Weihaw Profile-guided proactive garbage collection for locality optimization Sandewall, Erik Programming in an Interactive Environment: the \"Lisp\" Experience Lipkis, Thomas A. Mark, William S. Pirtle, Melvin W. Design system using visual language Henderson, D. Austin Card, Stuart K. Maxwell, John T. User interface with multiple workspaces for sharing display system objects Kaplan, Ronald M. Maxwell, John T. III Text-compression technique using frequency-ordered array of word-number mappers Smith, Reid G. Schoen, Eric J. Object-oriented framework for menu definition Malone, Thomas W. Lai, Kum-Yew Yu, Keh-Chiang Berenson, Richard W. Object-oriented computer user interface Balban, Morton S. Lan, Ming-Shong Panos, Rodney M. Method of and apparatus for composing a press imposition Nunberg, Geoffrey D. Stansbury, Tayloe H. Abbott, Curtis Smith, Brian C. Method for manipulating digital text data Denber, Michel J. Jankowski, Henry P. Method and apparatus for thinning printed images Fabbrizio, Giuseppe Di Klarlund, Nils Method and apparatus for a programming language having fully undoable, timed reactive instructions Cunningham, Robert E. Bonar, Jeffery G. Corbett, John D. Interactive method of developing software interfaces Mackinlay, Jock D. Card, Stuart K. Robertson, George G. Image display systems Denber, Michel J. Graphics display system with improved dynamic menu selection Kaplan, Ronald M. Kay, Martin Maxwell, John Finite state machine data storage where data transition is accomplished without the use of pointers Harrison, Malcolm Review of The Programming Language LISP: Its Operation and Applications publisher: American Mathematical Society Finin, Tim Translating KL-One from interlisp to Franzlisp Bobrow, Daniel G. Murphy, Daniel L. THE STRUCTURE OF A LISP SYSTEM USING TWO-LEVEL STORAGE, SCIENTIFIC REPROT section: Technical Reports Deutsch, L. Peter PIVOT source listing Deutsch, L. Peter An interactive program verifier Murphy, Dan TENEX and TOPS-20 publisher: IEEE Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual, Revised Bobrow, Daniel G. Darley, D. Lucille Deutsch, L. Peter Murphy, Daniel L. Teitelman, Warren THE BBN 940 LISP SYSTEM section: Technical Reports Teitelman, Warren DESIGN AND IMPLEMENTATION OF FLIP, A LISP FORMAT DIRECTED LIST PROCESSOR section: Technical Reports The BBN-LISP system: Reference Manual Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual Bobrow, D. G. Deutsch, L. P. Murphy, D. L. General Structure of LISP 1.69 Naraln, Sanjai McArthur, David Klahr, Philip Large-scale system development in several lisp environments Boyd, Mickey R. Whalley, David B. Isolation and analysis of optimization errors Bundy, Alan Wallen, Lincoln Interlisp-D DOI: 10.1007/978-3-642-96868-6_103 Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Allen, Eric Cartwright, Robert Stoler, Brian DrJava: a lightweight pedagogic environment for Java Bobrow, Daniel G. Deutsch, L. Peter Extending Interlisp for modularization and efficiency Balzer, Robert M. A language-independent programmer's interface Rosenthal, David S.H. Emulation \u0026 Virtualization as Preservation Strategies Moore, J. Strother The Interlisp virtual machine specification (revised) Sacerdoti, Earl D. Fikes, Richard E. Reboh, Rene Sagalowicz, Daniel Waldinger, Richard J. Wilber, B. Michael Qlisp: a language for the interactive development of complex systems Attendees | Larry Masinter, The Medley Interlisp Project: Status and Plans | Meetup Texas Instruments Explorer Technical Summary, DDYB022 Austin, TX 7879 Texas Instruments Expert System Development Tools, DNJS058 Austin, TX 78792 TI Explorer Symbolic Processing System, DEES055 (brochure) Austin, TX 78792 Texas Instruments New Developments in Artificial Intelligence, DEEB024 (brochure) Austin, TX 78792 Brachman, Ronald Ciccarelli, Eugene Greenfeld, Norton Yonke, Martin KLONE Reference Manual: DOI: 10.21236/ADA122437 DeKleer, Johann Daniel G. Bobrow: In Memoriam publisher: Association for the Advancement of Artificial Intelligence (AAAI) Report Number: 38 Fatcat ID: release_wg4g7ikocbagxinabbk2eni52q Fiala, E. R. The Maxc Systems publisher: Institute of Electrical and Electronics Engineers Report Number: 11 Fatcat ID: release_q5bn52bkmvgfnfpyj3fa6wfnzy ACS Full Text Snapshot ANSI Common Lisp FAQ: Lisp Implementations and Mailing Lists 4/7 [Monthly posting] - [4-1] Commercial Common Lisp implementations. Introducing the Smalltalk Zoo section: Software History Center 999017_Users_Guide_To_Symbolics_Computers_Jul86.pdf genera-handbook.pdf genera-concepts.pdf EDITORS.pdf HARDWARE_1.pdf LMI_LispSW_Overview_Jun82.pdf LMI_lambdaOverview_1982.pdf LM-2_Unibus_IO_Sep81.pdf Lisp-Machine_Data_Types.pdf Lisp_Machine_Hardware_Memos.pdf Chaosnet_Jun82.pdf Chaosnet_File_Protocol_Sep81.pdf 3600_TechnicalSummary_Feb83.pdf 990075_Lisp_Machine_Summary_3600_Edition_Aug83.pdf Symbolics_File_System_Aug81.pdf Symbolics_Software_1981.pdf Symbolics_Overview_1986.pdf Symbolics Software Symbolics Overview (Briefing) Symbolics File Systems CHAOSNet File Protocol Lisp Machines Summary -3600Edition #990075 3600 Technical Summary - Feb83 ED285570.pdf Xerox Alto Emulator Kaplan, Ronald M. Sheil, B. A. Adding Type Declarations to Interlisp. PLDI 2021: The Evolution of Smalltalk from Smalltalk-72 through Squeak PLDI 2021: The Evolution of Smalltalk from Smalltalk-72 through Squeak Card, Stuart Oral history interview with Stuart Card Accepted: 2021-03-04T21:17:00Z publisher: Charles Babbage Institute Code of Best Practices in Fair Use for Software Preservation Some thoughts about raising the profile of Lisp NOTES ON XEROX LISP MACH DEMO (archives of email about the common lisp standard and related) Cardoso-Llach, Daniel Kaltman, Eric Erdolu, Emek Furste, Zachary An Archive of Interfaces: Exploring the Potential of Emulation for Software Research, Pedagogy, and Design Gabriel, Richard P. Performance and Evaluation of LISP Systems DOI: 10.7551/mitpress/5298.001.0001 Truckin’ and the Knowledge Competitions | MJSBlog Clark, Douglas W. List Structure: Measurements, Algorithms, and Encodings Dan Murphy's TECO, TENEX, and TOPS-20 Papers ahc_20150101_jan_2015.pdf Running Lisp in Production ","categories":"","description":"","excerpt":"Interlisp Bibliography The following table represents a snapshot of …","ref":"/hugo/publications/table/","tags":"","title":"Bibliography"},{"body":"There are three main types of shapes : polygon-based, record-based and user-defined.\nThe record-based shape has largely been superseded and greatly generalized by [HTML-like labels](#html). That is, instead of using `shape=record`, one might consider using `shape=none`, `margin=0` and an HTML-like label. The geometry and style of all node shapes are affected by the node attributes fixedsize, fontname, fontsize, height, label, style and width.\nPolygon-based Nodes The possible polygon-based shapes are displayed below.\nAs the figures suggest, the shapes rect and rectangle are synonyms for box, and none is a synonym for plaintext. The shape plain is similar to these two, except that it also enforces width=0 height=0 margin=0, which guarantees that the actual size of the node is entirely determined by the label. This is useful, for example, when using HTML-like labels. Also, unlike the rest, we have shown these three, as well as underline, without style=filled to indicate the normal use. If fill were turned on, the label text would appear in a filled rectangle.\nThe geometries of polygon-based shapes are also affected by the node attributes regular, peripheries and orientation. If shape=\"polygon\", the attributes sides, skew and distortion are also used. If unset, they default to 4, 0.0 and 0.0, respectively. The point shape is special in that it is only affected by the peripheries, width and height attributes.\nNormally, the size of a node is determined by smallest width and height needed to contain its label and image, if any, with a margin specified by the margin attribute. The width and height must also be at least as large as the sizes specified by the width and height attributes, which specify the minimum values for these parameters. See the fixedsize attribute for ways of restricting the node size. In particular, if fixedsize=shape, the node’s shape will be fixed by the width and height attributes, and the shape is used for edge termination, but both the shape and label sizes are used preventing node overlap. For example, the following graph:\ndigraph G { { node [margin=0 fontcolor=blue fontsize=32 width=0.5 shape=circle style=filled] b [fillcolor=yellow fixedsize=true label=\"a very long label\"] d [fixedsize=shape label=\"an even longer label\"] } a -\u003e {c d} b -\u003e {c d} } Edit in Playground yields the figure:\nNote that the label of the yellow node, with fixedsize=true, overlaps the other node, where there is sufficient space for the gray node with fixedsize=shape.\nThe shapes: note, tab, folder, box3d and component were provided by Pander. The synthetic biology shapes: promoter, cds, terminator, utr, primersite, restrictionsite, fivepoverhang, threepoverhang, noverhang, assembly, signature, insulator, ribosite, rnastab, proteasesite, proteinstab, rpromoter, rarrow, larrow and lpromoter were contributed by Jenny Cheng.\nRecord-based Nodes NOTE: Please see the note about record-based nodes. Also note that there are problems using non-trivial edges (edges with ports or labels) between adjacent nodes on the same rank if one or both nodes has a record shape.\nThese are specified by shape values of “record” and “Mrecord”. The structure of a record-based node is determined by its label, which has the following schema:\nrlabel = field ( '|' field )* where field = fieldId or '{' rlabel '}' and fieldId = [ '\u003c' string '\u003e'] [ string ] Braces, vertical bars and angle brackets must be escaped with a backslash character if you wish them to appear as a literal character. Spaces are interpreted as separators between tokens, so they must be escaped if you want spaces in the text.\nThe first string in fieldId assigns a portname to the field and can be combined with the node name to indicate where to attach an edge to the node. (See portPos.) The second string is used as the text for the field; it supports the usual escape sequences \\n, \\l and \\r.\nVisually, a record is a box, with fields represented by alternating rows of horizontal or vertical subboxes. The Mrecord shape is identical to a record shape, except that the outermost box has rounded corners. Flipping between horizontal and vertical layouts is done by nesting fields in braces “{…}”. The top-level orientation in a record is horizontal. Thus, a record with label “A | B | C | D” will have 4 fields oriented left to right, while “{A | B | C | D}” will have them from top to bottom and “A | { B | C } | D” will have “B” over “C”, with “A” to the left and “D” to the right of “B” and “C”.\nThe initial orientation of a record node depends on the rankdir attribute. If this attribute is TB (the default) or BT, corresponding to vertical layouts, the top-level fields in a record are displayed horizontally. If, however, this attribute is LR or RL, corresponding to horizontal layouts, the top-level fields are displayed vertically.\nAs an example of a record node, the dot input:\ndigraph structs { node [shape=record]; struct1 [label=\"\u003cf0\u003e left|\u003cf1\u003e mid\u0026#92; dle|\u003cf2\u003e right\"]; struct2 [label=\"\u003cf0\u003e one|\u003cf1\u003e two\"]; struct3 [label=\"hello\u0026#92;nworld |{ b |{c|\u003chere\u003e d|e}| f}| g | h\"]; struct1:f1 -\u003e struct2:f0; struct1:f2 -\u003e struct3:here; } Edit in Playground yields the figure:\nIf we add the line:\nrankdir=LR we get the layout:\nIf we change node struct1 to have shape Mrecord, it then looks like:\nStyles for Nodes The style attribute can be used to modify the appearance of a node. At present, there are 8 style values recognized: filled, invisible, diagonals, rounded. dashed, dotted, solid and bold. As usual, the value of the style attribute can be a comma-separated list of any of these. If the style contains conflicts (e.g, style=\"dotted, solid\"), the last attribute wins.\nfilled This value indicates that the node’s interior should be filled. The color used is the node’s fillcolor or, if that’s not defined, its color. For unfilled nodes, the interior of the node is transparent to whatever color is the current graph or cluster background color. Note that point shapes are always filled. Thus, the code:\ndigraph G { rankdir=LR node [shape=box, color=blue] node1 [style=filled] node2 [style=filled, fillcolor=red] node0 -\u003e node1 -\u003e node2 } Edit in Playground yields the figure:\ninvisible Setting this style causes the node not to be displayed at all. Note that the node is still used in laying out the graph. diagonals The diagonals style causes small chords to be drawn near the vertices of the node’s polygon or, in case of circles and ellipses, two chords near the top and the bottom of the shape. The special node shapes Msquare, Mcircle, and Mdiamond are simply an ordinary square, circle and diamond with the diagonals style set. rounded The rounded style causes the polygonal corners to be smoothed. Note that this style also applies to record-based nodes. Indeed, the Mrecord shape is simply shorthand for setting this style. Also, prior to 26 April 2005, the rounded and filled styles were mutually exclusive. As an example of rounding, dot uses the graph:\ndigraph R { rankdir=LR node [style=rounded] node1 [shape=box] node2 [fillcolor=yellow, style=\"rounded,filled\", shape=diamond] node3 [shape=record, label=\"{ a | b | c }\"] node1 -\u003e node2 -\u003e node3 } Edit in Playground to produce the figure:\ndashed This style causes the node’s border to be drawn as a dashed line. dotted This style causes the node’s border to be drawn as a dotted line. solid This style causes the node’s border to be drawn as a solid line, which is the default. bold This style causes the node’s border to be drawn as a bold line. See also penwidth. Additional styles may be available with a specific code generator.\nHTML-Like Labels NOTE: This feature is only available on versions of Graphviz that are newer than mid-November 2003. In particular, it is not part of release 1.10.\nNOTE: The font markups for bold, italic, underlining, subscript and superscript (\u003cB\u003e, \u003cI\u003e, \u003cU\u003e, \u003cSUB\u003e and \u003cSUP\u003e) are only available in versions after 14 October 2011, and the markup for strike-through (\u003cS\u003e) requires versions later than 15 September 2013. In addition, all of these markups are currently only available via the cairo and svg renderers. The horizontal and vertical rules (\u003cHR\u003e and \u003cVR\u003e) are only available in versions later than 8 July 2011.\nNOTE: For releases later than 9 September 2014, one can use shape=plain so that the size of the node is totally determined by the label. Otherwise, the node’s margin, width and height values may cause the node to be larger, so that edges are clipped away from the label. In effect, shape=plain is shorthand for shape=none width=0 height=0 margin=0.\nIf the value of a label attribute (label for nodes, edges, clusters, and graphs, and the headlabel and taillabel attributes of an edge) is given as an HTML string, that is, delimited by \u003c...\u003e rather than \"...\", the label is interpreted as an HTML description. At their simplest, such labels can describe multiple lines of variously aligned text as provided by ordinary string labels. More generally, the label can specify a table similar to those provided by HTML, with different graphical attributes at each level.\nAs HTML strings are processed like HTML input, any use of the \", \u0026, \u003c, and \u003e characters in literal text or in attribute values need to be replaced by the corresponding escape sequence. For example, if you want to use \u0026 in an href value, this should be represented as \u0026amp;.\nNOTE: The features and syntax supported by these labels are modeled on HTML. However, there are many aspects that are relevant to Graphviz labels that are not in HTML and, conversely, HTML allows various constructs which are meaningless in Graphviz. We will generally refer to these labels as “HTML labels” rather than the cumbersome “HTML-like labels” but the reader is warned that these are not really HTML. The grammar below describes precisely what Graphviz will accept.\nAlthough HTML labels are not, strictly speaking, a shape, they can be viewed as a generalization of the record shapes described above. In particular, if a node has set its shape attribute to none or plaintext, the HTML label will be the node’s shape. On the other hand, if the node has any other shape (except point), the HTML label will be embedded within the node the same way an ordinary label would be. Adding HTML labels to record-based shapes (record and Mrecord) is discouraged and may lead to unexpected behavior because of their conflicting label schemas and overlapping functionality.\nThe following is an abstract grammar for HTML labels. Terminals, corresponding to elements, are shown in bold font, and nonterminals in italics. Square brackets [ and ] enclose optional items. Vertical bars | separate alternatives. Note that, as in HTML, element and attribute names are case-insensitive. (cf. sections 3.2.1 and 3.2.2 of the HTML 4.01 specification).\nlabel : text | fonttable text : textitem | text textitem textitem : string | \u003cBR/\u003e | \u003cFONT\u003e text \u003c/FONT\u003e | \u003cI\u003e text \u003c/I\u003e | \u003cB\u003e text \u003c/B\u003e | \u003cU\u003e text \u003c/U\u003e | \u003cO\u003e text \u003c/O\u003e | \u003cSUB\u003e text \u003c/SUB\u003e | \u003cSUP\u003e text \u003c/SUP\u003e | \u003cS\u003e text \u003c/S\u003e fonttable : table | \u003cFONT\u003e table \u003c/FONT\u003e | \u003cI\u003e table \u003c/I\u003e | \u003cB\u003e table \u003c/B\u003e | \u003cU\u003e table \u003c/U\u003e | \u003cO\u003e table \u003c/O\u003e table : \u003cTABLE\u003e rows \u003c/TABLE\u003e rows : row | rows row | rows \u003cHR/\u003e row row : \u003cTR\u003e cells \u003c/TR\u003e cells : cell | cells cell | cells \u003cVR/\u003e cell cell : \u003cTD\u003e label \u003c/TD\u003e | \u003cTD\u003e \u003cIMG/\u003e \u003c/TD\u003e All non-printing characters such as tabs or newlines are ignored. Above, a string is any collection of printable characters, including spaces. For tables, outside of the body of a \u003cTD\u003e element, whitespace characters are ignored, including spaces; within a \u003cTD\u003e element, spaces are preserved but all other white space characters are discarded. N.B. For technical reasons, if a table is wrapped in a font element such as \u003cFONT\u003e or \u003cB\u003e, any space immediately before or after this will cause a syntax error. For example, the label\n\u003c \u003cU\u003e\u003cTABLE\u003e\u003cTR\u003e\u003cTD\u003ea\u003c/TD\u003e\u003c/TR\u003e\u003c/U\u003e\u003e is not legal. Removing either the space or the \u003cU\u003e...\u003c/U\u003e will fix this.\nHTML comments are allowed within an HTML string. They can occur anywhere provided that, if they contain part of an HTML element, they must contain the entire element.\nAs is obvious from the above description, the interpretation of white space characters is one place where HTML-like labels is very different from standard HTML. In HTML, any sequence of white space characters is collapsed to a single space, If the user does not want this to happen, the input must use non-breaking spaces \u0026nbsp;. This makes sense in HTML, where text layout depends dynamically on the space available. In Graphviz, the layout is statically determined by the input, so it is reasonable to treat ordinary space characters as non-breaking. In addition, ignoring tabs and newlines allows the input text to be formatted for easier reading.\nEach of the HTML elements has a set of optional attributes. Attribute values must appear in double quotes.\nTable element \u003cTABLE ALIGN=\"CENTER|LEFT|RIGHT\" BGCOLOR=color\" BORDER=\"value\" CELLBORDER=\"value\" CELLPADDING=\"value\" CELLSPACING=\"value\" COLOR=\"color\" COLUMNS=\"value\" FIXEDSIZE=\"FALSE|TRUE\" GRADIENTANGLE=\"value\" HEIGHT=\"value\" HREF=\"value\" ID=\"value\" PORT=\"portName\" ROWS=\"value\" SIDES=\"value\" STYLE=\"value\" TARGET=\"value\" TITLE=\"value\" TOOLTIP=\"value\" VALIGN=\"MIDDLE|BOTTOM|TOP\" WIDTH=\"value\" \u003e Table row \u003cTR \u003c!-- No attributes --\u003e \u003e Table cell \u003cTD ALIGN=\"CENTER|LEFT|RIGHT|TEXT\" BALIGN=\"CENTER|LEFT|RIGHT\" BGCOLOR=\"color\" BORDER=\"value\" CELLPADDING=\"value\" CELLSPACING=\"value\" COLOR=\"color\" COLSPAN=\"value\" FIXEDSIZE=\"FALSE|TRUE\" GRADIENTANGLE=\"value\" HEIGHT=\"value\" HREF=\"value\" ID=\"value\" PORT=\"portName\" ROWSPAN=\"value\" SIDES=\"value\" STYLE=\"value\" TARGET=\"value\" TITLE=\"value\" TOOLTIP=\"value\" VALIGN=\"MIDDLE|BOTTOM|TOP\" WIDTH=\"value\" \u003e Font specification \u003cFONT COLOR=\"color\" FACE=\"fontname\" POINT-SIZE=\"value\" \u003e Line break \u003cBR ALIGN=\"CENTER|LEFT|RIGHT\" /\u003e Image inclusion \u003cIMG SCALE=\"FALSE|TRUE|WIDTH|HEIGHT|BOTH\" SRC=\"value\" /\u003e Italic style \u003cI \u003c!-- No attributes --\u003e \u003e Bold style \u003cB \u003c!-- No attributes --\u003e \u003e Underline text \u003cU \u003c!-- No attributes --\u003e \u003e Overline text \u003cO \u003c!-- No attributes --\u003e \u003e Subscript text \u003cSUB \u003c!-- No attributes --\u003e \u003e Superscript text \u003cSUP \u003c!-- No attributes --\u003e \u003e Strike-through text \u003cS \u003c!-- No attributes --\u003e \u003e Horizontal rule \u003cHR \u003c!-- No attributes --\u003e /\u003e Vertical rule \u003cVR \u003c!-- No attributes --\u003e /\u003e ALIGN specifies horizontal placement. When an object is allocated more space than required, this value determines where the extra space is placed left and right of the object. CENTER aligns the object in the center. (Default) LEFT aligns the object on the left. RIGHT aligns the object on the right. (\u003cTD\u003e only) TEXT aligns lines of text using the full cell width. The alignment of a line is determined by its (possibly implicit) associated \u003cBR\u003e element. The contents of a cell are normally aligned as a block. In particular, lines of text are first aligned as a text block based on the width of the widest line and the corresponding \u003cBR\u003e elements. Then, the entire text block is aligned within a cell. If, however, the cell’s ALIGN value is TEXT, and the cell contains lines of text, then the lines are justified using the entire available width of the cell. If the cell does not contain text, then the contained image or table is centered.\nBALIGN specifies the default alignment of \u003cBR\u003e elements contained in the cell. That is, if a \u003cBR\u003e element has no explicit ALIGN attribute, the attribute value is specified by the value of BALIGN. BGCOLOR=“color” sets the color of the background. This color can be overridden by a BGCOLOR attribute in descendents. The value can be a single color or two colors separated by a colon, the latter indicating a gradient fill. BORDER=“value” specifies the width of the border around the object in points. A value of zero indicates no border. The default is 1. The maximum value is 255. If set in a table, and CELLBORDER is not set, this value is also used for all cells in the table. It can be overridden by a BORDER attribute in a cell. CELLBORDER=“value” specifies the width of the border for all cells in a table. It can be overridden by a BORDER tag in a cell. The maximum value is 255. CELLPADDING=“value” specifies the space, in points, between a cell’s border and its content. The default is 2. The maximum value is 255. CELLSPACING=“value” specifies the space, in points, between cells in a table and between a cell and the table’s border. The default is 2. The maximum value is 127. COLOR=“color” sets the color of the font within the scope of \u003cFONT\u003e...\u003c/FONT\u003e, or the border color of the table or cell within the scope of \u003cTABLE\u003e...\u003c/TABLE\u003e, or \u003cTD\u003e...\u003c/TD\u003e. This color can be overridden by a COLOR attribute in descendents. By default, the font color is determined by the fontcolor attribute of the corresponding node, edge or graph, and the border color is determined by the color attribute of the corresponding node, edge or graph. COLSPAN=“value” specifies the number of columns spanned by the cell. The default is 1. The maximum value is 65535. COLUMNS=“value” provides general formatting information concerning the columns. At present, the only legal value is *, which causes a vertical rule to appear between every cell in every row. FACE=“fontname” specifies the font to use within the scope of \u003cFONT\u003e...\u003c/FONT\u003e. This can be overridden by a FACE attribute in descendents. By default, the font name is determined by the fontname attribute of the corresponding node, edge or graph. FIXEDSIZE specifies whether the values given by the WIDTH and HEIGHT attributes are enforced. FALSE allows the object to grow so that all its contents will fit. (Default) TRUE fixes the object size to its given WIDTH and HEIGHT. Both of these attributes must be supplied. GRADIENTANGLE=“value” gives the angle used in a gradient fill if the BGCOLOR is a color list. For the default linear gradient, this specifies the angle of a line through the center along which the colors transform. Thus, an angle of 0 will cause a left-to-right progression. For radial gradients (see STYLE), the angle specifies the position of the center of the coloring. An angle of 0 places the center at the center of the table or cell; an non-zero angle places the fill center along that angle near the boundary. HEIGHT=“value” specifies the mininum height, in points, of the object. The height includes the contents, any spacing and the border. Unless FIXEDSIZE is true, the height will be expanded to allow the contents to fit. The maximum value is 65535. HREF=“value” attaches a URL to the object. Note that the \"value\" is treated as an escString similarly to the URL attribute. ID=“value” allows the user to specify a unique ID for a table or cell. See the id attribute for more information. Note that the \"value\" is treated as an escString similarly to the id attribute. POINT-SIZE=“value” sets the size of the font, in points, used within the scope of \u003cFONT\u003e...\u003c/FONT\u003e. This can be overridden by a POINT-SIZE attribute in descendents. By default, the font size is determined by the fontsize attribute of the corresponding node, edge or graph. PORT=“value” attaches a portname to the object. (See portPos.) This can be used to modify the head or tail of an edge, so that the end attaches directly to the object. ROWS=“value” provides general formatting information concerning the rows. At present, the only legal value is *, which causes a horizontal rule to appear between every row. ROWSPAN=“value” specifies the number of rows spanned by the cell. The default is 1. The maximum value is 65535. SCALE specifies how an image will use any extra space available in its cell. Allowed values are FALSE : keep image its natural size. (Default) TRUE : scale image uniformly to fit. WIDTH : expand image width to fill HEIGHT : expand image height to fill BOTH : expand both image width height to fill If this attribute is undefined, the image inherits the imagescale attribute of the graph object being drawn. As with the imagescale attribute, if the cell has a fixed size and the image is too large, any offending dimension will be shrunk to fit the space, the scaling being uniform in width and height if SCALE=\"true\". Note that the containing cell’s ALIGN and VALIGN attributes override an image’s SCALE attribute. SIDES=“value” specifies which sides of a border in a cell or table should be drawn, if a border is drawn. By default, all sides are drawn. The \"value\" string can contain any collection of the (case-insensitive) characters 'L', 'T', 'R', or 'B', corresponding to the left, top, right and, bottom sides of the border, respectively. For example, SIDES=\"LB\" would indicate only the left and bottom segments of the border should be drawn. SRC=“value” specifies the image file to be displayed in the cell. Note that if the software is used as a web server, file system access to images is more restricted. See GV_FILE_PATH and SERVER_NAME. STYLE specifies style characteristics of the table or cell. Style characteristics are given as a comma or space separated list of style attributes. At present, the only legal attributes are ROUNDED and RADIAL for tables, and RADIAL for cells. If ROUNDED is specified, the table will have rounded corners. This probably works best if the outmost cells have no borders, or their CELLSPACING is sufficiently large. If it is desirable to have borders around the cells, use HR and VR elements, or the COLUMNS and ROWS attributes of TABLE. The RADIAL attribute indicates a radial gradient fill. See the BGCOLOR and GRADIENTANGLE attributes.\nTARGET=“value” determines which window of the browser is used for the URL if the object has one. See W3C documentation. Note that the \"value\" is treated as an escString similarly to the target attribute. TITLE=“value” sets the tooltip annotation attached to the element. This is used only if the element has a HREF attribute. Note that the \"value\" is treated as an escString similarly to the tooltip attribute. TOOLTIP=“value” is an alias for TITLE. VALIGN specifies vertical placement. When an object is allocated more space than required, this value determines where the extra space is placed above and below the object. MIDDLE aligns the object in the center. (Default) BOTTOM aligns the object on the bottom. TOP aligns the object on the top. WIDTH=“value” specifies the mininum width, in points, of the object. The width includes the contents, any spacing and the border. Unless FIXEDSIZE is true, the width will be expanded to allow the contents to fit. The maximum value is 65535. There is some inheritance among the attributes. If a table specifies a CELLPADDING, CELLBORDER or BORDER value, this value is used by the table’s cells unless overridden. If a cell or table specifies a BGCOLOR, this will be the background color for all of its descendents. Of course, if a background or fill color is specified for the graph object owning the label, this will be the original background for the label. The object’s fontname, fontcolor and fontsize attributes are the default for drawing text. These can be overridden by using FONT to set new values. The new font values will hold until overridden by an enclosed FONT element. Finally, the pencolor or color of the graph object will be used as the border color.\nIf you want horizontal or vertical rules used uniformly within a table, consider using the COLUMNS or ROWS attributes rather than using many HR and VR elements.\nBecause of certain limitations in handling tables in a device-independent manner, when BORDER is 1 and both table and cell borders are on and CELLSPACING is less than 2, anomalies can arise in the output, such as gaps between sides of borders which should be abutting or even collinear. The user can usual get around this by increasing the border size or the spacing, or turning off the table border.\nHTML-Like Label Examples Recreating the Record Example The dot input:\ndigraph structs { node [shape=plaintext] struct1 [label=\u003c \u003cTABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\"\u003e \u003cTR\u003e\u003cTD\u003eleft\u003c/TD\u003e\u003cTD PORT=\"f1\"\u003emid dle\u003c/TD\u003e\u003cTD PORT=\"f2\"\u003eright\u003c/TD\u003e\u003c/TR\u003e \u003c/TABLE\u003e\u003e]; struct2 [label=\u003c \u003cTABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\"\u003e \u003cTR\u003e\u003cTD PORT=\"f0\"\u003eone\u003c/TD\u003e\u003cTD\u003etwo\u003c/TD\u003e\u003c/TR\u003e \u003c/TABLE\u003e\u003e]; struct3 [label=\u003c \u003cTABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\" CELLPADDING=\"4\"\u003e \u003cTR\u003e \u003cTD ROWSPAN=\"3\"\u003ehello\u003cBR/\u003eworld\u003c/TD\u003e \u003cTD COLSPAN=\"3\"\u003eb\u003c/TD\u003e \u003cTD ROWSPAN=\"3\"\u003eg\u003c/TD\u003e \u003cTD ROWSPAN=\"3\"\u003eh\u003c/TD\u003e \u003c/TR\u003e \u003cTR\u003e \u003cTD\u003ec\u003c/TD\u003e\u003cTD PORT=\"here\"\u003ed\u003c/TD\u003e\u003cTD\u003ee\u003c/TD\u003e \u003c/TR\u003e \u003cTR\u003e \u003cTD COLSPAN=\"3\"\u003ef\u003c/TD\u003e \u003c/TR\u003e \u003c/TABLE\u003e\u003e]; struct1:f1 -\u003e struct2:f0; struct1:f2 -\u003e struct3:here; } Edit in Playground produces the HTML analogue of the record example above:\nAs usual, an HTML specification is more verbose.\nMore Complex Example On the other hand, HTML labels are much more general:\ndigraph G { rankdir=LR node [shape=plaintext] a [ label=\u003c \u003cTABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\"\u003e \u003cTR\u003e\u003cTD ROWSPAN=\"3\" BGCOLOR=\"yellow\"\u003eclass\u003c/TD\u003e\u003c/TR\u003e \u003cTR\u003e\u003cTD PORT=\"here\" BGCOLOR=\"lightblue\"\u003equalifier\u003c/TD\u003e\u003c/TR\u003e \u003c/TABLE\u003e\u003e ] b [shape=ellipse style=filled label=\u003c \u003cTABLE BGCOLOR=\"bisque\"\u003e \u003cTR\u003e \u003cTD COLSPAN=\"3\"\u003eelephant\u003c/TD\u003e \u003cTD ROWSPAN=\"2\" BGCOLOR=\"chartreuse\" VALIGN=\"bottom\" ALIGN=\"right\"\u003etwo\u003c/TD\u003e \u003c/TR\u003e \u003cTR\u003e \u003cTD COLSPAN=\"2\" ROWSPAN=\"2\"\u003e \u003cTABLE BGCOLOR=\"grey\"\u003e \u003cTR\u003e\u003cTD\u003ecorn\u003c/TD\u003e\u003c/TR\u003e \u003cTR\u003e\u003cTD BGCOLOR=\"yellow\"\u003ec\u003c/TD\u003e\u003c/TR\u003e \u003cTR\u003e\u003cTD\u003ef\u003c/TD\u003e\u003c/TR\u003e \u003c/TABLE\u003e \u003c/TD\u003e \u003cTD BGCOLOR=\"white\"\u003epenguin\u003c/TD\u003e \u003c/TR\u003e \u003cTR\u003e \u003cTD COLSPAN=\"2\" BORDER=\"4\" ALIGN=\"right\" PORT=\"there\"\u003e4\u003c/TD\u003e \u003c/TR\u003e \u003c/TABLE\u003e\u003e ] c [ label=\u003clong line 1\u003cBR/\u003eline 2\u003cBR ALIGN=\"LEFT\"/\u003eline 3\u003cBR ALIGN=\"RIGHT\"/\u003e\u003e ] subgraph { rank=same b c } a:here -\u003e b:there [dir=both arrowtail=diamond] c -\u003e b d [shape=triangle] d -\u003e c [label=\u003c \u003cTABLE\u003e \u003cTR\u003e \u003cTD BGCOLOR=\"red\" WIDTH=\"10\"\u003e \u003c/TD\u003e \u003cTD\u003eEdge labels\u003cBR/\u003ealso\u003c/TD\u003e \u003cTD BGCOLOR=\"blue\" WIDTH=\"10\"\u003e \u003c/TD\u003e \u003c/TR\u003e \u003c/TABLE\u003e\u003e ] } Edit in Playground produces:\nFonts Example An example using \u003cFONT\u003e elements:\ndigraph structs { node [shape=plaintext]; struct1 [label=\u003c\u003cTABLE\u003e \u003cTR\u003e \u003cTD\u003eline 1\u003c/TD\u003e \u003cTD BGCOLOR=\"blue\"\u003e\u003cFONT COLOR=\"white\"\u003eline2\u003c/FONT\u003e\u003c/TD\u003e \u003cTD BGCOLOR=\"gray\"\u003e\u003cFONT POINT-SIZE=\"24.0\"\u003eline3\u003c/FONT\u003e\u003c/TD\u003e \u003cTD BGCOLOR=\"yellow\"\u003e\u003cFONT POINT-SIZE=\"24.0\" FACE=\"ambrosia\"\u003eline4\u003c/FONT\u003e\u003c/TD\u003e \u003cTD\u003e \u003cTABLE CELLPADDING=\"0\" BORDER=\"0\" CELLSPACING=\"0\"\u003e \u003cTR\u003e \u003cTD\u003e\u003cFONT COLOR=\"green\"\u003eMixed\u003c/FONT\u003e\u003c/TD\u003e \u003cTD\u003e\u003cFONT COLOR=\"red\"\u003efonts\u003c/FONT\u003e\u003c/TD\u003e \u003c/TR\u003e \u003c/TABLE\u003e \u003c/TD\u003e \u003c/TR\u003e \u003c/TABLE\u003e\u003e]; } Edit in Playground produces:\nImages Example Using an \u003cIMG\u003e element:\ndigraph structs { node [shape=plaintext]; struct1 [label=\u003c\u003cTABLE\u003e \u003cTR\u003e\u003cTD\u003e\u003cIMG SRC=\"eqn.png\"/\u003e\u003c/TD\u003e\u003c/TR\u003e \u003cTR\u003e\u003cTD\u003ecaption\u003c/TD\u003e\u003c/TR\u003e \u003c/TABLE\u003e\u003e]; } Edit in Playground produces:\nSides Example The sides attribute (version 2.37 and later) allows one to combine cells to form various non-convex shapes. For example, a tee-shaped node\ndigraph { tee [shape=none margin=0 label= \u003c\u003ctable border=\"0\" cellspacing=\"0\" cellborder=\"1\"\u003e \u003ctr\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" style=\"invis\"\u003e\u003c/td\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" sides=\"ltr\"\u003e\u003c/td\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" style=\"invis\"\u003e\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" sides=\"tlb\"\u003e\u003c/td\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" sides=\"b\"\u003e\u003c/td\u003e \u003ctd width=\"9\" height=\"9\" fixedsize=\"true\" sides=\"brt\"\u003e\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e\u003e] } Edit in Playground produces:\nUser-defined Node Shapes There is a third type of node shape which is specified by the user. Typically, these shapes rely on the details of a concrete graphics format. At present, shapes can be described using PostScript, via a file or add-on library, for use in PostScript output, or shapes can be specified by a bitmap-image file for use with SVG or bitmap (jpeg, gif, etc.) output. More information can be found on the page How to create custom shapes.\nSDL Shapes for PostScript One example of user-defined node shapes is provided by Mark Rison of CSR. These are the SDL shapes. These are available as PostScript functions whose use is described in External PostScript procedures. The necessary PostScript library file and sample use can be found in the contrib/sdlshapes directory in the release. Please note the COPYRIGHT AND PERMISSION NOTICE contained in the library file sdl.ps.\nThe table below gives the shape names and the corresponding node shapes:\n","categories":"","description":"","excerpt":"There are three main types of shapes : polygon-based, record-based and …","ref":"/hugo/doc/info/shapes.html","tags":"","title":"Node Shapes"},{"body":"The Interlisp team is using Zotero to create a detailed bibliography of works documenting Lisp, Interlisp and the fruits of various research activities these domains touched upon.\nZotero Bibliography The following table represents a snapshot of the data within Zotero:\nBibliography ","categories":"","description":"","excerpt":"The Interlisp team is using Zotero to create a detailed bibliography …","ref":"/hugo/publications/","tags":"","title":"Publications"},{"body":"Arrow shapes can be specified and named using the following simple grammar. Terminals are shown in bold font and nonterminals in italics. Literal characters are given in single quotes. Square brackets [ and ] enclose optional items. Vertical bars | separate alternatives.\nGrammar arrowname : aname [ aname [ aname [ aname ] ] ] aname : [ modifiers ] shape modifiers : [ 'o' ] [ side ] side : 'l' | 'r' shape : box | crow | curve | icurve | diamond | dot | inv | none | normal | tee | vee Primitive Shapes Shape Image box crow curve diamond dot icurve inv none normal tee vee Shape Modifiers As for the modifiers:\n'l' Clip the shape, leaving only the part to the left of the edge. 'r' Clip the shape, leaving only the part to the right of the edge. 'o' Use an open (non-filled) version of the shape. Left and right are defined as those directions determined by looking from the edge towards the point where the arrow “touches” the node.\nAs an example, the arrow shape lteeoldiamond is parsed as 'l' 'tee' 'o' 'l' 'diamond' and corresponds to the shape:\nNote that the first arrow shape specified occurs closest to the node. Subsequent arrow shapes, if specified, occur further from the node. Also, a shape of none uses space, so, for example, the arrowhead nonenormal is not the same as normal.\nNot all syntactically legal combinations of modifiers are meaningful or semantically valid. For example, none of the modifiers make any sense with none. The following table indicates which modifiers are allowed with which shapes.\nModifier 'l'/'r' o box ✅ ✅ crow ✅ curve ✅ diamond ✅ ✅ dot ✅ icurve ✅ inv ✅ ✅ none normal ✅ ✅ tee ✅ vee ✅ This yields 42 different arrow shapes. The optional second, third, fourth shapes can independently be any of the 42, except the last cannot be none as this would create a redundant shape. Thus, there are 41 × 42³ + 41 × 42² + 41 × 42 + 42 = 3,111,696 different combinations.\nThe following display contains the 42 combinations possible with a single arrow shape. The node attached to the arrow is not drawn but would appear on the right side of the edge.\nbox lbox rbox obox olbox orbox crow lcrow rcrow diamond ldiamond rdiamond odiamond oldiamond ordiamond dot odot inv linv rinv oinv olinv orinv none normal lnormal rnormal onormal olnormal ornormal tee ltee rtee vee lvee rvee curve lcurve rcurve icurve licurve ricurve ","categories":"","description":"","excerpt":"Arrow shapes can be specified and named using the following simple …","ref":"/hugo/doc/info/arrows.html","tags":"","title":"Arrow Shapes"},{"body":"MIT License Copyright 2022 Interlisp.org contributors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","categories":"","description":"","excerpt":"MIT License Copyright 2022 Interlisp.org contributors\nPermission is …","ref":"/hugo/license/","tags":"","title":"License"},{"body":"Color names are resolved in the context of a color scheme. Graphviz currently supports the X11 scheme, the SVG scheme, and the Brewer schemes, with X11 being the default.\nColor names are case-insensitive.\nIn addtition to color names defined by schemes you can also use custom colors.\nThe Brewer color schemes below are covered by this license.\nThe X11 color scheme aliceblue antiquewhite antiquewhite1 antiquewhite2 antiquewhite3 antiquewhite4 aqua aquamarine aquamarine1 aquamarine2 aquamarine3 aquamarine4 azure azure1 azure2 azure3 azure4 beige bisque bisque1 bisque2 bisque3 bisque4 black blanchedalmond blue blue1 blue2 blue3 blue4 blueviolet brown brown1 brown2 brown3 brown4 burlywood burlywood1 burlywood2 burlywood3 burlywood4 cadetblue cadetblue1 cadetblue2 cadetblue3 cadetblue4 chartreuse chartreuse1 chartreuse2 chartreuse3 chartreuse4 chocolate chocolate1 chocolate2 chocolate3 chocolate4 coral coral1 coral2 coral3 coral4 cornflowerblue cornsilk cornsilk1 cornsilk2 cornsilk3 cornsilk4 crimson cyan cyan1 cyan2 cyan3 cyan4 darkblue darkcyan darkgoldenrod darkgoldenrod1 darkgoldenrod2 darkgoldenrod3 darkgoldenrod4 darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkolivegreen1 darkolivegreen2 darkolivegreen3 darkolivegreen4 darkorange darkorange1 darkorange2 darkorange3 darkorange4 darkorchid darkorchid1 darkorchid2 darkorchid3 darkorchid4 darkred darksalmon darkseagreen darkseagreen1 darkseagreen2 darkseagreen3 darkseagreen4 darkslateblue darkslategray darkslategray1 darkslategray2 darkslategray3 darkslategray4 darkslategrey darkturquoise darkviolet deeppink deeppink1 deeppink2 deeppink3 deeppink4 deepskyblue deepskyblue1 deepskyblue2 deepskyblue3 deepskyblue4 dimgray dimgrey dodgerblue dodgerblue1 dodgerblue2 dodgerblue3 dodgerblue4 firebrick firebrick1 firebrick2 firebrick3 firebrick4 floralwhite forestgreen fuchsia gainsboro ghostwhite gold gold1 gold2 gold3 gold4 goldenrod goldenrod1 goldenrod2 goldenrod3 goldenrod4 gray gray0 gray1 gray10 gray100 gray11 gray12 gray13 gray14 gray15 gray16 gray17 gray18 gray19 gray2 gray20 gray21 gray22 gray23 gray24 gray25 gray26 gray27 gray28 gray29 gray3 gray30 gray31 gray32 gray33 gray34 gray35 gray36 gray37 gray38 gray39 gray4 gray40 gray41 gray42 gray43 gray44 gray45 gray46 gray47 gray48 gray49 gray5 gray50 gray51 gray52 gray53 gray54 gray55 gray56 gray57 gray58 gray59 gray6 gray60 gray61 gray62 gray63 gray64 gray65 gray66 gray67 gray68 gray69 gray7 gray70 gray71 gray72 gray73 gray74 gray75 gray76 gray77 gray78 gray79 gray8 gray80 gray81 gray82 gray83 gray84 gray85 gray86 gray87 gray88 gray89 gray9 gray90 gray91 gray92 gray93 gray94 gray95 gray96 gray97 gray98 gray99 green green1 green2 green3 green4 greenyellow grey grey0 grey1 grey10 grey100 grey11 grey12 grey13 grey14 grey15 grey16 grey17 grey18 grey19 grey2 grey20 grey21 grey22 grey23 grey24 grey25 grey26 grey27 grey28 grey29 grey3 grey30 grey31 grey32 grey33 grey34 grey35 grey36 grey37 grey38 grey39 grey4 grey40 grey41 grey42 grey43 grey44 grey45 grey46 grey47 grey48 grey49 grey5 grey50 grey51 grey52 grey53 grey54 grey55 grey56 grey57 grey58 grey59 grey6 grey60 grey61 grey62 grey63 grey64 grey65 grey66 grey67 grey68 grey69 grey7 grey70 grey71 grey72 grey73 grey74 grey75 grey76 grey77 grey78 grey79 grey8 grey80 grey81 grey82 grey83 grey84 grey85 grey86 grey87 grey88 grey89 grey9 grey90 grey91 grey92 grey93 grey94 grey95 grey96 grey97 grey98 grey99 honeydew honeydew1 honeydew2 honeydew3 honeydew4 hotpink hotpink1 hotpink2 hotpink3 hotpink4 indianred indianred1 indianred2 indianred3 indianred4 indigo invis ivory ivory1 ivory2 ivory3 ivory4 khaki khaki1 khaki2 khaki3 khaki4 lavender lavenderblush lavenderblush1 lavenderblush2 lavenderblush3 lavenderblush4 lawngreen lemonchiffon lemonchiffon1 lemonchiffon2 lemonchiffon3 lemonchiffon4 lightblue lightblue1 lightblue2 lightblue3 lightblue4 lightcoral lightcyan lightcyan1 lightcyan2 lightcyan3 lightcyan4 lightgoldenrod lightgoldenrod1 lightgoldenrod2 lightgoldenrod3 lightgoldenrod4 lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightpink1 lightpink2 lightpink3 lightpink4 lightsalmon lightsalmon1 lightsalmon2 lightsalmon3 lightsalmon4 lightseagreen lightskyblue lightskyblue1 lightskyblue2 lightskyblue3 lightskyblue4 lightslateblue lightslategray lightslategrey lightsteelblue lightsteelblue1 lightsteelblue2 lightsteelblue3 lightsteelblue4 lightyellow lightyellow1 lightyellow2 lightyellow3 lightyellow4 lime limegreen linen magenta magenta1 magenta2 magenta3 magenta4 maroon maroon1 maroon2 maroon3 maroon4 mediumaquamarine mediumblue mediumorchid mediumorchid1 mediumorchid2 mediumorchid3 mediumorchid4 mediumpurple mediumpurple1 mediumpurple2 mediumpurple3 mediumpurple4 mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose mistyrose1 mistyrose2 mistyrose3 mistyrose4 moccasin navajowhite navajowhite1 navajowhite2 navajowhite3 navajowhite4 navy navyblue none oldlace olive olivedrab olivedrab1 olivedrab2 olivedrab3 olivedrab4 orange orange1 orange2 orange3 orange4 orangered orangered1 orangered2 orangered3 orangered4 orchid orchid1 orchid2 orchid3 orchid4 palegoldenrod palegreen palegreen1 palegreen2 palegreen3 palegreen4 paleturquoise paleturquoise1 paleturquoise2 paleturquoise3 paleturquoise4 palevioletred palevioletred1 palevioletred2 palevioletred3 palevioletred4 papayawhip peachpuff peachpuff1 peachpuff2 peachpuff3 peachpuff4 peru pink pink1 pink2 pink3 pink4 plum plum1 plum2 plum3 plum4 powderblue purple purple1 purple2 purple3 purple4 rebeccapurple red red1 red2 red3 red4 rosybrown rosybrown1 rosybrown2 rosybrown3 rosybrown4 royalblue royalblue1 royalblue2 royalblue3 royalblue4 saddlebrown salmon salmon1 salmon2 salmon3 salmon4 sandybrown seagreen seagreen1 seagreen2 seagreen3 seagreen4 seashell seashell1 seashell2 seashell3 seashell4 sienna sienna1 sienna2 sienna3 sienna4 silver skyblue skyblue1 skyblue2 skyblue3 skyblue4 slateblue slateblue1 slateblue2 slateblue3 slateblue4 slategray slategray1 slategray2 slategray3 slategray4 slategrey snow snow1 snow2 snow3 snow4 springgreen springgreen1 springgreen2 springgreen3 springgreen4 steelblue steelblue1 steelblue2 steelblue3 steelblue4 tan tan1 tan2 tan3 tan4 teal thistle thistle1 thistle2 thistle3 thistle4 tomato tomato1 tomato2 tomato3 tomato4 transparent turquoise turquoise1 turquoise2 turquoise3 turquoise4 violet violetred violetred1 violetred2 violetred3 violetred4 webgray webgreen webgrey webmaroon webpurple wheat wheat1 wheat2 wheat3 wheat4 white whitesmoke x11gray x11green x11grey x11maroon x11purple yellow yellow1 yellow2 yellow3 yellow4 yellowgreen The SVG color scheme aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray grey green greenyellow honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen Brewer color schemes accent3 color scheme 1 2 3 accent4 color scheme 1 2 3 4 accent5 color scheme 1 2 3 4 5 accent6 color scheme 1 2 3 4 5 6 accent7 color scheme 1 2 3 4 5 6 7 accent8 color scheme 1 2 3 4 5 6 7 8 blues3 color scheme 1 2 3 blues4 color scheme 1 2 3 4 blues5 color scheme 1 2 3 4 5 blues6 color scheme 1 2 3 4 5 6 blues7 color scheme 1 2 3 4 5 6 7 blues8 color scheme 1 2 3 4 5 6 7 8 blues9 color scheme 1 2 3 4 5 6 7 8 9 brbg10 color scheme 1 2 3 4 5 6 7 8 9 10 brbg11 color scheme 1 2 3 4 5 6 7 8 9 10 11 brbg3 color scheme 1 2 3 brbg4 color scheme 1 2 3 4 brbg5 color scheme 1 2 3 4 5 brbg6 color scheme 1 2 3 4 5 6 brbg7 color scheme 1 2 3 4 5 6 7 brbg8 color scheme 1 2 3 4 5 6 7 8 brbg9 color scheme 1 2 3 4 5 6 7 8 9 bugn3 color scheme 1 2 3 bugn4 color scheme 1 2 3 4 bugn5 color scheme 1 2 3 4 5 bugn6 color scheme 1 2 3 4 5 6 bugn7 color scheme 1 2 3 4 5 6 7 bugn8 color scheme 1 2 3 4 5 6 7 8 bugn9 color scheme 1 2 3 4 5 6 7 8 9 bupu3 color scheme 1 2 3 bupu4 color scheme 1 2 3 4 bupu5 color scheme 1 2 3 4 5 bupu6 color scheme 1 2 3 4 5 6 bupu7 color scheme 1 2 3 4 5 6 7 bupu8 color scheme 1 2 3 4 5 6 7 8 bupu9 color scheme 1 2 3 4 5 6 7 8 9 dark23 color scheme 1 2 3 dark24 color scheme 1 2 3 4 dark25 color scheme 1 2 3 4 5 dark26 color scheme 1 2 3 4 5 6 dark27 color scheme 1 2 3 4 5 6 7 dark28 color scheme 1 2 3 4 5 6 7 8 gnbu3 color scheme 1 2 3 gnbu4 color scheme 1 2 3 4 gnbu5 color scheme 1 2 3 4 5 gnbu6 color scheme 1 2 3 4 5 6 gnbu7 color scheme 1 2 3 4 5 6 7 gnbu8 color scheme 1 2 3 4 5 6 7 8 gnbu9 color scheme 1 2 3 4 5 6 7 8 9 greens3 color scheme 1 2 3 greens4 color scheme 1 2 3 4 greens5 color scheme 1 2 3 4 5 greens6 color scheme 1 2 3 4 5 6 greens7 color scheme 1 2 3 4 5 6 7 greens8 color scheme 1 2 3 4 5 6 7 8 greens9 color scheme 1 2 3 4 5 6 7 8 9 greys3 color scheme 1 2 3 greys4 color scheme 1 2 3 4 greys5 color scheme 1 2 3 4 5 greys6 color scheme 1 2 3 4 5 6 greys7 color scheme 1 2 3 4 5 6 7 greys8 color scheme 1 2 3 4 5 6 7 8 greys9 color scheme 1 2 3 4 5 6 7 8 9 oranges3 color scheme 1 2 3 oranges4 color scheme 1 2 3 4 oranges5 color scheme 1 2 3 4 5 oranges6 color scheme 1 2 3 4 5 6 oranges7 color scheme 1 2 3 4 5 6 7 oranges8 color scheme 1 2 3 4 5 6 7 8 oranges9 color scheme 1 2 3 4 5 6 7 8 9 orrd3 color scheme 1 2 3 orrd4 color scheme 1 2 3 4 orrd5 color scheme 1 2 3 4 5 orrd6 color scheme 1 2 3 4 5 6 orrd7 color scheme 1 2 3 4 5 6 7 orrd8 color scheme 1 2 3 4 5 6 7 8 orrd9 color scheme 1 2 3 4 5 6 7 8 9 paired10 color scheme 1 2 3 4 5 6 7 8 9 10 paired11 color scheme 1 2 3 4 5 6 7 8 9 10 11 paired12 color scheme 1 2 3 4 5 6 7 8 9 10 11 12 paired3 color scheme 1 2 3 paired4 color scheme 1 2 3 4 paired5 color scheme 1 2 3 4 5 paired6 color scheme 1 2 3 4 5 6 paired7 color scheme 1 2 3 4 5 6 7 paired8 color scheme 1 2 3 4 5 6 7 8 paired9 color scheme 1 2 3 4 5 6 7 8 9 pastel13 color scheme 1 2 3 pastel14 color scheme 1 2 3 4 pastel15 color scheme 1 2 3 4 5 pastel16 color scheme 1 2 3 4 5 6 pastel17 color scheme 1 2 3 4 5 6 7 pastel18 color scheme 1 2 3 4 5 6 7 8 pastel19 color scheme 1 2 3 4 5 6 7 8 9 pastel23 color scheme 1 2 3 pastel24 color scheme 1 2 3 4 pastel25 color scheme 1 2 3 4 5 pastel26 color scheme 1 2 3 4 5 6 pastel27 color scheme 1 2 3 4 5 6 7 pastel28 color scheme 1 2 3 4 5 6 7 8 piyg10 color scheme 1 2 3 4 5 6 7 8 9 10 piyg11 color scheme 1 2 3 4 5 6 7 8 9 10 11 piyg3 color scheme 1 2 3 piyg4 color scheme 1 2 3 4 piyg5 color scheme 1 2 3 4 5 piyg6 color scheme 1 2 3 4 5 6 piyg7 color scheme 1 2 3 4 5 6 7 piyg8 color scheme 1 2 3 4 5 6 7 8 piyg9 color scheme 1 2 3 4 5 6 7 8 9 prgn10 color scheme 1 2 3 4 5 6 7 8 9 10 prgn11 color scheme 1 2 3 4 5 6 7 8 9 10 11 prgn3 color scheme 1 2 3 prgn4 color scheme 1 2 3 4 prgn5 color scheme 1 2 3 4 5 prgn6 color scheme 1 2 3 4 5 6 prgn7 color scheme 1 2 3 4 5 6 7 prgn8 color scheme 1 2 3 4 5 6 7 8 prgn9 color scheme 1 2 3 4 5 6 7 8 9 pubu3 color scheme 1 2 3 pubu4 color scheme 1 2 3 4 pubu5 color scheme 1 2 3 4 5 pubu6 color scheme 1 2 3 4 5 6 pubu7 color scheme 1 2 3 4 5 6 7 pubu8 color scheme 1 2 3 4 5 6 7 8 pubu9 color scheme 1 2 3 4 5 6 7 8 9 pubugn3 color scheme 1 2 3 pubugn4 color scheme 1 2 3 4 pubugn5 color scheme 1 2 3 4 5 pubugn6 color scheme 1 2 3 4 5 6 pubugn7 color scheme 1 2 3 4 5 6 7 pubugn8 color scheme 1 2 3 4 5 6 7 8 pubugn9 color scheme 1 2 3 4 5 6 7 8 9 puor10 color scheme 1 2 3 4 5 6 7 8 9 10 puor11 color scheme 1 2 3 4 5 6 7 8 9 10 11 puor3 color scheme 1 2 3 puor4 color scheme 1 2 3 4 puor5 color scheme 1 2 3 4 5 puor6 color scheme 1 2 3 4 5 6 puor7 color scheme 1 2 3 4 5 6 7 puor8 color scheme 1 2 3 4 5 6 7 8 puor9 color scheme 1 2 3 4 5 6 7 8 9 purd3 color scheme 1 2 3 purd4 color scheme 1 2 3 4 purd5 color scheme 1 2 3 4 5 purd6 color scheme 1 2 3 4 5 6 purd7 color scheme 1 2 3 4 5 6 7 purd8 color scheme 1 2 3 4 5 6 7 8 purd9 color scheme 1 2 3 4 5 6 7 8 9 purples3 color scheme 1 2 3 purples4 color scheme 1 2 3 4 purples5 color scheme 1 2 3 4 5 purples6 color scheme 1 2 3 4 5 6 purples7 color scheme 1 2 3 4 5 6 7 purples8 color scheme 1 2 3 4 5 6 7 8 purples9 color scheme 1 2 3 4 5 6 7 8 9 rdbu10 color scheme 1 2 3 4 5 6 7 8 9 10 rdbu11 color scheme 1 2 3 4 5 6 7 8 9 10 11 rdbu3 color scheme 1 2 3 rdbu4 color scheme 1 2 3 4 rdbu5 color scheme 1 2 3 4 5 rdbu6 color scheme 1 2 3 4 5 6 rdbu7 color scheme 1 2 3 4 5 6 7 rdbu8 color scheme 1 2 3 4 5 6 7 8 rdbu9 color scheme 1 2 3 4 5 6 7 8 9 rdgy10 color scheme 1 2 3 4 5 6 7 8 9 10 rdgy11 color scheme 1 2 3 4 5 6 7 8 9 10 11 rdgy3 color scheme 1 2 3 rdgy4 color scheme 1 2 3 4 rdgy5 color scheme 1 2 3 4 5 rdgy6 color scheme 1 2 3 4 5 6 rdgy7 color scheme 1 2 3 4 5 6 7 rdgy8 color scheme 1 2 3 4 5 6 7 8 rdgy9 color scheme 1 2 3 4 5 6 7 8 9 rdpu3 color scheme 1 2 3 rdpu4 color scheme 1 2 3 4 rdpu5 color scheme 1 2 3 4 5 rdpu6 color scheme 1 2 3 4 5 6 rdpu7 color scheme 1 2 3 4 5 6 7 rdpu8 color scheme 1 2 3 4 5 6 7 8 rdpu9 color scheme 1 2 3 4 5 6 7 8 9 rdylbu10 color scheme 1 2 3 4 5 6 7 8 9 10 rdylbu11 color scheme 1 2 3 4 5 6 7 8 9 10 11 rdylbu3 color scheme 1 2 3 rdylbu4 color scheme 1 2 3 4 rdylbu5 color scheme 1 2 3 4 5 rdylbu6 color scheme 1 2 3 4 5 6 rdylbu7 color scheme 1 2 3 4 5 6 7 rdylbu8 color scheme 1 2 3 4 5 6 7 8 rdylbu9 color scheme 1 2 3 4 5 6 7 8 9 rdylgn10 color scheme 1 2 3 4 5 6 7 8 9 10 rdylgn11 color scheme 1 2 3 4 5 6 7 8 9 10 11 rdylgn3 color scheme 1 2 3 rdylgn4 color scheme 1 2 3 4 rdylgn5 color scheme 1 2 3 4 5 rdylgn6 color scheme 1 2 3 4 5 6 rdylgn7 color scheme 1 2 3 4 5 6 7 rdylgn8 color scheme 1 2 3 4 5 6 7 8 rdylgn9 color scheme 1 2 3 4 5 6 7 8 9 reds3 color scheme 1 2 3 reds4 color scheme 1 2 3 4 reds5 color scheme 1 2 3 4 5 reds6 color scheme 1 2 3 4 5 6 reds7 color scheme 1 2 3 4 5 6 7 reds8 color scheme 1 2 3 4 5 6 7 8 reds9 color scheme 1 2 3 4 5 6 7 8 9 set13 color scheme 1 2 3 set14 color scheme 1 2 3 4 set15 color scheme 1 2 3 4 5 set16 color scheme 1 2 3 4 5 6 set17 color scheme 1 2 3 4 5 6 7 set18 color scheme 1 2 3 4 5 6 7 8 set19 color scheme 1 2 3 4 5 6 7 8 9 set23 color scheme 1 2 3 set24 color scheme 1 2 3 4 set25 color scheme 1 2 3 4 5 set26 color scheme 1 2 3 4 5 6 set27 color scheme 1 2 3 4 5 6 7 set28 color scheme 1 2 3 4 5 6 7 8 set310 color scheme 1 2 3 4 5 6 7 8 9 10 set311 color scheme 1 2 3 4 5 6 7 8 9 10 11 set312 color scheme 1 2 3 4 5 6 7 8 9 10 11 12 set33 color scheme 1 2 3 set34 color scheme 1 2 3 4 set35 color scheme 1 2 3 4 5 set36 color scheme 1 2 3 4 5 6 set37 color scheme 1 2 3 4 5 6 7 set38 color scheme 1 2 3 4 5 6 7 8 set39 color scheme 1 2 3 4 5 6 7 8 9 spectral10 color scheme 1 2 3 4 5 6 7 8 9 10 spectral11 color scheme 1 2 3 4 5 6 7 8 9 10 11 spectral3 color scheme 1 2 3 spectral4 color scheme 1 2 3 4 spectral5 color scheme 1 2 3 4 5 spectral6 color scheme 1 2 3 4 5 6 spectral7 color scheme 1 2 3 4 5 6 7 spectral8 color scheme 1 2 3 4 5 6 7 8 spectral9 color scheme 1 2 3 4 5 6 7 8 9 ylgn3 color scheme 1 2 3 ylgn4 color scheme 1 2 3 4 ylgn5 color scheme 1 2 3 4 5 ylgn6 color scheme 1 2 3 4 5 6 ylgn7 color scheme 1 2 3 4 5 6 7 ylgn8 color scheme 1 2 3 4 5 6 7 8 ylgn9 color scheme 1 2 3 4 5 6 7 8 9 ylgnbu3 color scheme 1 2 3 ylgnbu4 color scheme 1 2 3 4 ylgnbu5 color scheme 1 2 3 4 5 ylgnbu6 color scheme 1 2 3 4 5 6 ylgnbu7 color scheme 1 2 3 4 5 6 7 ylgnbu8 color scheme 1 2 3 4 5 6 7 8 ylgnbu9 color scheme 1 2 3 4 5 6 7 8 9 ylorbr3 color scheme 1 2 3 ylorbr4 color scheme 1 2 3 4 ylorbr5 color scheme 1 2 3 4 5 ylorbr6 color scheme 1 2 3 4 5 6 ylorbr7 color scheme 1 2 3 4 5 6 7 ylorbr8 color scheme 1 2 3 4 5 6 7 8 ylorbr9 color scheme 1 2 3 4 5 6 7 8 9 ylorrd3 color scheme 1 2 3 ylorrd4 color scheme 1 2 3 4 ylorrd5 color scheme 1 2 3 4 5 ylorrd6 color scheme 1 2 3 4 5 6 ylorrd7 color scheme 1 2 3 4 5 6 7 ylorrd8 color scheme 1 2 3 4 5 6 7 8 ylorrd9 color scheme 1 2 3 4 5 6 7 8 9 ColorBrewer License Apache-Style Software License for ColorBrewer software and ColorBrewer Color Schemes, Version 1.1\nCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The Pennsylvania State University. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions as source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nThe end-user documentation included with the redistribution, if any, must include the following acknowledgment:\nThis product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).\nAlternately, this acknowledgment may appear in the software itself, if and wherever such third-party acknowledgments normally appear.\nThe name “ColorBrewer” must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact Cynthia Brewer at cbrewer@psu.edu.\nProducts derived from this software may not be called “ColorBrewer”, nor may “ColorBrewer” appear in their name, without prior written permission of Cynthia Brewer.\nTHIS SOFTWARE IS PROVIDED “AS IS” AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CYNTHIA BREWER, MARK HARROWER, OR THE PENNSYLVANIA STATE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n","categories":"","description":"","excerpt":"Color names are resolved in the context of a color scheme. Graphviz …","ref":"/hugo/doc/info/colors.html","tags":"","title":"Color Names"},{"body":"These are some representative external resources. The list includes tools that complement Graphviz, such as graph generators, postprocessors and interactive viewers. It also includes higher level systems and web sites that rely on Graphviz as a visualization service.\nPlease suggest additions to this list via merge request.\nGraph drawing can be considered one of the tool sets used in analyzing data. Anyone interested in pursuing work in data science can find some helpful information here.\nSimple Examples and Tutorials Searchable notes and examples [René Nyffenegger] Noteworthy Sketchviz generates layouts in a hand-made style. Javascript / Wasm version of Graphviz via Emscripten @hpcc-js/wasm [HPCC Systems] - github viz.js (2013-2018, now archived) - Javascript version of Graphviz via Emscripten [Mike Daines] Graphviz pocket reference (2012-2020) [Josh Hayes-Sheen] Editor plugins Visual Studio Code vscode-graphviz plugin (2018-2020) [João Pinto,Stephan van Stekelenburg] Emacs graphviz-dot-mode (2020) Vim graphviz.vim (2021) wmgraphviz.vim (2010-2018) Eclipse Eclipse Graphical Editing Framework DOT (2015-2021), an Eclipse plugin that can be used to render and edit DOT graphs within the Eclipse Graphical Editing Framework (GEF). For further information watch the recorded GEF DOT session on the EclipseCon Europe 2018. [Fabian Steeg, Michael Clay, Alexander Nyssen, Matthias Wienand, Tamas Miklossy] EclipseGraphviz (2020) - an Eclipse plug-in that provides a Java API for Graphviz and an Image Viewer view that allows easily visualizing the graphical output of your .dot files as you save changes to them. emf2gv (2012), an Eclipse plugin that helps to transform an Eclipse Modelling Framework (EMF) model into a diagram using Graphviz. GitHub, Wiki Notepad++ NppGraphViz (2015-2021) - A Notepad++ plugin that sends the current tab’s document to a GraphViz preview window. Graphical Interfaces Interactive viewers.\nGraph Galaxy (2020-2021) macOS WYSIWYG Graphviz editor. [Tianyong Tang] Qt Visual Graph Editor (2018-2021) A multiplatform visual graph editor which can create and manuipulate graphs interactively, import and export into various popular graph formats (GEXF, GraphML, DOT, GML), convert data between them and so on. Since recent versions, Graphviz is used as a layout engine. [Ars L. Masiuk] Graphviz Visual Editor A web application for interactive visual editing of Graphviz graphs described in the DOT language. [Magnus Jacobsson] preview-dot (2019) visualises Graphviz graphs (with a .gv extension) within the preview pane of Windows Explorer and Outlook. [Simon Laing] d3-graphviz Renders SVG from graphs described in the DOT language using the @hpcc-js/wasm port of Graphviz and does animated transitions between graphs. [Magnus Jacobsson] jquery.graphviz.svg, jQuery plugin to make Graphviz SVG output more interactive and easier to navigate. [Rich Cooper] Liviz.js (2011-2012), DHTML-based interactive viewer for Graphviz. Github, Demo [Satoshi Ueyama] Graphviz Test Tool (2014, abandoned), a Java GUI front-end for Graphviz [Hansuli Anderegg] GraphvizFiddle, a dual-view Graphviz editor [Hermann Stamm-Wilbrandt] jQuery.Graphviz, a jQuery based interactive graph viewer for graphviz svg [Pablo Martín] NodeViz, a framework for mapping relational data to highly styled Graphviz and displaying interactively in web clients [Greg Michalec and Skye Bender-deMoll] GraphSpe, includes a converter for Microsoft Silverlight Xaml (SVG based) [Ceyhun Ciper] Graphviz4Net provides Windows Presentation Foundation (WPF) control that is capable of rendering graph layouts using Graphviz. [Štěpán Šindelář] ZGRViewer, an SVG-based zooming graph viewer for large graphs [Emmanuel Pietriga] Instaviz, iOS graph sketching app using Graphviz libraries for rendering. [Glen Low] idot (2010), an incremental Graphviz viewer (Java ≥ 1.5 with the excellent prefuse toolkit). [Mikko Vinni] KGraphViewer (2014-2018), a KDE viewer for layouts generated by Graphviz tools. [Gaël de Chalendar] Yoix (2000-2011, abandoned) - a scripting language implemented in Java with a data visualization module called YDAT that provides interactive display of GraphViz files (use -Txdot -y) [John Mocenigo] Pixelglow’s document-based GUI (2008) for Mac OS X (won a 2004 award from Apple) [Glen Low] TINTFU (2003), a Java-based editor for .dot graph files. [Walter Stroebel] Canviz (2006-2013), an HTML5/Javascript canvas viewer. [Ryan Schmidt]. Source BioGrapher Excel front-end (WinXP and Mac) for Graphviz that allows the user to specify graphs in a spreadsheet using adjacency matrix, node list or Newick notation (for phylogenetic trees) and visualize the layout generated by Graphviz as an Excel (vector graphics) picture object. [Rama Viswanathan] xdot.py, an interactive viewer for graphs. [Jose Fonseca] IdeaTree, a platform for concurrent, shared knowledge mapping Wigraf (2009, abandoned), a Windows graphviz frontend based on WinGraphviz and C# .NET. “Graf” is polish for “graph.” [Kamil Lemański] Leonhard (2010-2011, abandoned), a simple viewer/editor for GraphViz, developed with MacRuby. (See the demo.) EasyGraphViz, a Japanese editor for Graphviz. [Nikolaos Kavvadias] DotEditor (2015), GUI editor of Graphviz graphs Edotor (2018-2022) Interactive web UI. GitHub. Language Bindings Interfaces that allow graphviz to be called from a general purpose language or system.\nSwift graphviz (2020-2021) - a Swift package for Graphviz [Mattt] MediaWiki Extension:GraphViz [Coffman] mediawiki-graph (2006) integrates integrate Graph::Easy into MediaWiki. Drupal graphviz_filter (2008-2020) - treats input text as Graphviz DOT syntax, converts it using Graphviz tools to the requested format(s) and renders it in HTML [Karim Ratib] graphapi (2010-2018), a Drupal graph generation module with Graphviz Dot output capabilities. [Sebastian Daniel] Wordpress WP Graphviz plugin for Wordpress, to allow Graphviz images to be easily integrated into a Wordpress page. [DeBAAT] Python Pydot - a Python interface to Graphviz (Windows comptible). Python-Graph - A library for working with graphs in Python. PyGraphviz - a Python interface to Graphviz similar to NetworkX. yapgvb Yet Another Graphviz Python Binding [Lonnie Princehouse] mfgraph - C++ interface with native bindings for Python [Michael Föetsch] GvGen - a Python class to generate dot files [Sebastien Tricaud] pytm - A Pythonic framework for threat modeling, generating diagrams with Graphviz graph-tool (2006-2021), an efficient Python module for manipulation and statistical analysis of graphs, which includes an interface to GraphViz, via its python bindings. [Tiago de Paula Peixoto] Go gonum - Generalized graph package, reads and emits Graphviz format. gographviz - a Graphviz parser for go [Walter Schulze]. go-dfd - Generates Data Flow Diagrams in Graphviz format. Django django-graphviz - a Django app using Graphviz. DjangoGraphviz - Converts Django models into Graphviz DOT files. Java graphviz-java (2015-2021) - Use graphviz with pure Java. Maven JPGD (2006-2016): A Java parser for Graphviz documents [Alexander Merz] Java API (2003-2016) [Laszlo Szathmary] PayPal’s digraph-parser (2017 - now Archived) - Simple, standalone Java parser for digraph DSL (domain-specific language) in Graphviz DOT syntax. C# and .NET csdot (2021) - C# interface for graphviz. Can be used to Load and Save graphs. Supports maximum set of attributes associated. Nuget graphviznet (2020) - .NET wrapper for the command-line GraphViz native binaries. QuikGraph (2021) - Generic Graph Data Structures and Algorithms for .NET COM WinGraphviz (2006) COM Object [Ood Tsen] Perl Graphviz2 - perl interface, supports new options [Ron Savage] GraphViz2::Marpa - a Marpa-based parser for DOT files. [Ron Savage] A Perl interface to Graphviz [Leon Brocard] Tk::GraphViz - a perl module for displaying graphs in a perl/TK canvas [Jeremy Slade] Graph-ReadWrite - module that supports ‘dot’ syntax graphs [Neil Bowers] GraphViz::DBI - graph database tables and their relationships [Marcel Grunauer] 100 more hits in CPAN GraphViz::ISA - graph Perl packages’ ISA runtime hierarchies [Marcel Grunauer] Graph::Easy is a rectilinear graph drawing program compatible with Graphviz and written entirely in perl for ease of installation. [Tels] Ruby ruby-graphviz (2004-2020) - Ruby interface to Graphviz. RubyGems [Grégoire Lejeune] graphr (2012) - Graph-related Ruby classes. RubyGems graphr (2001) Graph-related Ruby classes using graphviz [Robert Feldt] graphviz (2013-2021) - A lightweight interface for generating graphs with Graphviz. RubyGems graph (2009-2020) - a type of hash that outputs in graphviz’s dot format. RubyGems railroady (2007-2021) generates Rails 3/4/5 model (ActiveRecord, Mongoid, Datamapper) and controller UML diagrams as cross-platform .svg files, as well as in the DOT language. GitHub, RubyGems state_machines-graphviz generates di-graphs based on the events, states, and transitions defined for a state machine using GraphViz. RubyGems stateoscope (2005-2019) visualize state machines using Graphviz. RubyGems gviz (2012-2015) generates dot files with Ruby syntax RubyGems MATLAB graphviz4matlab (2017) - Matlab interface to Graphviz graph layout package. Allows interactive editing of the resulting graphs. MATLAB - GraphViz interface (2004) [Leon Peshkin] R R-Graphviz (guide) from the Bio-Conductor project integrates graphs and statistical models. [Robert Gentleman, Jeff Gentry and the R team] DiagrammeR (2015-2020) - visualises graphs and networks using tabular data in R, and can emit Graphviz DOT code with render_graph(output = \"DOT\") Web Server The original webdot in TCL [John Ellson]\n(also see this shell wrapper to protect webdot servers from overload) And a simplified webdot.pl in Perl [Stephen North, with a huge assist from John Linderman] DokuWiki DokuWiki Graphviz Plugin directed and non-directed graph images from “dot” language [Andreas Gohr] LaTeX dot2tex is a LaTeX-friendly converter from Graphviz (xdot) to converting xdot PSTricks or PGF/TikZ commands, with support for LaTeX labels and arrows. [Kjell Magne Fauske] Ladot: scripts for including LaTeX in your Graphviz files [Brighten Godfrey] graphviz.tex: macros for including Graphviz in your LaTeX files [Derek Rayside] TeXmacs, a scientific text editor, inspired by TeX and GNU Emacs, has a Graphviz interface [Joris van der Hoeven] PHP GraPHP (2015-2021) - Graphviz bindings for PHP Image_Graphviz (2002-2010) Interface to GraphViz tools [Sebastian Bergmann] Haskell graphviz package (2008-2020) - provides bindings for the Dot language used by the Graphviz suite of programs for visualising graphs, as well as functions to call those programs. Hackage Common Lisp s-graphviz (2014-2020) - an S-expression presentation of GraphViz. The original idea is from S-DOT, but with a full compatiblity of original DOT syntax by following its language definition. [Xu Jingtao] cl-dot (2005-2020) generates dot (a program in the GraphViz suite) output from arbitrary Lisp data. s-dot2 (2018) - Fork of S-DOT cl-graphviz (2012-2015) provides a CFFI based interface for Graphviz and integrates into cl-graph. S-DOT (2006-2010) - a Common Lisp interface to dot [also Martin Loetzsch] Rust dot (2015-2020) - A library for generating Graphviz DOT language files for graphs, extracted from the private graphviz library in core rust. It is almost entirely the work of the Rust team. crates.io [petgraph(https://github.com/petgraph/petgraph) - General graph data structure library, can output Graphviz format. crates.io gsgdt (Generic Stringly typed Graph DataType) is an opinionated graph visualization and graph diff visualization library. crates.io machine (2015-2019) defines procedural macros to help you write enum based state machines, and can output Graphviz graphs of the generated state machines. crates.io macro-machines (2017-2020) provides state machine macros with logging and graphviz dotfile generation. crates.io tabbycat (2020-2021) generate dot graphs with types defined in Rust. crates.io cargo-depgraph (2020) creates dependency graphs for Cargo projects using Cargo metadata and Graphviz. crates.io Generators and Translators Filters that transform other data sources and formats into Graphviz.\nGraphvidian (2022), Obsidian plugin to export Graphviz graphs from vault’s notes [Ooker] Excel to Graphviz (1) (2017), a tool for visualizing Excel data as graphs [Matt Castelli] Excel to Graphviz (2) (2016-2021), VBA macro spreadsheet, visualising Excel data as graphs. Blog [Jeffrey Long] ExcelToGraphviz (2018), node.js tool converting Excel sheets to graphviz [partrickli] SchemaSpy analyzes and displays metadata for any database via JDBC, letting you click through a hierarchy of tables [John Currier] Linguine Maps (2006) visualize XML DTDs, Apache Object Relational Bridge Files, Apache Ant Build files, and provide a Java API for diagramming. GitHub [Pavel Simakov] PostgreSQL AutoDoc documents the relation structure of PostgreSQL databases [Rod Taylor] DOTML - XML markup to mirror dot language. Includes scripts and XSLT to transform and render [Martin Loetzsch] Sql2Dot - a tiny parser in Java to transform sql into dot for visualizing data structures [Robert Dale] SqlPP - a scripted SQL query generation framework that generates graphviz SQL::Translator (aka SQLFairy) (2002-2020) - a group of Perl modules that manipulate structure data definitions (mostly database schemas) in interesting ways, such as visualizations of schemas (pseudo-ER diagrams with Graphviz), GitHub [Szilárd Vajda] gprof filters - pl_from_gprof and dot_from_pl [Robert Nielsen] and an old gprof2dot.awk [Stephen North] DBGraphNav, a tool to facilitate the browsing of data within relational databases. [Paul McMillan] Network and Web Engineering Tools Using Graphviz DNSViz (2021), a DNS visualization tool GitHub TraceViz (2008) Traceroute visualization with sharp-looking SVG styles [Vidar Hokstad] afterglow is a collection of scripts to generate graphs for Graphviz (and LGL), from various network logs and firewall rulesets [Raffael Marty] (see also tenshi for logfile filtering) SMART passive network flow visualization tool [Cisco’s Critical Infrastructure Assurance Group (CIAG) Research team] CSO Online: What a Botnet Looks like (Flash) [David Vorel] EFnet IRC Network server routing maps [Douglas Boldt] netmap (2013) draws the route connecting you with the Internet Pathalizer visualizes paths traversed by users through web sites [Arnout Engelen] apache2dot.pl (2005) parses an Apache log file to a format suitable for use with neato or dot, displaying links as they are being followed within your web site. sig2dot generates a graph of all of the signature relationships in a GPG/PGP keyring PHP+Graphviz tool that makes a sitemap of a web site dynamically [Laszlo Szathmary] Rocketfuel ISP mapper (well, look here) [U. Washington] DNS server visualization tcpdump2dot filter to allow admins to network activity [Gulfie] Visitors, a fast web log analyzer (2004-2006) uses graphviz to display usage patterns showing how users are using your web site. [Salvatore Sanfilippo] Visualize your firewall (2008-2020) uses graphviz to produce a graph of your iptables ruleset. GitHub [Chris Forno] Users interested in general network monitoring tools can find a comparison of some here.\nAI and Language Tools Using Graphviz Keras plot_model function outputs Keras neural networks to Graphviz format. Andreas Romeyke’s txt2graph - visualize the structure and dependencies of a text read from stdin and generates a dot-File for graphviz to stdout Ontoviz is a plugin for displaying knowledge base diagrams in the Protoge system rdfpuml (part of rdf2rml) generates PlantUML diagrams from RDF graphs. (PlantUML uses Graphviz for layout) CanooNet , a German word formation dictionary. (Try Blockflöte, Hochschule, or Massanzug in the entry field) Topic extraction using Wikipedia data. FcaStone lays out algebraic lattices in the sense of Formal Concept Analysis. (Try the demo or the lattice visualisations of Roget’s Thesaurus). [Uta Priss] Programming and Software Engineering Tools Using Graphviz CAIRIS is a platform for specifying and modelling secure and usable systems. [Shamal Faily] ERD (Entity-Relationship Diagram) (2019-2021) translates a plain text description of a relational database schema to a graphical entity-relationship diagram. [Andrew Gallant] TheHat workflow engine based on IRC, XMPP (Jabber) shows workflows in auto-refreshing webpages [Dave Parker] anifsm animates graphs in dot format via tcldot (part of the TorX software visualization suite) [Alex Belinfante and TorX consortium] doxygen uses graphviz to produce class hierarchies and other diagrams directly from source code [Dimitri van Heesch] nmdepend (2004-2013, abandoned) is a lightweight link-time dependency analyzer for C/C++ object files and libraries, helps manage cross-directory dependencies [Eddy Pronk] AsmL an executable specification language from Microsoft Research. UMLGraph - a Java tool for the Declarative Drawing of UML diagrams which generates diagrams using dot [Diomidis Spinellis] (Diomidis also contributed code for a richer set of arrow heads for dot, which he claims were really part of a stealthy plot to have Graphviz taken over by the UML community. :-) Merisedot - a tool to generate MCD Entity/Relation graphics of Merise. (Seulement en Français) YaccViso YACC visualization tool Callgrind makes callgraphs from Valgrind [Jörg Schillin and Josef Weidendorfer] Maria - Modular Reachability Analyzer - a reachability analyzer for concurrent systems that uses Algebraic System Nets as its modelling formalism [Marko Mäkelä] IsaViz: A Visual Authoring Tool for RDF [Emmanuel Pietriga] Finite State Machine web visualization interactively accepts input from a form [Gertjan van Noord] rpmgraph, part of rpm-devel package (source), uses neato to draw a graph of dependencies between RPMs on RedHat or other RPM based systems [Andrea Lombardoni] Compendium-TA, an integrated package of modelling tools which uses Graphviz for graph layouts [Alan Richardson] CodeViz - a call graph generation utility for C/C++ that assumes dot for its back end [Mel Gorman] Pimentech-DbUtils - utils for writing patterns databases in XML (Extended Entities Relationship diagram (ERA)) and exporting them to graphviz and sql. LJV (Lightweight Java Visualizer) is a tool for visualizing Java data structures with Graphviz. It has been used to good effect in CS1 and CS2-level data structures courses. [John Hamer] Python call graphs ArgoUML Graphviz Automatically repositioning all visual elements from UML diagrams that are stored in XMI. These can be exported with DOT to PDF, SVG, PNG, etc. This XLST runs independently of ArgoUML. [Pander] Ragel (think “lex”) compiles executable finite state machines from regular languages and can generate diagrams of the state machines in DOT format. APIviz is a JavaDoc doclet which extends the Java standard doclet. It generates comprehensive UML-like class and package diagrams. Reverse Snowflake Joins is a tool that parses SQL Select statements and generates a diagram. eEye Binary Diffing Suite is a suite of tools for binary differential analysis, especially for reverse engineering patches as well as program updates. myDBR is web-based reporting system for relational databases using Graphviz as one of its charting modules. YaST openSUSE installation and configuration showing a graph of storage devices with dependencies. [Arvin Schnell] Grails class diagram plugin provides an UML-like diagram of grails domain classes. [Trygve Amundsen] PlantUML generates UML diagrams (classes, usecases, activities, components) using a simple text description language. [Arnaud Roques] javashot captures the dynamic execution flow of a Java programa. The traces can be viewed using Graphviz. scxml2dot (2010) - a very simple conversion function in Perl to plot a finite state machine written in State Chart XML (SCXML) using the Graphviz tools. [Fabrizio Morbini] Erviz, an entity-relationship diagram generator that converts plain text files to DOT-formatted graphical files for Graphviz. [Mitsuru Kono] Symfony application-map plugin, an easy-to-use documentation tool for the symfony framework community. [Tomasz Ducin] Protodot visualises Protocol Buffer schemas Configuration Management Terraform’s terraform graph command generates a visual representation of either a configuration or execution plan. The output is in the DOT format, which can be used by GraphViz to generate charts. ansible-playbook-grapher (2017-2021) graphs Ansible playbook execution with Graphviz ansible-inventory-grapher (2014-2019) graphs Ansible inventory host files with Graphviz. Puppet generates graphviz graphs showing relationships Profilers pprof (2005-2021) is a tool for visualization and analysis of profiling data, using Graphviz to layout callgraph profiles. Build Systems Bazel Build System, Blogpost (2015) shows a graph of your build dependencies using Graphviz. Gallery CMake build system can generate Graphviz files showing the dependencies between the targets in a project, as well as external libraries which are linked against. Ninja, a small, fast build system, can output graphviz dependency graphs. Gallery makefile2graph (2014-2018) renders GNU Make Makefiles dependency graphs with Graphviz Buck can render a graph of dependencies using Graphviz. Vizant (2002-2006) is an Apache Ant task to create Graphviz DOT source code from an Ant buildfile, showing dependencies. gradle-visteg (2014-2021) is a Gradle plugin for exporting task execution graph as .dot file. gulp-graph (2015-2021) creates Gulp tasks that use Graphviz to generate a dependency graph. Bioinformatics and Cheminformatics Tools and Resources Using Graphviz Relational structures abound in the study of biological and chemical information. The following list barely scratches the surface.\nHasseManager (2014) for visualizing relations between chemical structures used in fragment-based drug discovery, as described in the Journal of Chemical Information and Modelling [Peter Lind] Science Online protein database visualization (click on Connections - free registration and SVG plugin required, may need beta for Mozilla FireFox) [American Association for the Advancement of Science (AAAS) and Stanford University Digital Libraries Project] Pubgene - Bioinformatic Solutions and Databases for Genomics, Proteomics, and Drug Discovery Document preparation with Graphviz Visustin flow chart generator [Aivosto] Mac OmniGraffle [Omni Group] wdot.rb, a tool that allows workflow diagrams and flowcharts to be easily created and updated. [Loh Siu Yin] GraphVizio (2010) is an addin for Visio to lay out diagrams using Graphviz (also see blog post). [Maurice Calvert] Social Networking and Collaborative Work Hammond Jazz Inventory - show graphical representation of musicians related by recordings in which the Hammond organ plays a significant role (orghammograms!) Third-Party Distributions RPM Find - many distros and architectures. Debian - Linux packages for several architectures. Gentoo - Linux packages. Fedora - rpms. SuSE - rpms for Novell/SuSE distributions for many architectures. Ubuntu - Linux packages. Arch Linux package ","categories":"","description":"","excerpt":"These are some representative external resources. The list includes …","ref":"/hugo/resources/","tags":"","title":"Resources"},{"body":"Interlisp has benefited by the contributions of many people over the years.\nThe Interlisp Medley Restoration Project has benefited from the contrition of many people, including:\nLarry Masinter Rob Kaplan Nick Briggs Frank Halasz Herb Jellinek Steve Kaisler Wayne Marci Paul McJones Bruce Mitchener John Cowan Arun Welch Michele Denber Blake McBride Abe Jellinek Bill Stumbo ","categories":"","description":"","excerpt":"Interlisp has benefited by the contributions of many people over the …","ref":"/hugo/credits/","tags":"","title":"Credits"},{"body":"If you cannot find the answer to your question here, ask it in the Graphviz forum.\nContributions FaqPSdefs PostScript defs for ISO-latin1 fonts (by Enrique Vidal) General Where can I see a list of all the attributes that control dot or neato? See Graph Attributes. There is also information on command-line usage and output formats.\nWhere can I discuss Graphviz? Post questions and comments in the Graphviz forum\nI’m trying to make a layout larger. How? There are various ways to increase the size of a layout. In doing this, one has to decide if the sizes of the nodes and text should be increased as well.\nOne approach is to adjust individual parameters such as fontsize, nodesep and ranksep. For example,\ndigraph G { graph [fontsize=24] edge [fontsize=24] node [fontsize=24] ranksep = 1.5 nodesep = .25 edge [style=\"setlinewidth(3)\"] a -\u003e b -\u003e c } Edit in Playground If you do this, make sure you are not fighting a conflicting graph size setting, like size=\"6,6\", which will then scale everything back down.\nIf you are using fdp or neato, increasing the edge len will tend to expand the layout.\ngraph G { layout=\"neato\" edge [len=3] a -- { b c d } } Edit in Playground For twopi and circo, there are other parameters such as ranksep which can be used. See the graph attributes.\nYou can also use the ratio attribute. If you set the size attribute to the desired drawing size, and then set ratio=fill, node positions are scaled separately in x and y until the drawing fills the specified size. Note that node sizes stay the same. If, instead, you set ratio=expand, the layout is uniformly scaled up in x and y until at least one dimension fits size.\nIf you specify the size attribute but end it with an exclamation mark (!), the final drawing will be scaled up uniformly in x and y until at least one dimension fits size. Note that everything is scaled up, including text and node sizes.\nIf you’re using PostScript, you can just scale up the output by manually adding a command such as 2 2 scale where the PostScript environment is set up. Make sure to adjust the BoundingBox too if your tools look at this header.\nHow can I join or merge certain edge routes in dot? You can try running dot -Gconcentrate=true or you can introduce your own virtual nodes drawn as tiny circles where you want to split or join edges:\ndigraph G { yourvirtualnode [shape=circle,width=.01,height=.01,label=\"\"] a -\u003e yourvirtualnode [arrowhead=none] yourvirtualnode -\u003e {b;c} } Edit in Playground How can I generate graph layouts in PDF? If your version of Graphviz has cairo/pango support, you can just use the -Tpdf flag. Unfortunately, this does not handle embedded links.\nIf you need embedded links, or don’t have cairo/pango, create PostScript output, then use an external converter from PostScript to PDF. For example, dot -Tps | epsf2pdf -o file.pdf. Note that URL tags are respected, to allow clickable PDF objects.\nIf your intention is to use the figure as PDF in some document preparation system, such as pdflatex, it is very important to use -Tps2 rather than -Tps. In general, if you really want PDF output, that is, you would like to have a -Tpdf flag, use -Tps2 before converting to PDF.\nIn the diagram below, the shaded nodes will contain bad output.\nHow can I make duplicate nodes? Make unique nodes with duplicate labels.\ndigraph G { node001 [label = \"A\"] node002 [label = \"A\"] node001 -\u003e node002 } Edit in Playground How can I set a graph or cluster label without its propagating to all sub-clusters? Set the label at the end of the graph (before the closing brace), after all its contents have been defined. (We admit it seems desirable to define some special syntax for non-inherited attribute settings.)\nHow can I draw multiple parallel edges in neato? When the splines attribute is false, which is the default, multiedges are drawn as a spindle of simply curved edges. There is no attempt to avoid intervening nodes.\nWhen splines=true or polyline, multiedges are drawn as roughly parallel splines or polylines. This relies on there being no node overlaps.\nAn additional trick which is sometimes sufficient is to specify multiple colors for the edge using a color list. This will a produce set of tightly parallel splines, each in its specified color. Read about the color attribute for more information.\nHow can I symmetrize (balance) tree layouts? When a tree node has an even number of children, it isn’t necessarily centered above the two middle ones. If you know the order of the children, a simple hack is to introduce new, invisible middle nodes to re-balance the layout. The connecting edges should also be invisible. For example:\ndigraph G { a -\u003e b0 xb [label=\"\",width=.1,style=invis] a -\u003e xb [style=invis] a -\u003e b1 {rank=same b0 -\u003e xb -\u003e b1 [style=invis]} b0 -\u003e c0 xc [label=\"\",width=.1,style=invis] b0 -\u003e xc [style=invis] b0 -\u003e c1 {rank=same c0 -\u003e xc -\u003e c1 [style=invis]} } Edit in Playground This trick really ought to be built into our solver (and made independent of the order of the children, and available for layouts other than trees, too).\nHow can I report a bug or issue I’ve found? You can report or view Graphviz bugs and issues by visiting the Graphviz Issues page.\nClusters How can I create edges between cluster boxes? This only works in Graphviz version 1.7 and higher. To make edges between clusters, first set the graph attribute compound=true. Then, you can specify a cluster by name as a logical head or tail to an edge. This will cause the edge joining the two nodes to be clipped to the exterior of the box around the given cluster.\nFor example,\ndigraph G { compound=true; nodesep=1.0; subgraph cluster_A { a -\u003e b; a -\u003e c; } subgraph cluster_B { d -\u003e e; f -\u003e e; } a -\u003e e [ ltail=cluster_A, lhead=cluster_B ]; } Edit in Playground has an edge going from cluster_A to cluster_B. If, instead, you say\na -\u003e e [ltail=cluster_A]; this gives you an edge from cluster_A to node e. Or you could just specify an lhead attribute. The program warns if a cluster specified as a logical node is not defined. Also, if a cluster is specified as a logical head for an edge, the real head must be contained in the cluster, and the real tail must not be. A similar check is done for logical tails. In these cases, the edge is drawn between the real nodes as usual.\nClusters are hard to see. Set bgcolor=grey (or some other color) in the cluster.\nOutput How can I get high quality (antialiased) output? The easiest thing is to use a vector-based output formats such as PDF, SVG or PostScript. In addition, if Graphviz has a cairo/pango backend, this will generate anti-aliased output.\nAnother approach is to make the layout in PostScript (option -Tps), then run through Ghostview with antialiasing enabled. The important command line options are:\n-dTextAlphaBits=4 -dGraphicsAlphaBits=4 (4 is the highest level of antialiasing allowed - see the Ghostview documentation). The full command line to render a raster could be something like:\n$ gs -q -dNOPAUSE -dBATCH -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -sDEVICE=png16m -sOutputFile=file.png file.ps On Mac OS X, the pixelglow port uses Apple’s Quartz renderer, which enables antialiasing. It also provides a beautiful document container for its user interface. (One downside is that you can’t run Pixelglow Graphviz as a web server or other background process if your Mac has 3D graphics, because Quartz wants to get this resource to accelerate rendering.)\nI can only get 11x17 output? It’s not us! It’s probably your printer setup. If you don’t believe this, run dot -Tps and look at the BoundingBox header. The coords are in 1/72ths of an inch.\nHow do I create special symbols and accents in labels? Insert the symbol directly (such as with copy/paste) into your dot source, and save as UTF-8, e.g.:\ngraph G { yen [label=\"¥\"] } Edit in Playground If you can’t save in UTF-8, try HTML entities, e.g. \u0026#165; for the Yen currency symbol ¥. Example:\ngraph G { yen [label=\"\u0026#165;\"] } Edit in Playground More generally, how do I use non-ASCII character sets? The following applies to Graphviz 2.8 and later. (In older versions of Graphviz, you can sometimes get away with simply putting Latin-1 or other UTF-8 characters in the input stream, but the results are not always correct.)\nInput: the general idea is to find the Unicode value for the glyph you want, and enter it within a text string \"...\" or HTML-like label \u003c...\u003e.\nFor example, the mathematical forall sign ∀ has the value 0x2200. There are several ways this can be inserted into a file. One is to write out the ASCII representation: \u0026#\u003cnnn\u003e; where \u003cnnn\u003e is the decimal representation of the value. The decimal value of 0x2200 is 8704, so the character can be specified as \u0026#8704; . Alternatively, Graphviz accepts UTF-8 encoded input. In the case of forall, its UTF-8 representation is 3 bytes whose decimal values are 226 136 128. For convenience, you would probably enter this using your favorite editor, tuned to your character set of choice. You can then use the iconv program to map the graph from your character set to UTF-8 or Latin-1.\nWe also accept the HTML symbolic names for Latin-1 characters as suggested in FaqSymbols. For example, the cent sign (unicode and Latin-1 value decimal 162) can be inserted as \u0026cent;\nNote that the graph file must always be a plain text document not a Word or other rich format file. Any characters not enclosed in \"...\" or \u003c...\u003e must be ordinary ASCII characters. In particular, all of the DOT keywords such as digraph or subgraph must be ASCII.\nBecause we cannot always guess the encoding, you should set the graph attribute charset to UTF-8, Latin1 (alias ISO-8859-1 or ISO-IR-100) or Big-5 for Traditional Chinese. This can be done in the graph file or on the command line. For example charset=Latin1.\nOutput: It is essential that a font which has the glyphs for your specified characters is available at final rendering time. The choice of this font depends on the target code generator. For the gd-based raster generators (PNG, GIF, etc.) you need a TrueType or Type-1 font file on the machine running the Graphviz program. If Graphviz is built with the fontconfig library, it will be used to find the specified font. Otherwise, Graphviz will look in various default directories for the font. The directories to be searched include those specified by the fontpath attribute, related environment or shell variables (see the fontpath entry), and known system font directories. The table points out that these glyphs are from the times.ttf font. With fontconfig, it’s hard to specify this font. Times usually gets resolved to Adobe Type1 times, which doesn’t have all the glyphs seen on that page.)\nFor PostScript, the input must be either the ASCII subset of UTF-8 or Latin-1. (We have looked for more general solutions, but it appears that UTF-8 and Unicode are handled differently for every kind of font type in PostScript, and we don’t have time to hack this case-by-case.\nFor SVG output, we just pass the raw UTF-8 (or other encoding) straight through to the generated code.\nHow can I create custom shapes? One approach is to use HTML-like labels possibly combined with embedded images use the IMG attribute.\nAs alluded to in the dot user’s guide, if you want truly custom shape, there are several ways to incorporate this. At this point, they either must be in PostScript or image files, or you’ll need to modify the source code. A serious problem is that you can’t make custom shapes that work across all the drivers and the interactive front-ends such as Grappa. At least SVG has interactive renderers, and PostScript can be translated to PDF which also has some interactive features.\nExternal image files\nIf using SVG (-Tsvg), PostScript (-Tps,-Tps2) or one of the raster formats (-Tgif, -Tpng, or -Tjpg), you can load certain images (e.g., pictures) by file name into nodes. For example:\nyournode [image=\"yourface.gif\"]; indicates the contents of the node are given in the GIF file yourface.gif. The image attribute specifies which file to use. (There is also the deprecated shapefile attribute. This is similar to image but the node shape will always be a box.)\nNOTE: In versions before 11 March 2006, in particular, 1.12 graphviz and earlier, it is necessary to also set the attribute shape=custom.\nWith -Tsvg, image must give the name of a file containing a GIF, PNG or JPEG bitmap file. Note that the file’s contents are not copied into the SVG output, only the files name. Thus, for Graphviz SVG output to display correctly, the image file must be available to the SVG viewer.\nWith PostScript, image must give the name of a file containing encapsulated PostScript or a bitmap. The contents are copied into the output file. Note that encapsulated PostScript will only be copied in once. The restrictions on the contents of the image are the same as those specified below under External PostScript files.\nFor bitmap output, image is a file name containing a bitmap image. The file is opened and copied (and possibly scaled) into the output drawing.\nThis code is still preliminary, and we have noted some problems with color quantization in indexed color map management that we are trying to understand and correct. (You can use -Gtruecolor=1 to try a 32 bit internal canvas as an alternative, but we have observed fuzziness (lossiness?) in the images.)\nWhen the software is used as a web server, access to image files is more restrictive. See GV_FILE_PATH and SERVER_NAME.\nExternal PostScript files\nIf using the PostScript driver (-Tps) you can import node shapes as external PostScript files such as EPS (Encapsulated PostScript). At a minimum, the external file must have a valid BoundingBox header and not do drastic things to the graphics state since we don’t install a wrapper for example to inhibit showpage.\nTo import an external PostScript file, set the shape and shapefile attributes as shown here:\nsomenode [shape=epsf, shapefile=\"yourfile.ps\" ]; An EPSF shape is always clipped to its bounding box.\nThe use of [shape=epsf, shapefile=\"yourfile.ps\" ] is largely superseded by the mechanism described in the previous section, using [image=\"yourfile.ps\" ].\nExternal PostScript procedures\nIf using the PostScript driver (dot -Tps), you can define a PostScript procedure for shape drawing. The procedure must be able to draw variable-sized shapes. A file containing the definition can be loaded as a command line argument using the -l flag:\n$ dot -Tps -l yourPS.ps file.dot -o file.ps In the graph file, invoke the shape like this:\nsomenode [shape=yourshape] In file.ps, for non-filled nodes, the procedure for yourshape will be called like this:\n[ 54 36 0 36 0 0 54 0 54 36 ] 4 false yourshape where the current color is the node’s pencolor. The array contains the shape’s bounding polygon, with the first point repeated at the end, followed by the number of points. At present, the shape is always a rectangle. From left to right, the points in the array always go counterclockwise, starting with the upper-right vertex. The boolean value after the number of vertices, here false, is the value of the node’s fill attribute. The coordinates are absolute canvas coordinates.\nFor nodes with fill=true, the above invocation of yourshape will be preceded by\n[ 54 36 0 36 0 0 54 0 54 36 ] 4 true yourshape where the current color is the node’s fillcolor.\nNOTE: In versions before 23 September 2005, yourshape is only invoked once, with the node’s fill value and with the color set to the node’s pencolor.\nFor example, here are the contents of a plausible shape file, DFD.ps, which can be invoked by [shape=DFDbox]\n/xdef {exch def} bind def /DFDbox { 10 dict begin /fflag xdef /sides xdef fflag % if shape is filled { aload pop newpath moveto 1 1 sides { pop lineto } for closepath fill } { aload pop % draw the sides newpath moveto 1 1 sides { 2 mod 0 ne {moveto} % even sides {lineto currentpoint stroke moveto} % odd sides ifelse } for } ifelse end } bind def A custom shape of this kind is always clipped to its bounding box. It would not be hard to create a hook in the function user_shape() in shapes.c to determine clipping polygons other than rectangles (maybe) in case someone wants to try this and contribute the code for this.\nNote that, by default, the bounding box is drawn around the contents and the node label is drawn. If you wish to eliminate these, set label=\"\" and peripheries=0 in the node.\nDriver-independent custom shapes\nIf not using PostScript, you’ll need to roll up your sleeves and modify the source. None of the other code generators support custom node shapes directly. If the custom shape is to be high-level and driver-independent, then you can add shape-specific functions (methods) to shapes.c with a corresponding entry in the array Shapes[] that maps shape names to methods. The method interfaces are described in the comment header in this file. Methods must be defined to initialize a shape (typically to size it big enough to fit its text label), bind a port name to a coordinate, test if a point is inside an instance of the shape (for edge clipping), generate code for the shape via the functions provided in the gvrender_engine_t structure, and return a box path to reach ports on the interior of a node (if they can exist).\nMore information on the functions available via gvrender_engine_t and the Graphviz graphics model can be found in Section 5 of the Graphviz library manual.\nShapes that behave more or less like polygons can be bootstrapped from the basic polygon methods; see for example the invtri or tab shape. Such shapes use a polygon descriptor whose fields are listed below.\nField name Description Default regular if a regular polygon FALSE peripheries number of border peripheries 1 sides number of sides (1 for curves) 4 orientation angular rotation in degrees 0 distortion trapezoidal distortion 0 skew parallelogram distortion 0 option fancy options: ROUNDED, DIAGONALS, AUXLABELS 0 For shapes not derived from general polygons, see the record or epsf shape.\nDriver-dependent custom shapes\nTo implement a driver-specific shape (such as GIF or PNG icons) you’ll need to write a body for the driver function that implements user-defined shapes. This involves providing the library_shape function for the specific driver, if it does not already exist, and generating the graphics operations needed to display your shape using the driver’s graphics functions. (The drivers supplied with Graphviz can be found in the plugins directory.)\nA user shape function basically receives four arguments:\nthe custom shape name string the absolute canvas coords of the shape bounding polygon number of coords (currently, always 4) fill flag The rest is up to you, but contact us first just in case.\nHow can I use drawing layers (overlays)? If the layers graph attribute is set, the graph is printed in a sequence of colored layers, or overlays. (This coloring overrides any other settings.) layers defines a list of layer names, each separated by a sequence of separator characters. The tokens can be any identifier or natural number, except the reserved word all. By default, the separator characters are colon, space and tab, though this can be overridden using the layersep graph attribute.\nThe layer attribute of a node, edge or cluster enables its appearance in given layers. Its value denotes a list of layers from the layers graph attribute. It is specified by a list of layer intervals, separated by a sequence of characters from the layerlistsep attribute. Each layer interval is written as a single layer name or two layer names separated by a sequence of separator characters from the layersep attribute. The keyword all means all possible layers. If all is used as part of a range, the range denotes all layers bounded on one side by the other token. Thus, the layer pvt:all of the edge node2 -\u003e node3 in the example below corresponds to the layers pvt, test, new, and ofc. The all:pvt,new,ofc corresponds to the layers local, pvt, new, and ofc.\nAs an example, the graph:\ndigraph G { layers=\"local:pvt:test:new:ofc\"; node1 [layer=\"pvt\"]; node2 [layer=\"all\"]; node3 [layer=\"pvt:ofc\"];\t/* pvt, test, new, and ofc */ node2 -\u003e node3 [layer=\"pvt:all\"];\t/* same as pvt:ofc */ node2 -\u003e node4 [layer=3];\t/* same as test */ } Edit in Playground produces the 5 layers shown below:\nLayer 1 Layer 2 Layer 3 Layer 4 Layer 5 In a layered graph, if a given node (or edge) does not have a layer assignment, but incident edges (nodes, resp.) do, its layer specification is inferred from these. For example, in the examples above, node4 only appears on layer 3, because a layer assignment was given for its connecting edge. Note, however, that if a node or edge without a layer attribute is incident with an edge or node without a layer attribute (or such a node has no edges), then the node or edge appears on all layers.\nTo change the default so that nodes and edges with no layer attribute appear on all layers, insert\nnode [layer=all]; edge [layer=all]; at the beginning of the graph file.\nThe graph can have a layerselect attribute, which specifies which layers should be emitted. The value uses the same concrete syntax as the layer attribute.\nAt present, the output of multiple layers into a single output file is only available in PostScript. However, the layerselect attribute can be used to select a single layer for output in any format.\nThe color sequence for layers is set in the array layercolorseq (in PostScript at least). The first index is 1 and each element is a three-element color coordinate array. Custom layer colors can be created by setting the value of this array.\nTODO\nsimply change default colors per layer, thus allowing user override on individual nodes or edges when desired. turn off layer coloring entirely and just use the colors inherent in the drawing. forcing nodes/edges in a given subgraph to take certain attributes. Might require a hook in the libgraph parser. It would be pretty easy to support the semantics: for every node/edge in this subgraph, assign it the default attributes that differ from the defaults of the parent of this graph. What you need to avoid is the problem exposed in the following example: subgraph sub0 { node [color=red]; a; b; c; } subgraph sub1 { node [shape=diamond]; a; b; c; } We don’t want to reset a,b,c to color=black just because that is default in sub1.\nHow do I get font and color changes in record labels or other labels? This is not possible in record shapes. However, you can do this using HTML-like labels.\nIn -Tplain format, splines do not touch the nodes (arrowheads are missing). Edges are specified as the main spline and, if necessary, arrowheads which actually abut the node. If the arrowheads are not given, drawing the edge spline will leave a gap between the edge and the node. This is a bug which has now solidified into a feature. A workaround is to set edge [dir=none]. Since the edges have no arrowheads, the spline specification will go all the way to both nodes.\nRecord nodes are drawn differently in dot and neato when rankdir=LR. It’s true. dot -Grankdir=LR rotates record nodes so that their top level fields are still listed across levels. rankdir=LR has no effect in neato. One workaround is to use HTML-like labels (they don’t rotate; the downside is that you have to write in XML). In general, we recommend replacing record nodes with the much more general HTML-like labels. Another workaround is to enclose record labels in { } to rotate/unrotate the record contents. See also, How To Avoid Foolish Consistency by Scott Berkun (Microsoft Corp.)\nHow can I print a big graph on multiple pages? The page attribute, if set, tells Graphviz to print the graph as an array of pages of the given size. Thus, the graph\ndigraph G { page=\"8.5,11\"; ... } will be emitted as 8.5 by 11 inch pages. When printed, the pages can be tiled to make a drawing of the entire graph. At present, the feature only works with PostScript output.\nAlternatively, there are various tools and viewers which will take a large picture and allow you to extract page-size pieces, which can then be printed. See also the viewport attribute.\nWhen I have a red edge it shows up as a solid red in PNG and GIF formats, but has a black border when rendered to JPEG. This is an artifact of JPEG’s lossy compression algorithm. JPEG isn’t very good for line drawings. Consider using PNG.\nSometimes in dotty, right mouse click shows the global menu but none of the items can be selected. Check that the NUMLOCK key is off. It’s a known bug.\nWhy does dotty report a syntax error on a legal dot file? The dotty tool is deprecated, but this entry is retained to aid anyone still using it.\nTypically this error is reported as:\n\u003e\u003e graph parser: syntax error near line 14 \u003e\u003e context: \u003e\u003e\u003e \u003c\u003c\u003c digraph G { \u003e\u003e dotty.lefty: giving up on dot \u003e\u003e dotty.lefty: graph that causes dot \u003e\u003e dotty.lefty: to fail has been saved in file dottybug.dot Probably there is a command in your shell environment (such as .alias or .profile) that does output even for non-interactive shells. When this occurs, those characters go in the pipe to the dot parser and cause this problem. An easy check is whether other users have the same problem.\nHow can I get rid of the little circles on edges (“edge handles”) in dotty? The dotty tool is deprecated, but this entry is retained to aid anyone still using it.\nEdit the file dotty.lefty and change the line that says: ’edgehandles’ = 1; to ’edgehandles’ = 0; it’s around line 110.\nI already have all the coordinates for the nodes and edges of my graph and just want to use dot, neato, or dotty to render it. How? Put the graph with layout attributes into a dot file. Then run neato -n2. For example:\n$ neato -n2 -Tgif file.dot -o file.gif Note that if an edge does not have a pos attribute defined, neato will perform whatever edge routing it would normally do. All of the usual backend attributes (size, overlap, page, etc.) are available.\nI already have all the coordinates for the nodes, and I want dot or neato to route the edges. Run neato -n. This will add the necessary edge information.\nI already have all the coordinates for the nodes and edges of my graph and just want to use dotty to render it. How? If you want to do a layout first, use -Txdot for the output format. Dotty uses the layout information provided there.\nSame as above, but I have only node coords, not edges. Run neato -Txdot -n. This will add the necessary edge information.\nHow can I make client-side image maps? Use the -Tcmapx command line option. See here for more details.\nWhy aren’t my server-side maps being recognized? I’ve checked the HTML! Make sure that your server has map files enabled. For example, if running apache, check that httpd.conf has a line like the following:\nAddHandler imap-file map and that it is not commented out!\nI’ve installed Debian Graphviz and it works fine on the command line, but when I execute a Perl/CGI script through Apache, no output is generated. For example, the code system(\"/usr/local/bin/dot -Tpng /tmp/tree.dot -o /tmp/tree.png\"); produces no file /tmp/tree.png.\nAs best as we can tell, dot dies with no stdout or stderr messages on Debian systems when run from an Apache cgi program with no HOME set. The workaround is to provide a HOME directory in the Apache userid’s environment.\nSomeone has also suggested using the Perl module for Graphviz.\nGreg Brauer from Dreamworks pointed out a different possibility: The problem turned out to be that I was not closing the file descriptor on my temporary dot file before running dot. Graphviz would end up getting a newly-created empty file with nothing in it before the write buffer to the file was flushed. Dot would happily run on that and generate an empty output file without any warnings.\nHow can I get 3D output? The Graphviz authors have qualms about the gratuitous use of 3D.\nNonetheless, dot -Tvrml generates VRML files. There’s no Z coordinate layout - you specify Z coords yourself in the z attribute of nodes, and the Z coordinates of edges are interpolated. If someone contributes a driver for a newer, more useful format (OpenGL Performer scene graphs? Open Scene Graphs? Java3D programs?) we’d like to try it.\nneato internally supports layouts in higher dimensions through the dim and dimen attributes, e.g. neato -Gdim=7. Graphviz output handles 2D and 3D, but there’s no way to get higher-dimensional output unless you invoke neato as a library and inspect ND_pos(n)[i] where n is a pointer to the relevant node.\nProblems How can I avoid node overlaps in neato? Use the graph attribute overlap.\nHow can I avoid node-edge overlaps in neato? Use the overlap attribute to leave room among the nodes, then use -Gsplines=true.\n$ neato -Goverlap=... -Gsplines=true -Gsep=.1 The sep argument is the node-edge separation as a ratio of a node’s bounding box. That is, sep=.1 means each node is treated as though it is 1.1 times larger than it is. The actual value may require some tinkering. (Don’t ask why this isn’t just a constant!) Note that this option really slows down neato, so should be used sparingly and only with modest-sized graphs.\ncause a crash? This usually happens when the Graphviz library is built using one version of the stdio library, and the user’s program is compiled using another. If the FILE structure of stdio is different, the call to agread() will cause a crash. This is mainly a problem on Windows where we just provide a binary release built with one version of Visual Studio and stdio changes depending on the version of Visual Studio. It can also occur if the user tries to use cygwin or something similar which may also use an incompatible stdio.\nThe simplest solution is to read in the entire graph into memory, and pass a pointer to that memory to agmemread().\nIf that is not possible (e.g., the file is too large), you need to tell agread() to use a reader compatible with the stream you give it. By default, agread assumes you are passing it a FILE* generated by the version of stdio that was used to compile Graphviz, and uses that version of fgets to read the stream. To pass in your own reader, use the third argument:\nAgdisc_t mydisc; Agodisc_t myiodisc; mydisc.mem = NULL; // use system default mydisc.id = NULL; // use system default mydisc.io = \u0026myiodisc; myiodisc.afread = reader; myiodisc.putstr = NULL; // only need to set if calling gvRender() myiodisc.flush = NULL; // only need to set if calling gvRender() The reader function has type\nint (*reader) (void *chan, char *buf, int bufsize); and should act like the read() system call. That is, it reads from the stream chan, storing the bytes in buf, whose size is bufsize, and returns the number of bytes it read.\nFor Unix-like stdio, one might use\nstatic int reader(void *chan, char *buf, int bufsize) { return fread(buf, 1, bufsize, (FILE*)chan); } Then, to read the graph, use:\nFILE* fp = fopen (\"mygraph.gv\",\"r\"); Agraph_t* g = agread (fp, \u0026mydisc); Neato runs forever on a certain example. First, how big is your graph? Neato is a quadratic algorithm, roughly equivalent to statistical multidimensional scaling. If you feed it a graph with thousands of nodes and edges, it can easily take hours or days. The first thing to check is to run neato -v to get a trace of the output. If the numbers you see are generally getting smaller, the layout is just taking a long time. You can set certain parameters, such as epsilon or maxiter to shorten the layout time, at the expense of layout quality. But if your graph is big, who’s going to notice?\nAlternatively, use sfdp to layout the graph (though at present, sfdp does not honor edge lengths).\nIf you use mode=KK with neato or an early version, it is possible the optimization may cycle. If you see the numbers repeating, or fluctuating up and down, then neato is cycling, especially if your graph is small. This should never happen by default for versions later than 1.13. If it does, please report it as a bug.\nIf you are using an earlier version of neato, or you used mode=KK, cycling is indeed possible. This cycling is very sensitive to the initial layout. By using the start attribute, for example,\n$ neato -Gstart=3 $ neato -Gstart=rand the cycling will most likely disappear. Or you can employ the parameters used for large graphs to stop the layout earlier:\n$ neato -Gepsilon=.01 $ neato -Gmaxiter=500 Note that, if you have a large graph, the generation of edges as splines is a cubic algorithm, so you would do well to avoid using splines=true. (This comment applies to circo, fdp and twopi as well.)\nEdge label placement in dot is bad, or the layout is very convoluted. By default, edge labels in dot are modeled as dummy nodes. This guarantees adequate space for the labels, but for complicated graphs, this can dramatically distort the layout. In this case, it might be worthwhile to replace edge labels with xlabels. In this case, the graph is laid out as if there are no edge labels, with the labels added after the edges have been routed. This can prevent a contorted drawing at the expense of possibly have edge labels overlapping.\nDot runs forever on a certain example. Try dot -v to observe its progress.\nNote that it’s possible to make graphs whose layout or even parsing is quadratic in the input size. For example, in dot,\ndigraph G { a -\u003e b -\u003e c -\u003e .... -\u003e x -\u003e y -\u003e z a -\u003e z b -\u003e z c -\u003e z /* and so on... */ x -\u003e z } The total edge length (therefore the layout time) of this as a ranked graph is quadratic in the number of nodes. You probably won’t encounter the following, but it is also possible to construct graphs whose parsing takes quadratic time in the number of attributes, by appending attributes to nodes and edges after the graph has been loaded. For example:\ndigraph G { /* really big graph goes here...with N+1 nodes */ n0 -\u003e n1 -\u003e ... -\u003e nN; n0 [attr0=\"whatever\", attr1=\"something else\", /* and so on with many more attributes */ attrM=\"something again\"] } When an attribute first appears, each object is visited with possible cost proportional to the number of previously declared attributes. Thus, the running time for the above would be cN*O(M) for some constant c. If there is any concern about this, the graph should specify the attributes first before declaring nodes or edges. In practice, this problem is negligible.\nTwopi runs forever on a certain example. If your graph is large (many thousands of edges), and you set splines=true, it takes a lot of cycles to fit all those splines!\nNeato has unnecessary edge crossings, or has missed an obvious chance to make a much nicer layout. Neato and all similar virtual physical model algorithms rely on heuristic solutions of optimization problems. The better the solution, the longer it takes to find. Unfortunately, it is also possible for these heuristics to get stuck in local minima. Also, it is heavily influenced by the initial position of the nodes. It is quite possible that if you run neato again, but with a different random seed value, or more iterations, you’ll get a better layout. For example:\n$ neato -Gstart=5 file.dot -Tps -o file.ps $ neato -Gepsilon=.0000001 file.dot -Tps -o file.ps In the default stress majorization mode of neato, using -Gstart=self can help produce a better initial layout.\nNote that there are no guarantees that neato will produce a planar layout of a planar graph, or expose all or most of a graph’s symmetries.\nWebdot doesn’t work. We assume you’re using Apache and have TCL installed. If you don’t, it’s probably better to just use the webdot perl script.\nTo debug webdot, first test whether tclsh can load the Tcldot shared library. Try:\n$ tclsh % load $prefix/lib/graphviz/tcl/libtcldot.so.0 % where $prefix is the installation prefix for graphviz; usually /usr or /usr/local.\nThen test whether webdot runs from a shell command. (With webdot we provide a helper script scaffold.tcl or scaffold.sh that sets up an environment like the one Apache provides.) For example\n$ scaffold.tcl \u003eout.gif can't read \"LIBTCLDOT\": no such variable while executing \"file mtime $LIBTCLDOT\" invoked from within \"set t1 [file mtime $LIBTCLDOT]\" (file \"cgi-bin/webdot\" line 67) invoked from within \"source cgi-bin/webdot \" (file \"scaffold.tcl\" line 22) The above is a strong clue that webdot is not configured properly.\nFinally, test whether webdot runs as a cgi-bin program. It may help to examine the cgi-bin environment using a simple cgi-bin tcl script like:\n#!/bin/env tclsh puts \"Content-type: text/plain\" puts \"\" foreach e [lsort [array names env]] {puts \"$e: $env($e)\"} Save this script as …/cgi-bin/test.tcl, make it executable, then look at: http://localhost/cgi-bin/test.tcl\nAlso, if you see something like:\nWebDot Error: Response Code = 403 This usually means that webdot ran successfully, but was not able to fetch the remote graph from the URL you gave as an argument. The reason is probably that your server is behind a firewall that blocks the webdot server, so it cannot get the graph file. You can either change firewall permissions, put the graph on a different server, or install webdot locally so you don’t need a remote server to fetch your graph data.\nIt would be nice if someone hacked webdot to take the contents of a graph as a cgi-bin argument, so it wouldn’t need permission to fetch a graph remotely. This is left as an exercise for the Open Source Community.\nI have “Font not found” errors, or text labels missing in webdot. Firstly, recent versions of graphviz will use fontconfig if it is available on your platform. With fontconfig, this error should not occur, so you may want to see if an upgrade to graphviz is available, or if a rebuild will add fontconfig support.\nIf fontconfig is not available then graphviz tries to resolve fontnames to fontpaths itself, and uses DOTFONTPATH (or GDFONTPATH) to indicate where it should look.\nFor copyright reasons, Graphviz doesn’t come with its own fonts. On a Windows machine, it knows to search in C:\\Windows\\Fonts. On a Unix machine, you need to set up a directory that contains Truetype fonts. You can get a copy of some fonts here.\nThe default DOTFONTPATH is:\n#define DEFAULT_FONTPATH \"/usr/X11R6/lib/X11/fonts/TrueType:/usr/X11R6/lib/X11/fonts/truetype:/usr/X11R6/lib/X11/fonts/TTF:/usr/share/fonts/TrueType:/usr/share/fonts/truetype:/usr/openwin/lib/X11/fonts/TrueType:/usr/X11R6/lib/X11/fonts/Type1\" If your fonts are somewhere else, then you must set that directory in the webdot script, or recompile Graphviz with the correct DEFAULT_FONTPATH (or set fontpath=\"/your/font/directory\" in every graph you lay out, but that’s pretty clumsy.)\nYou can also try to comment the line #set SIGNATURE \"Graph by WebDot\" in /var/www/cgi-bin/webdot.\nWhat is the coordinate transformation between the graph bb and a .png image? The bb is expanded by 4 graph-units in all directions (pad) to allow for finite line widths. Then it is zoomed and/or rotated according to -Gviewport, -Gsize, -Glandscape, -Gorientation options. At the default scaling of 1:1, one graph unit = 1 point (1/72 inch). Then it is paginated, if requested by -Gpage and if the output format supports it. Not the -Tpng renderer, yet. Then a margin is added, -Gmargin, in absolute units (inches). The top/bottom margin can be set independently of the left/right margin. Then it is converted to device units, according to -Gdpi, or a dpi value that is given by the output device, or a default that is provided by each render. There are separate dpi values for x and y to allow for non-square pixels. Some renderers invert the Y axis and need an offset to place the origin in the top left corner. The default dpi for -Tpng is 96dpi (approximating the resolution of most computer monitors) so this is where the scaling by 96/72 (4/3) comes from. At the renderer api, plugins have a choice of coordinate representation:\ncoordinates in graph-units, and composite transformation data consisting of: scaling, rotation, and translation. (used by svg, cairo, ps, renderers) coordinates pre-transformed into device units. ","categories":"","description":"","excerpt":"If you cannot find the answer to your question here, ask it in the …","ref":"/hugo/faq/","tags":"","title":"FAQ"},{"body":"Please join the Interlisp forum to ask questions and discuss Interlisp.\nIf you have a bug or believe something is not working as expected, please submit a bug report using the issues section in GitHub.\nIf you have a general question or are unsure how things work, please consider posting to the Interlisp forum.\n","categories":"","description":"","excerpt":"Please join the Interlisp forum to ask questions and discuss …","ref":"/hugo/contact/","tags":"","title":"Contact"},{"body":"The Medley Interlisp Restoration team meets weekly via Zoom. If you’re interested in contributing please join us:\nMonday, 1:00 pm ET / 10:00 am PT\nZoom ID: 408 332 4290\n","categories":"","description":"","excerpt":"The Medley Interlisp Restoration team meets weekly via Zoom. If you’re …","ref":"/hugo/getinvolved/","tags":"","title":"Get Involved"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/index.html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_box.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_crow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_curve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_diamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_dot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_ediamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_empty.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_forward.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_halfopen.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_icurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_inv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_invdot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_invempty.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_invodot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_lteeoldiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_nohead.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_none.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_normal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_obox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_odiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_odot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_open.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/a_tee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_box.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_crow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_curve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_diamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_dot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_icurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_inv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_lbox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_lcrow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_lcurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_ldiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_licurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_linv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_lnormal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_ltee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_lvee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_none.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_normal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_obox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_odiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_odot.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_oinv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_olbox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_oldiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_olinv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_olnormal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_onormal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_orbox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_ordiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_orinv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_ornormal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rbox.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rcrow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rcurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rdiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_ricurve.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rinv.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rnormal.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rtee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_rvee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_tee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/aa_vee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/arrows.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/assembly.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/attrs.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/back.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/both.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/box.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/box3d.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_bold.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_dashed.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_dotted.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_filled.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_rounded.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_solid.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/c_striped.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/cds.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/circle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/colorlist.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/colors.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/command.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/component.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/constraint.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/cylinder.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/diamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/doublecircle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/doubleoctagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/e_bold.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/e_dashed.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/e_dotted.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/e_solid.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/egg.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/ellipse.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/fill.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/fivepoverhang.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/fixed.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/folder.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/forward.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin0.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin180.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin270.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin360.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin45.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_lin90.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad0.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad180.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad270.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad360.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad45.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_rad90.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin0.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin180.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin270.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin360.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin45.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/g_wlin90.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/hexagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/house.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html1.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html2.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html2.gv.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html3.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html3.gv.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html4.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/html4.gv.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/insulator.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/invhouse.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/invtrapezium.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/invtriangle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/lang.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/larrow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/lpromoter.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/Makefile.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/Mcircle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/Mdiamond.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/mrecord.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/Msquare.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_bold.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_dashed.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_diagonals.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_dotted.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_filled.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_rounded.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_solid.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_striped.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/n_wedged.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/nohead.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/none.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/none_back.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/none_both.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/none_forward.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/none_none.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/normal_back.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/normal_both.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/normal_forward.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/normal_none.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/note.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/noverhang.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/octagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/output.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/oval.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/parallelogram.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/pentagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/plain.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/plaintext.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/plugins.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/point.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/polygon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/primersite.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/promoter.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/proteasesite.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/proteinstab.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/rarrow.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/record.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/record2.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/rect.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/rectangle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/restrictionsite.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/ribosite.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/rnastab.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/round.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/rpromoter.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/sdlshapes.jpg.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/sdlshapes.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/septagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/shapes.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/signature.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_curved.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_line.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_none.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_ortho.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_polyline.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/spline_spline.png.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/square.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/star.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/tab.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/tee.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/terminator.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/threepoverhang.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/trapezium.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/triangle.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/tripleoctagon.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/underline.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/info/utr.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/doc/schema/attributes.xml.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/DGKN97.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/EGKNW03.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GH10.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GHK09.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GK06.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GKN04.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GKN04a.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GN98.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/GN99.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/Hu05.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/NW01.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Documentation/TSE93.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/dot_from_pl.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/gprof2dot.awk.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/pl_from_gprof.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/ru_translation.rtf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/misc/spline-o-matic/index.html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/spline-o-matic/splino.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/spline-o-matic/splino.tgz.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/misc/sql2dot/index.html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/sql2dot/sql2dot.jar.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/webdot.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/Misc/webdot_cgi.txt.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/acyclic.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/bcomps.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/ccomps.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/cdt.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/cgraph.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/cgraph.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/cluster.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/diffimg.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/dijkstra.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/dot.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/dotguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/dotty.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/dottyguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/edgepaint.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gc.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gdtclft.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gml2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/graphml2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3guile.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3java.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3perl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3php.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3python.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3ruby.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gv.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvc.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvcolor.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvedit.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvgen.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvmap.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvpack.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gvpr.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/gxl2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/lefty.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/leftyguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/libguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/lneato.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/mingle.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/mm2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/neatoguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/nop.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/oldlibguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/osage.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/pack.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/patchwork.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/pathplan.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/sccmap.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/smyrna.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/tcldot.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/tkspline.3tk.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/tred.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/unflatten.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/vimdot.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/_pages/pdf/xdot.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/Misc/gprof2dot.awk.html","tags":"","title":""},{"body":"A string in the xdot format specifying an arbitrary background.\nDuring rendering, the canvas is first filled as described in the bgcolor attribute.\nThen, if _background is defined, the graphics operations described in the string are performed on the canvas.\n","categories":"","description":"","excerpt":"A string in the xdot format specifying an arbitrary background.\nDuring …","ref":"/hugo/docs/attrs/background/","tags":"","title":"_background"},{"body":"A double with an optional prefix '+'.\n","categories":"","description":"","excerpt":"A double with an optional prefix '+'.\n","ref":"/hugo/docs/attr-types/adddouble/","tags":"","title":"addDouble"},{"body":"A point with an optional prefix '+'.\n","categories":"","description":"","excerpt":"A point with an optional prefix '+'.\n","ref":"/hugo/docs/attr-types/addpoint/","tags":"","title":"addPoint"},{"body":"Indicates the preferred area for a node or empty cluster when laid out by patchwork.\nExample: Australian Coins, area proportional to value graph { layout=\"patchwork\" node [style=filled] \"5c\" [area= 5 fillcolor=silver] \"10c\" [area= 10 fillcolor=silver] \"20c\" [area= 20 fillcolor=silver] \"50c\" [area= 50 fillcolor=silver] \"$1\" [area=100 fillcolor=gold] \"$2\" [area=200 fillcolor=gold] } Edit in Playground ","categories":"","description":"","excerpt":"Indicates the preferred area for a node or empty cluster when laid out …","ref":"/hugo/docs/attrs/area/","tags":"","title":"area"},{"body":"Style of arrowhead on the head node of an edge. This will only appear if the dir attribute is forward or both.\nSee the limitation.\nSee also:\narrowtail ","categories":"","description":"","excerpt":"Style of arrowhead on the head node of an edge. This will only appear …","ref":"/hugo/docs/attrs/arrowhead/","tags":"","title":"arrowhead"},{"body":"Multiplicative scale factor for arrowheads.\nExample digraph { quiver -\u003e \"0.5\" [arrowsize=0.5] quiver -\u003e \"1\" quiver -\u003e \"2\" [arrowsize=2] quiver -\u003e \"3\" [arrowsize=3] } Edit in Playground ","categories":"","description":"","excerpt":"Multiplicative scale factor for arrowheads.\nExample digraph { quiver …","ref":"/hugo/docs/attrs/arrowsize/","tags":"","title":"arrowsize"},{"body":"Style of arrowhead on the tail node of an edge. This will only appear if the dir attribute is back or both.\nSee the limitation.\nSee also:\narrowhead ","categories":"","description":"","excerpt":"Style of arrowhead on the tail node of an edge. This will only appear …","ref":"/hugo/docs/attrs/arrowtail/","tags":"","title":"arrowtail"},{"body":" normal inv dot invdot odot invodot none tee empty invempty diamond odiamond ediamond crow box obox open halfopen vee The examples above show a set of commonly used arrow shapes. There is a grammar of arrow shapes which can be used to describe a collection of 3,111,696 arrow combinations of the 42 variations of the primitive set of 11 arrows.\nThe basic arrows shown above contain:\nmost of the primitive shapes (box, crow, diamond, dot, inv, none, normal, tee, vee) shapes that can be derived from the grammar (odot, invdot, invodot, obox, odiamond) shapes supported as special cases for backward-compatibility (ediamond, open, halfopen, empty, invempty). ","categories":"","description":"","excerpt":" normal inv dot invdot odot invodot none tee empty invempty diamond …","ref":"/hugo/docs/attr-types/arrowtype/","tags":"","title":"arrowType"},{"body":"Bounding box of drawing in points.\n","categories":"","description":"","excerpt":"Bounding box of drawing in points.\n","ref":"/hugo/docs/attrs/bb/","tags":"","title":"bb"},{"body":"When attached to the root graph, this color is used as the background for entire canvas.\nWhen a cluster attribute, it is used as the initial background for the cluster. If a cluster has a filled style, the cluster’s fillcolor will overlay the background color.\nIf the value is a colorList, a gradient fill is used. By default, this is a linear fill; setting style=radial will cause a radial fill. Only two colors are used. If the second color (after a colon) is missing, the default color is used for it. See also the gradientangle attribute for setting the gradient angle.\nFor certain output formats, such as PostScript, no fill is done for the root graph unless bgcolor is explicitly set.\nFor bitmap formats, however, the bits need to be initialized to something, so the canvas is filled with white by default. This means that if the bitmap output is included in some other document, all of the bits within the bitmap’s bounding box will be set, overwriting whatever color or graphics were already on the page. If this effect is not desired, and you only want to set bits explicitly assigned in drawing the graph, set bgcolor=\"transparent\".\nExample graph { bgcolor=\"lightblue\" label=\"Home\" subgraph cluster_ground_floor { bgcolor=\"lightgreen\" label=\"Ground Floor\" Lounge Kitchen } subgraph cluster_top_floor { bgcolor=\"lightyellow\" label=\"Top Floor\" Bedroom Bathroom } } Edit in Playground ","categories":"","description":"","excerpt":"When attached to the root graph, this color is used as the background …","ref":"/hugo/docs/attrs/bgcolor/","tags":"","title":"bgcolor"},{"body":"Outputs images in the Windows BMP format.\n","categories":"","description":"Windows Bitmap","excerpt":"Windows Bitmap","ref":"/hugo/docs/outputs/bmp/","tags":"","title":"BMP"},{"body":"Boolean; true or false.\n","categories":"","description":"","excerpt":"Boolean; true or false.\n","ref":"/hugo/docs/attr-types/bool/","tags":"","title":"bool"},{"body":"Medley Interlisp is open-source and may be obtained from GitHub. It is portable to many different Linux and Apple MacOS systems, as well as Windows using WSL2.\nThe core is written in portable C. The system currently depends on an X11 system for its display. Obtaining The System\nThe system comes in two parts. The first is a C-based virtual machine Maiko.\nThe remainder of the system is OS / architecture-independent and can be found in the Medley repository.\nYou can now download Medley Interlisp from a release without building anything; see the Medley README\nSee The Maiko README for build instructions for Maiko, for systems for which there is no pre-built release.\n","categories":"","description":"","excerpt":"Medley Interlisp is open-source and may be obtained from GitHub. It is …","ref":"/hugo/doc/build.html","tags":"","title":"Building the Interlisp system"},{"body":"If true, the drawing is centered in the output canvas.\n","categories":"","description":"","excerpt":"If true, the drawing is centered in the output canvas.\n","ref":"/hugo/docs/attrs/center/","tags":"","title":"center"},{"body":"Output using the Apple’s Core Graphics Image format.\n","categories":"","description":"Apple Core Graphics","excerpt":"Apple Core Graphics","ref":"/hugo/docs/outputs/cgimage/","tags":"","title":"CGImage"},{"body":"This reference is generated from: http://www.w3.org/TR/html4/sgml/entities.html using the entities.tcl demo program from the graphviz distribution.\n","categories":"","description":"","excerpt":"This reference is generated from: …","ref":"/hugo/doc/char.html","tags":"","title":"Character Set Reference"},{"body":"Specifies the character encoding used when interpreting string input as a text label.\nThe default value is \"UTF-8\". The other legal value is \"iso-8859-1\" or, equivalently, \"Latin1\".\nThe charset attribute is case-insensitive.\nNote that if the character encoding used in the input does not match the charset value, the resulting output may be very strange.\nExample digraph G { charset=\"UTF-8\" 🍔 -\u003e 💩 } Edit in Playground ","categories":"","description":"","excerpt":"Specifies the character encoding used when interpreting string input …","ref":"/hugo/docs/attrs/charset/","tags":"","title":"charset"},{"body":"Classnames to attach to the node, edge, graph, or cluster’s SVG element. Combine with stylesheet for styling SVG output using CSS classnames.\nMultiple space-separated classes are supported.\nSee also:\nstylesheet id Example:\ndigraph G { graph [class=\"cats\"]; subgraph cluster_big { graph [class=\"big_cats\"]; \"Lion\" [class=\"yellow social\"]; \"Snow Leopard\" [class=\"white solitary\"]; } } Edit in Playground ","categories":"","description":"","excerpt":"Classnames to attach to the node, edge, graph, or cluster’s SVG …","ref":"/hugo/docs/attrs/class/","tags":"","title":"class"},{"body":" \"local\" \"global\" \"none\" ","categories":"","description":"","excerpt":" \"local\" \"global\" \"none\" ","ref":"/hugo/docs/attr-types/clustermode/","tags":"","title":"clusterMode"},{"body":"Mode used for handling clusters. If clusterrank=local, a subgraph whose name begins with cluster is given special treatment.\nThe subgraph is laid out separately, and then integrated as a unit into its parent graph, with a bounding rectangle drawn about it. If the cluster has a label parameter, this label is displayed within the rectangle.\nNote also that there can be clusters within clusters.\nThe modes clusterrank=global and clusterrank=none appear to be identical, both turning off the special cluster processing.\n","categories":"","description":"","excerpt":"Mode used for handling clusters. If clusterrank=local, a subgraph …","ref":"/hugo/docs/attrs/clusterrank/","tags":"","title":"clusterrank"},{"body":"Colors can be specified using one of four formats:\n\"#%2x%2x%2x\" Red-Green-Blue (RGB) \"#%2x%2x%2x%2x\" Red-Green-Blue-Alpha (RGBA) \"H[, ]+S[, ]+V\" Hue-Saturation-Value (HSV) 0.0 \u003c= H,S,V \u003c= 1.0 string color name The specification for the RGB and RGBA formats are the format strings used by sscanf to scan the color value. Thus, these values have the form “#RGB” or “#RGBA”, where R, G, B, and A each consist of 2 hexadecimal digits, and can be separated by whitespace. HSV colors have the form of 3 numbers between 0 and 1, separated by whitespace or commas.\nString-valued color specifications are case-insensitive and interpreted in the context of the current color scheme, as specified by the colorscheme attribute. If this is undefined, the X11 naming scheme will be used. An initial \"/\" character can be used to override the use of the colorscheme attribute. In particular, a single initial \"/\" will cause the string to be evaluated using the default X11 naming. If the color value has the form \"/ssss/yyyy\", the name yyyy is interpreted using the schema ssss. If the color scheme name is empty, i.e., the color has the form \"//yyyy\", the colorscheme attribute is used. Thus, the forms \"yyyy\" and \"//yyyy\" are equivalent.\nAt present, Graphviz recognizes the default color scheme X11, and the Brewer color schemes (cf. ColorBrewer). Please note that Brewer color schemes are covered by this license.\nExamples:\nColor RGB HSV String White \"#ffffff\" \"0.000 0.000 1.000\" \"white\" Black \"#000000\" \"0.000 0.000 0.000\" \"black\" Red \"#ff0000\" \"0.000 1.000 1.000\" \"red\" Turquoise \"#40e0d0\" \"0.482 0.714 0.878\" \"turquoise\" Sienna \"#a0522d\" \"0.051 0.718 0.627\" \"sienna\" The string value transparent can be used to indicate no color. This is only available in the output formats ps, svg, fig, vmrl, and the bitmap formats. It can be used whenever a color is needed but is most useful with the bgcolor attribute. Usually, the same effect can be achieved by setting style to invis.\n","categories":"","description":"","excerpt":"Colors can be specified using one of four formats:\n\"#%2x%2x%2x\" …","ref":"/hugo/docs/attr-types/color/","tags":"","title":"color"},{"body":"Basic drawing color for graphics, not text. For the latter, use the fontcolor attribute.\nFor edges, the value can either be a single color or a colorList.\nIn the latter case, if colorList has no fractions, the edge is drawn using parallel splines or lines, one for each color in the list, in the order given.\nThe head arrow, if any, is drawn using the first color in the list, and the tail arrow, if any, the second color. This supports the common case of drawing opposing edges, but using parallel splines instead of separately routed multiedges.\nIf any fraction is used, the colors are drawn in series, with each color being given roughly its specified fraction of the edge.\nFor example, the graph:\nEdge Color Example digraph G { a -\u003e b [dir=both color=\"red:blue\"] c -\u003e d [dir=none color=\"green:red;0.25:blue\"] } Edit in Playground yields:\nSubgraph \u0026 Node Color Example digraph G { subgraph cluster_yellow { color=\"yellow\" a [color=\"red\"] b [color=\"green\"] } } Edit in Playground yields:\nSee also:\ncolorscheme ","categories":"","description":"","excerpt":"Basic drawing color for graphics, not text. For the latter, use the …","ref":"/hugo/docs/attrs/color/","tags":"","title":"color"},{"body":"A colon-separated list of weighted color values: WC(:WC)* where each WC has the form C(;F)? with C a color value and the optional F a floating-point number, 0 ≤ F ≤ 1. The sum of the floating-point numbers in a colorList must sum to at most 1.\nNOTE: Gradient fills, described below, are currently only available via *CAIRO or SVG rendering.\nIf the colorList value specifies multiple colors, with no weights, and a filled style is specified, a linear gradient fill is done using the first two colors. If weights are present, a degenerate linear gradient fill is done. This essentially does a fill using two colors, with the weights specifying how much of region is filled with each color. If the style attribute contains the value radial, then a radial gradient fill is done. These fills work with any shape.\nFor certain shapes, the style attribute can be set to do fills using more than 2 colors. See the style type for more information.\nThe following table shows some variations of the yellow:blue color list depending on the style and gradientangle attributes.\nGradient angle style=filled style=filled\nfillcolor=yellow;0.3:blue style=radial 0 45 90 180 270 360 ","categories":"","description":"","excerpt":"A colon-separated list of weighted color values: WC(:WC)* where each …","ref":"/hugo/docs/attr-types/colorlist/","tags":"","title":"colorList"},{"body":"This attribute specifies a color scheme namespace: the context for interpreting color names.\nIn particular, if a color value has form \"xxx\" or \"//xxx\", then the color xxx will be evaluated according to the current color scheme. If no color scheme is set, the standard X11 naming is used.\nFor example, if colorscheme=oranges9 (from Brewer color schemes), then color=7 is interpreted as color=\"/oranges9/7\", the 7th color in the oranges9 colorscheme.\nOrange Colorscheme graph { node [colorscheme=oranges9] # Apply colorscheme to all nodes 1 [color=1] 2 [color=2] 3 [color=3] 4 [color=4] 5 [color=5] 6 [color=6] 7 [color=7] 8 [color=8] 9 [color=9] } Edit in Playground Green Colorscheme graph { node [colorscheme=greens9] # Apply colorscheme to all nodes 1 [color=1] 2 [color=2] 3 [color=3] 4 [color=4] 5 [color=5] 6 [color=6] 7 [color=7] 8 [color=8] 9 [color=9] } Edit in Playground See also:\ncolor ","categories":"","description":"","excerpt":"This attribute specifies a color scheme namespace: the context for …","ref":"/hugo/docs/attrs/colorscheme/","tags":"","title":"colorscheme"},{"body":"Comments are inserted into output. Device-dependent\nExample digraph { comment=\"I am a graph\" A [comment=\"I am node A\"] B [comment=\"I am node B\"] A-\u003eB [comment=\"I am an edge\"] } Edit in Playground Outputs SVG with comments:\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e \u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e \u003c!-- Generated by graphviz version 2.47.1 (20210417.1919) --\u003e \u003c!-- This is a graph --\u003e \u003c!-- Pages: 1 --\u003e \u003csvg width=\"62pt\" height=\"116pt\" viewBox=\"0.00 0.00 62.00 116.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u003e \u003cg id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 112)\"\u003e \u003cpolygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-112 58,-112 58,4 -4,4\"/\u003e \u003c!-- A --\u003e \u003c!-- I am node A --\u003e \u003cg id=\"node1\" class=\"node\"\u003e \u003ctitle\u003eA\u003c/title\u003e \u003cellipse fill=\"none\" stroke=\"black\" cx=\"27\" cy=\"-90\" rx=\"27\" ry=\"18\"/\u003e \u003ctext text-anchor=\"middle\" x=\"27\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\"\u003eA\u003c/text\u003e \u003c/g\u003e \u003c!-- B --\u003e \u003c!-- I am node B --\u003e \u003cg id=\"node2\" class=\"node\"\u003e \u003ctitle\u003eB\u003c/title\u003e \u003cellipse fill=\"none\" stroke=\"black\" cx=\"27\" cy=\"-18\" rx=\"27\" ry=\"18\"/\u003e \u003ctext text-anchor=\"middle\" x=\"27\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\"\u003eB\u003c/text\u003e \u003c/g\u003e \u003c!-- A\u0026#45;\u0026gt;B --\u003e \u003c!-- I am an edge --\u003e \u003cg id=\"edge1\" class=\"edge\"\u003e \u003ctitle\u003eA\u0026#45;\u0026gt;B\u003c/title\u003e \u003cpath fill=\"none\" stroke=\"black\" d=\"M27,-71.7C27,-63.98 27,-54.71 27,-46.11\"/\u003e \u003cpolygon fill=\"black\" stroke=\"black\" points=\"30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1\"/\u003e \u003c/g\u003e \u003c/g\u003e \u003c/svg\u003e ","categories":"","description":"","excerpt":"Comments are inserted into output. Device-dependent\nExample digraph { …","ref":"/hugo/docs/attrs/comment/","tags":"","title":"comment"},{"body":"If true, allow edges between clusters.\nSee lhead and ltail.\ndigraph { compound=true; subgraph cluster_a { label=\"Cluster A\"; node1; node3; node5; node7; } subgraph cluster_b { label=\"Cluster B\"; node2; node4; node6; node8; } node1 -\u003e node2 [label=\"1\"]; node3 -\u003e node4 [label=\"2\" ltail=\"cluster_a\"]; node5 -\u003e node6 [label=\"3\" lhead=\"cluster_b\"]; node7 -\u003e node8 [label=\"4\" ltail=\"cluster_a\" lhead=\"cluster_b\"]; } Edit in Playground ","categories":"","description":"","excerpt":"If true, allow edges between clusters.\nSee lhead and ltail.\ndigraph { …","ref":"/hugo/docs/attrs/compound/","tags":"","title":"compound"},{"body":"If true, use edge concentrators.\nThis merges multiedges into a single edge and causes partially parallel edges to share part of their paths. The latter feature is not yet available outside of dot.\nExample digraph { concentrate=true a -\u003e b [label=\"1\"] c -\u003e b d -\u003e b } Edit in Playground ","categories":"","description":"","excerpt":"If true, use edge concentrators.\nThis merges multiedges into a single …","ref":"/hugo/docs/attrs/concentrate/","tags":"","title":"concentrate"},{"body":"If false, the edge is not used in ranking the nodes. For example, in the graph:\ndigraph G { a -\u003e c; a -\u003e b; b -\u003e c [constraint=false]; } Edit in Playground the edge b -\u003e c does not add a constraint during rank assignment, so the only constraints are that a be above b and c, yielding the graph:\n","categories":"","description":"","excerpt":"If false, the edge is not used in ranking the nodes. For example, in …","ref":"/hugo/docs/attrs/constraint/","tags":"","title":"constraint"},{"body":"Factor damping force motions. On each iteration, a node’s movement is limited to this factor of its potential motion. By being less than 1.0, the system tends to “cool”, thereby preventing cycling.\n","categories":"","description":"","excerpt":"Factor damping force motions. On each iteration, a node’s movement is …","ref":"/hugo/docs/attrs/damping/","tags":"","title":"Damping"},{"body":"If true, attach edge label to edge by a 2-segment polyline, underlining the label, then going to the closest point of spline.\nExample digraph { a -\u003e a [label=\"AA\" decorate=true] a -\u003e b [label=\"AB\" decorate=true] } Edit in Playground ","categories":"","description":"","excerpt":"If true, attach edge label to edge by a 2-segment polyline, …","ref":"/hugo/docs/attrs/decorate/","tags":"","title":"decorate"},{"body":"This specifies the distance between nodes in separate connected components. If set too small, connected components may overlap.\nOnly applicable if pack=false.\n","categories":"","description":"","excerpt":"This specifies the distance between nodes in separate connected …","ref":"/hugo/docs/attrs/defaultdist/","tags":"","title":"defaultdist"},{"body":"Set the number of dimensions used for the layout.\nThe maximum value allowed is 10.\n","categories":"","description":"","excerpt":"Set the number of dimensions used for the layout.\nThe maximum value …","ref":"/hugo/docs/attrs/dim/","tags":"","title":"dim"},{"body":"Set the number of dimensions used for rendering.\nThe maximum value allowed is 10.\nIf both dimen and dim are set, the latter specifies the dimension used for layout, and the former for rendering. If only dimen is set, this is used for both layout and rendering dimensions.\nNote that, at present, all aspects of rendering are 2D. This includes the shape and size of nodes, overlap removal, and edge routing. Thus, for dimen \u003e 2, the only valid information is the pos attribute of the nodes.\nAll other coordinates will be 2D and, at best, will reflect a projection of a higher-dimensional point onto the plane.\n","categories":"","description":"","excerpt":"Set the number of dimensions used for rendering.\nThe maximum value …","ref":"/hugo/docs/attrs/dimen/","tags":"","title":"dimen"},{"body":"Edge type for drawing arrowheads.\nIndicates which ends of the edge should be decorated with an arrowhead.\nThe actual style of the arrowhead can be specified using the arrowhead and arrowtail attributes.\nSee limitation.\nExample digraph { A-\u003eB [dir=forward] C-\u003eD [dir=back] E-\u003eF [dir=both] G-\u003eH [dir=none] } Edit in Playground ","categories":"","description":"","excerpt":"Edge type for drawing arrowheads.\nIndicates which ends of the edge …","ref":"/hugo/docs/attrs/dir/","tags":"","title":"dir"},{"body":"If true, constraints are generated for each edge in the largest (heuristic) directed acyclic subgraph such that the edge must point downwards.\nOnly valid when mode=“ipsep”.\nIf hier, generates level constraints similar to those used with mode=“hier”. The main difference is that, in the latter case, only these constraints are involved, so a faster solver can be used.\n","categories":"","description":"","excerpt":"If true, constraints are generated for each edge in the largest …","ref":"/hugo/docs/attrs/diredgeconstraints/","tags":"","title":"diredgeconstraints"},{"body":"For an edge T -\u003e H;\nDirection Image \"forward\" \"back\" \"both\" \"none\" That is, a glyph is drawn at the head end of an edge if and only if dirType is \"forward\" or \"both\"; a glyph is drawn at the tail end of an edge if and only if dirType is \"back\" or \"both\";\nFor undirected edges T -- H;, one of the nodes, usually the righthand one, is treated as the head for the purpose of interpreting \"forward\" and \"back\".\n","categories":"","description":"Direction Type","excerpt":"Direction Type","ref":"/hugo/docs/attr-types/dirtype/","tags":"","title":"dirType"},{"body":"Distortion factor for shape=polygon.\nPositive values cause top part to be larger than bottom; negative values do the opposite.\nSee also skew.\nExample graph { LargeBottom [shape=polygon sides=4 distortion=-.5] LargeTop [shape=polygon sides=4 distortion=.5] } Edit in Playground ","categories":"","description":"","excerpt":"Distortion factor for shape=polygon.\nPositive values cause top part to …","ref":"/hugo/docs/attrs/distortion/","tags":"","title":"distortion"},{"body":"These formats produce output in the dot language. Using canon produces a prettyprinted version of the input, with no layout performed.\nThe dot (and gv alias) options correspond to attributed dot output, and is the default output format. It reproduces the input, along with layout information for the graph. In particular, a bb attribute is attached to the graph, specifying the bounding box of the drawing. If the graph has a label, its position is specified by the lp attribute.\nEach node gets pos, width and the record rectangles are given in the rects attribute. If the node is a polygon and the vertices attribute is defined, this attribute contains the vertices of the node.\nEvery edge is assigned a pos attribute, and if the edge has a label, the label position is given in lp.\nThe xdot format extends the dot format by providing much more detailed information about how graph components are drawn. It relies on additional attributes for nodes, edges and graphs.\nThe format is fluid; comments and suggestions for better representations are welcome. To allow for changes in the format, Graphviz attaches the attribute xdotversion to the graph. If the xdotversion attribute is set in the input graph, the renderer will only output features supported by that version. Note that the formats xdot1.2 and xdot1.4 are equivalent to setting xdotversion=1.2 and xdotversion=1.4, respectively.\nAdditional drawing attributes can appear on nodes, edges, clusters and on the graph itself. There are six new attributes:\nAttribute Description Limitations draw General drawing without labels ldraw Label drawing hdraw Head arrowhead Edge only tdraw Tail arrowhead Edge only hldraw Head label Edge only tldraw Tail label Edge only For a given graph object, one will typically issue a draw directive before the label directive. For example, for a node, one would first use the commands in draw followed by the commands in ldraw.\nThe value of these attributes consists of the concatenation of some (multi-)set of the following 13 rendering or attribute operations. (The number is parentheses gives the xdot version when the operation was added to the format. If no version number is given, the operation was in the original specification.)\nE x₀ y₀ w h Filled ellipse ((x-x₀)/w)² + ((y-y₀)/h)² = 1 e x₀ y₀ w h Unfilled ellipse ((x-x₀)/w)² + ((y-y₀)/h)² = 1 P n x₁ y₁ … xₙ yₙ Filled polygon using the given n points p n x₁ y₁ … xₙ yₙ Unfilled polygon using the given n points L n x₁ y₁ … xₙ yₙ Polyline using the given n points B n x₁ y₁ … xₙ yₙ B-spline using the given n control points b n x₁ y₁ … xₙ yₙ Filled B-spline using the given n control points (1.1) T x y j w n -b₁b₂…bₙ Text drawn using the baseline point (x,y). The text consists of the n bytes following -. The text should be left-aligned (centered, right-aligned) on the point if j is -1 (0, 1), respectively. The value w gives the width of the text as computed by the library. t f Set font characteristics. The integer f is the OR of: Flag Value Min-Version BOLD 1 ITALIC 2 UNDERLINE 4 SUPERSCRIPT 8 SUBSCRIPT 16 (1.5) STRIKE_THROUGH 32 (1.6) OVERLINE 64 (1.7) C n -b₁b₂…bₙ Set fill color. The color value consists of the n bytes following -. (1.1) c n -b₁b₂…bₙ Set pen color. The color value consists of the n bytes following -. (1.1) F s n -b₁b₂…bₙ Set font. The font size is s points. The font name consists of the n bytes following -. (1.1) S n -b₁b₂…bₙ Set style attribute. The style value consists of the n bytes following -. The syntax of the value is the same as specified for a styleItem in style. (1.1) I x y w h n -b₁b₂…bₙ Externally-specified image drawn in the box with lower left corner (x,y) and upper right corner (x+w,y+h). The name of the image consists of the n bytes following -. This is usually a bitmap image. Note that the image size, even when converted from pixels to points, might be different from the required size (w,h). It is assumed the renderer will perform the necessary scaling. (1.2) Note that the filled figures (ellipses, polygons and B-Splines) imply two operations: first, drawing the filled figure with the current fill color; second, drawing an unfilled figure with the current pen color, pen width and pen style.\nWithin the context of a single drawing attribute, e.g., draw, there is an implicit state for the graphical attributes. That is, once a color, style, font, or font characteristic is set, it remains valid for all relevant drawing operations until the value is reset by another xdot cmd.\nStyle values which can be incorporated in the graphics model do not appear in xdot output. In particular, the style values filled, rounded, diagonals, and invis will not appear. Indeed, if style contains invis, there will not be any xdot output at all.\nWith version 1.4 of xdot, color strings may now encode linear and radial gradients. Linear gradients have the form ’[’ x₀ y₀ x₁ y₁ n [color-stop]⁺ ‘]’\nwhere (x₀,y₀) and (x₁,y₁) define the starting and ending points of the gradient line segment, and n gives the number of color-stops. Each color-stop has the form\nv m -b₁b₂…bₘ\nwhere v is a number in the range [0,1] defining a position on the gradient line segment, with color specified by the m byte string b₁b₂…bₘ, the same format as used for colors in the ‘c’ and ‘C’ operations.\nRadial gradients have the form\n’(’ x₀ y₀ r₀ x₁ y₁ r₁ n [color-stop]⁺ ‘)’ where xⱼ yⱼ rⱼ, for j=0,1, specify the center and radius of the start and ending circle, and n gives the number of color-stops. A color-stop has the same format as defined for linear gradients, again given the fractional offset and its associated color.\nIn handling text alignment, the application may want to recompute the string width using its own rendering primitives.\nThe text operation is only used in the label attributes. Normally, the non-text operations are only used in the non-label attributes. If, however, the decorate attribute is set on an edge, its label attribute will also contain a polyline operation. In addition, if a label is a complex, HTML-like label, it will also contain non-text operations.\nAll coordinates and sizes are in points. Note though that if an edge or node is invisible, no drawing operations are attached to it.\nVersion info:\nXdot version Graphviz version Modification \u003e1.0 1.9 \u003e1.1 2.8 First plug-in version \u003e1.2 2.13 Support image operator I \u003e1.3 2.31 Add numerical precision \u003e1.4 2.32 Add gradient colors \u003e1.5 2.34 Fix text layout problem; fix inverted vector in gradient; support version-specific output; new t op for text characteristics \u003e1.6 2.35 Add STRIKE-THROUGH bit fort \u003e1.7 2.37 Add OVERLINE for t Example: simple graph, canonicalized formatting with -Tcanon $ echo 'digraph { a-\u003eb }' | dot -Tcanon digraph { node [label=\"\\N\"]; a -\u003e b; } Example: simple graph, outputting layout positioning with -Tdot $ echo 'digraph { a-\u003eb }' | dot -Tdot digraph { graph [bb=\"0,0,54,108\"]; node [label=\"\\N\"]; a [height=0.5, pos=\"27,90\", width=0.75]; b [height=0.5, pos=\"27,18\", width=0.75]; a -\u003e b [pos=\"e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112\"]; } Example: simple graph, outputting layout positioning \u0026 drawing information with -Txdot $ echo 'digraph { a-\u003eb }' | dot -Txdot digraph { graph [_draw_=\"c 9 -#fffffe00 C 7 -#ffffff P 4 0 0 0 108 54 108 54 0 \", bb=\"0,0,54,108\", xdotversion=1.7 ]; node [label=\"\\N\"]; a [_draw_=\"c 7 -#000000 e 27 90 27 18 \", _ldraw_=\"F 14 11 -Times-Roman c 7 -#000000 T 27 86.3 0 7 1 -a \", height=0.5, pos=\"27,90\", width=0.75]; b [_draw_=\"c 7 -#000000 e 27 18 27 18 \", _ldraw_=\"F 14 11 -Times-Roman c 7 -#000000 T 27 14.3 0 7 1 -b \", height=0.5, pos=\"27,18\", width=0.75]; a -\u003e b [_draw_=\"c 7 -#000000 B 4 27 71.7 27 63.98 27 54.71 27 46.11 \", _hdraw_=\"S 5 -solid c 7 -#000000 C 7 -#000000 P 3 30.5 46.1 27 36.1 23.5 46.1 \", pos=\"e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112\"]; } ","categories":"","description":"Graphviz Language","excerpt":"Graphviz Language","ref":"/hugo/docs/outputs/canon/","tags":"","title":"DOT"},{"body":"Double-precision floating point number.\n","categories":"","description":"","excerpt":"Double-precision floating point number.\n","ref":"/hugo/docs/attr-types/double/","tags":"","title":"double"},{"body":"A colon-separated list of doubles: \"%f(:%f)*\" where each %f is a double.\n","categories":"","description":"","excerpt":"A colon-separated list of doubles: \"%f(:%f)*\" where each %f is a …","ref":"/hugo/docs/attr-types/doublelist/","tags":"","title":"doubleList"},{"body":"Specifies the expected number of pixels per inch on a display device.\nFor bitmap output, dpi guarantees that text rendering will be done more accurately, both in size and in placement.\nFor SVG output, dpi guarantees the dimensions in the output correspond to the correct number of points or inches.\n","categories":"","description":"","excerpt":"Specifies the expected number of pixels per inch on a display device. …","ref":"/hugo/docs/attrs/dpi/","tags":"","title":"dpi"},{"body":"Synonym for edgeURL.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"Synonym for edgeURL.\nSee also:\nedgehref, edgeURL headhref, headURL …","ref":"/hugo/docs/attrs/edgehref/","tags":"","title":"edgehref"},{"body":"If the edge has a URL or edgeURL attribute, edgetarget determines which window of the browser is used for the URL attached to the non-label part of the edge.\nSetting edgetarget=_graphviz will open a new window if it doesn’t already exist, or reuse it if it does.\nIf undefined, the value of the target is used instead.\n","categories":"","description":"","excerpt":"If the edge has a URL or edgeURL attribute, edgetarget determines …","ref":"/hugo/docs/attrs/edgetarget/","tags":"","title":"edgetarget"},{"body":"Tooltip annotation attached to the non-label part of an edge.\nheadtooltip. labeltooltip. tailtooltip. tooltip. ","categories":"","description":"","excerpt":"Tooltip annotation attached to the non-label part of an edge. …","ref":"/hugo/docs/attrs/edgetooltip/","tags":"","title":"edgetooltip"},{"body":"The link for the non-label parts of an edge.\nedgeURL overrides any URL defined for the edge.\nAlso, edgeURL is used near the head or tail node unless overridden by headURL or tailURL, respectively.\nSee limitation.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"The link for the non-label parts of an edge.\nedgeURL overrides any URL …","ref":"/hugo/docs/attrs/edgeurl/","tags":"","title":"edgeURL"},{"body":"Produces Encapsulated PostScript output.\nAt present, this is only guaranteed to be correct for a single input graph since the Bounding Box information has to appear at the beginning of the output, and this will be based on the first graph.\n","categories":"","description":"Encapsulated PostScript","excerpt":"Encapsulated PostScript","ref":"/hugo/docs/outputs/eps/","tags":"","title":"EPS"},{"body":"Terminating condition. If the length squared of all energy gradients are less than epsilon, the algorithm stops.\n","categories":"","description":"","excerpt":"Terminating condition. If the length squared of all energy gradients …","ref":"/hugo/docs/attrs/epsilon/","tags":"","title":"epsilon"},{"body":"A string allowing escape sequences which are replaced according to the context. For node attributes, the substring \"\\N\" is replaced by the name of the node, and the substring \"\\G\" by the name of the graph. For graph or cluster attributes, the substring \"\\G\" is replaced by the name of the graph or cluster. For edge attributes, the substring \"\\E\" is replaced by the name of the edge, the substring \"\\G\" is replaced by the name of the graph or cluster, and the substrings \"\\T\" and \"\\H\" by the names of the tail and head nodes, respectively. The name of an edge is the string formed from the name of the tail node, the appropriate edge operator (\"--\" or \"-\u003e\") and the name of the head node. In all cases, the substring \"\\L\" is replaced by the object’s label attribute.\nIn addition, if the associated attribute is label, headlabel or taillabel, the escape sequences \"\\n\", \"\\l\" and \"\\r\" divide the label into lines, centered, left-justified, and right-justified, respectively.\nObviously, one can use \\\\ to get a single backslash. A backslash appearing before any character not listed above is ignored.\n","categories":"","description":"String with Escape Sequences","excerpt":"String with Escape Sequences","ref":"/hugo/docs/attr-types/escstring/","tags":"","title":"escString"},{"body":"Margin used around polygons for purposes of spline edge routing.\nThe interpretation is the same as given for sep. esep should normally be strictly less than sep.\n","categories":"","description":"","excerpt":"Margin used around polygons for purposes of spline edge routing.\nThe …","ref":"/hugo/docs/attrs/esep/","tags":"","title":"esep"},{"body":"Output in the OpenEXR format\n","categories":"","description":"OpenEXR","excerpt":"OpenEXR","ref":"/hugo/docs/outputs/exr/","tags":"","title":"EXR"},{"body":"fdp stands for Force Directed Placement.\n“spring model” layouts similar to those of neato, but does this by reducing forces rather than working with energy.\nfdp implements the Fruchterman-Reingold heuristic1 including a multigrid solver that handles larger graphs and clustered undirected graphs.\nPDF Manual\nFruchterman, T.M.J. and Reingold, E.M. (1991), Graph drawing by force-directed placement. Softw: Pract. Exper., 21: 1129-1164. ↩︎\n","categories":"","description":"","excerpt":"fdp stands for Force Directed Placement.\n“spring model” layouts …","ref":"/hugo/docs/layouts/fdp/","tags":"","title":"fdp"},{"body":"Outputs graphs in the FIG graphics language.\nExample outputs of a simple graph with two nodes connected with an edge: $ echo 'digraph { a-\u003eb }' | dot -Tfig #FIG 3.2 # Generated by graphviz version 2.47.1 (20210417.1919) # Title: %3 # Pages: 1 Portrait Center Inches Letter 100.00 Single -2 1200 2 0 32 #d3d3d3 0 33 #fffffe 2 3 0 1 33 7 2 0 20 0.0 0 0 0 0 0 5 0 2320 0 0 1240 0 1240 2320 0 2320 # a 1 1 0 1 0 7 1 0 -1 0.000 0 0.0000 620 440 540 -360 620 440 1160 80 4 1 0 1 0 0 14.0 0.0000 6 14.0 4.7 620 498 a\\001 # b 1 1 0 1 0 7 1 0 -1 0.000 0 0.0000 620 1880 540 -360 620 1880 1160 1520 4 1 0 1 0 0 14.0 0.0000 6 14.0 4.7 620 1938 b\\001 # a-\u003eb 3 4 0 1 0 0 0 0 -1 0.0 0 0 0 7 620 806 620 886 620 969 620 1055 620 1143 620 1231 620 1318 0 1 1 1 1 1 0 2 3 0 1 0 0 0 0 20 0.0 0 0 0 0 0 4 690 1318 620 1518 550 1318 690 1318 # end of FIG file ","categories":"","description":"Xfig","excerpt":"Xfig","ref":"/hugo/docs/outputs/fig/","tags":"","title":"FIG"},{"body":"Color used to fill the background of a node or cluster assuming style=filled, or a filled arrowhead.\nIf fillcolor is not defined, color is used. (For clusters, if color is not defined, bgcolor is used.) If this is not defined, the default is used, except for shape=point or when the output format is MIF, which use black by default.\nIf the value is a colorList, a gradient fill is used. By default, this is a linear fill; setting style=radial will cause a radial fill. At present, only two colors are used. If the second color (after a colon) is missing, the default color is used for it.\nSee also the gradientangle attribute for setting the gradient angle.\nNote that a cluster inherits the root graph’s attributes if defined. Thus, if the root graph has defined a fillcolor, this will override a color or bgcolor attribute set for the cluster.\n","categories":"","description":"","excerpt":"Color used to fill the background of a node or cluster assuming …","ref":"/hugo/docs/attrs/fillcolor/","tags":"","title":"fillcolor"},{"body":"If false, the size of a node is determined by smallest width and height needed to contain its label and image, if any, with a margin specified by the margin attribute.\nThe width and height must also be at least as large as the sizes specified by the width and height attributes, which specify the minimum values for these parameters.\nIf true, the node size is specified by the values of the width and height attributes only and is not expanded to contain the text label. There will be a warning if the label (with margin) cannot fit within these limits.\nIf the fixedsize attribute is set to shape, the width and height attributes also determine the size of the node shape, but the label can be much larger. Both the label and shape sizes are used when avoiding node overlap, but all edges to the node ignore the label and only contact the node shape. No warning is given if the label is too large.\n","categories":"","description":"","excerpt":"If false, the size of a node is determined by smallest width and …","ref":"/hugo/docs/attrs/fixedsize/","tags":"","title":"fixedsize"},{"body":"Color used for text.\n","categories":"","description":"","excerpt":"Color used for text.\n","ref":"/hugo/docs/attrs/fontcolor/","tags":"","title":"fontcolor"},{"body":"Font used for text. This very much depends on the output format and, for non-bitmap output such as PostScript or SVG, the availability of the font when the graph is displayed or printed. As such, it is best to rely on font faces that are generally available, such as Times-Roman, Helvetica or Courier.\nHow font names are resolved also depends on the underlying library that handles font name resolution. If Graphviz was built using the fontconfig library, the latter library will be used to search for the font. See the commands fc-list, fc-match and the other fontconfig commands for how names are resolved and which fonts are available. Other systems may provide their own font package, such as Quartz for OS X.\nNote that various font attributes, such as weight and slant, can be built into the font name. Unfortunately, the syntax varies depending on which font system is dominant. Thus, using fontname=\"times bold italic\" will produce a bold, slanted Times font using Pango, the usual main font library. Alternatively, fontname=\"times:italic\" will produce a slanted Times font from fontconfig, while fontname=\"times-bold\" will resolve to a bold Times using Quartz. You will need to ascertain which package is used by your Graphviz system and refer to the relevant documentation.\nIf Graphviz is not built with a high-level font library, fontname will be considered the name of a Type 1 or True Type font file. If you specify fontname=schlbk, the tool will look for a file named schlbk.ttf or schlbk.pfa or schlbk.pfb in one of the directories specified by the fontpath attribute. The lookup does support various aliases for the common fonts.\ndigraph { label=\"Comic Sans MS\" fontname=\"Comic Sans MS\" subgraph cluster_a { label=\"Courier New\" fontname=\"Courier New\" Arial [fontname=\"Arial\"]; Arial -\u003e Arial [label=\"Impact\" fontname=\"Impact\"] } } Edit in Playground ","categories":"","description":"","excerpt":"Font used for text. This very much depends on the output format and, …","ref":"/hugo/docs/attrs/fontname/","tags":"","title":"fontname"},{"body":"Allows user control of how basic fontnames are represented in SVG output.\nIf fontnames is undefined or svg, the output will try to use known SVG fontnames.\nFor example, the default font Times-Roman will be mapped to the basic SVG font serif. This can be overridden by setting fontnames to ps or hd. In the former case, known PostScript font names such as Times-Roman will be used in the output. In the latter case, the fontconfig font conventions are used. Thus, Times-Roman would be treated as Nimbus Roman No9 L. These last two options are useful with SVG viewers that support these richer fontname spaces.\n","categories":"","description":"","excerpt":"Allows user control of how basic fontnames are represented in SVG …","ref":"/hugo/docs/attrs/fontnames/","tags":"","title":"fontnames"},{"body":"Directory list used by libgd to search for bitmap fonts if Graphviz was not built with the fontconfig library.\nIf fontpath is not set, the environment variable DOTFONTPATH is checked.\nIf DOTFONTPATH is not set, GDFONTPATH is checked.\nIf GDFONTPATH not set, libgd uses its compiled-in font path.\nNote that fontpath is an attribute of the root graph.\n","categories":"","description":"","excerpt":"Directory list used by libgd to search for bitmap fonts if Graphviz …","ref":"/hugo/docs/attrs/fontpath/","tags":"","title":"fontpath"},{"body":"Font size, in points, used for text.\ndigraph { label=\"40pt Graph Label\" fontsize=\"40\" subgraph cluster_a { label=\"30pt Cluster Label\" fontsize=\"30pt\" \"20pt Node\" [fontsize=\"20pt\"]; \"20pt Node\"-\u003e \"20pt Node\" [label=\"10pt Edge\" fontsize=\"10\"] } } Edit in Playground ","categories":"","description":"","excerpt":"Font size, in points, used for text.\ndigraph { label=\"40pt Graph …","ref":"/hugo/docs/attrs/fontsize/","tags":"","title":"fontsize"},{"body":"If true, all xlabel attributes are placed, even if there is some overlap with nodes or other labels.\n","categories":"","description":"","excerpt":"If true, all xlabel attributes are placed, even if there is some …","ref":"/hugo/docs/attrs/forcelabels/","tags":"","title":"forcelabels"},{"body":"Output images in the GD and GD2 format. These are the internal formats used by the gd library. gd2 is compressed.\n","categories":"","description":"LibGD","excerpt":"LibGD","ref":"/hugo/docs/outputs/gd/","tags":"","title":"GD/GD2"},{"body":"Outputs GIF bitmap images.\n","categories":"","description":"Graphics Interchange Format","excerpt":"Graphics Interchange Format","ref":"/hugo/docs/outputs/gif/","tags":"","title":"GIF"},{"body":"If a gradient fill is being used, this determines the angle of the fill.\nFor linear fills, the colors transform along a line specified by the angle and the center of the object. For radial fills, a value of zero causes the colors to transform radially from the center; for non-zero values, the colors transform from a point near the object’s periphery as specified by the value.\nIf unset, the default angle is 0.\n","categories":"","description":"","excerpt":"If a gradient fill is being used, this determines the angle of the …","ref":"/hugo/docs/attrs/gradientangle/","tags":"","title":"gradientangle"},{"body":" Spline-o-matic is an edge router that draws Bezier curves in diagrams. It comes with a TCL/tk interface for tests and demos.\nThe library accepts as input:\ntwo endpoints\noptional endpoint tangent vectors\nan admissable region where a curve may be drawn to connect the endpoints\nIt returns a Bezier curve that connects the endpoints and stays within the admissable region. The curve is smooth and close to a shortest path.\nSpline-o-matic Solves Two Types of Problems In the first case, the input is a simple polygon, with the two endpoints must be inside it. The result curve stays within the control polygon.\nIn the second case, the input is a list of polygonal obstacles or “holes” to be avoided, along with the endpoints. The result curve does not pass through any obstacle . (If an endpoint is inside an obstacle, it is ignored for the given route. This is convenient for routing node-link diagrams.)\nCurves are routed individually, not globally, so the edge router does not prevent them from crossing. An interesting improvement to this library would be introduce some notion of global planning to prevent unwanted edge crossings. The library interface to Spline-o-matic exposes its main algorithms so they may be invoked independently for efficiency and flexibility.\nCurves are computed in two phases. The first phase finds a shortest path (a polyline) between endpoints. As described previously, there are two variants. Routing inside a polygon is solved by an efficient algorithm due to Overmars and Welzl, but routing around obstacles involves computing the visibility graph of the obstacles’ vertices, for which we employ the standard O(N^3) algorithm. When more than one edge route is to be found, it is much faster to precompute and re-use the visibility graph, than to compute it for each route.\nThe second phase takes an arbitrary simple path (usually a shortest path computed by the first phase) and a list of barrier segments (usually sides of a control polygon or of obstacles) and produces a Bezier curve that does not touch a barrier except on an endpoint. Note that the barriers are not required to form polygons.\nHere is the library API. Polygons must always be presented in clockwise order!\n#include \u0026lt;pathgeom.h\u0026gt; /* open a visibility graph */ vconfig_t *Pobsopen(Ppoly_t **obstacles, int n_obstacles); /* close a visibility graph, freeing its storage */ void Pobsclose(vconfig_t *config); /* route a polyline from p0 to p1, avoiding obstacles. * if an endpoint is inside an obstacle, pass the polygon's index \u003e=0 * if the endpoint is not inside an obstacle, pass POLYID_NONE * if the endpoint location is not known, pass POLYID_UNKNOWN */ int Pobspath(vconfig_t *config, Ppoint_t p0, int poly0, Ppoint_t p1, int poly1, Ppolyline_t *output_route); #define POLYID_NONE\t-1111 #define POLYID_UNKNOWN\t-2222 /* find shortest euclidean path within a simple polygon */ extern int Pshortestpath(Ppoly_t *boundary, Ppoint_t endpoints[2], Ppolyline_t *output_route); /* fit a spline to an input polyline, without touching barrier segments */ extern int Proutespline (Pedge_t *barriers, int n_barriers, Ppolyline_t input_route, Pvector_t endpoint_slopes[2], Ppolyline_t *output_route); /* utility function to convert from a set of polygonal obstacles to barriers */ extern int Ppolybarriers(Ppoly_t **polys, int npolys, Pedge_t **barriers, int *n _barriers); #endif Distribution The source release is on our download page. Considerable software know-how is needed to work with it. The GUI is written in TCL. The path planner is built as a static library. The TCL layer includes this and other functions as a dynamic library.\nGUI The package has a C library interface and a TCL/tk GUI (contributed by John Ellson, ellson@research.att.com) for demos and debugging. Run pathtest.tcl (or tclsh pathtest.tcl). The GUI permits drawing obstacle polygons (use button 1 to place vertices and button 2 to place the last vertex of a polygon).\npathtest comes with a few sample obstacle configurations. To try it, run pathtest.tcl. load an example, click on the Bezier radio button, and use mouse button 1 and 2 to sweep a line segment. A curve will be routed between its endpoints. The choice of routing inside a polygon or routing around obstacles depends on the endpoints.\nReferences Implementing a General-purpose Edge Router: Paper, Quicktime video.\n","categories":"","description":"","excerpt":" Spline-o-matic is an edge router that draws Bezier curves in …","ref":"/hugo/misc/spline-o-matic/","tags":"","title":"Graphviz: Spline-o-Matic"},{"body":"If the end points of an edge belong to the same group, i.e., have the same group attribute, parameters are set to avoid crossings and keep the edges straight.\n","categories":"","description":"","excerpt":"If the end points of an edge belong to the same group, i.e., have the …","ref":"/hugo/docs/attrs/group/","tags":"","title":"group"},{"body":"Creates a GTK window and displays the output there.\n","categories":"","description":"Formerly GTK+ / GIMP ToolKit","excerpt":"Formerly GTK+ / GIMP ToolKit","ref":"/hugo/docs/outputs/gtk/","tags":"","title":"GTK"},{"body":"Position of an edge’s head label, in points. The position indicates the center of the label.\n","categories":"","description":"","excerpt":"Position of an edge’s head label, in points. The position indicates …","ref":"/hugo/docs/attrs/head_lp/","tags":"","title":"head_lp"},{"body":"If true, the head of an edge is clipped to the boundary of the head node; otherwise, the end of the edge goes to the center of the node, or the center of a port, if applicable.\n","categories":"","description":"","excerpt":"If true, the head of an edge is clipped to the boundary of the head …","ref":"/hugo/docs/attrs/headclip/","tags":"","title":"headclip"},{"body":"Synonym for headURL.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"Synonym for headURL.\nSee also:\nedgehref, edgeURL headhref, headURL …","ref":"/hugo/docs/attrs/headhref/","tags":"","title":"headhref"},{"body":"Text label to be placed near head of edge.\nSee limitation.\n","categories":"","description":"","excerpt":"Text label to be placed near head of edge.\nSee limitation.\n","ref":"/hugo/docs/attrs/headlabel/","tags":"","title":"headlabel"},{"body":"Indicates where on the head node to attach the head of the edge. In the default case, the edge is aimed towards the center of the node, and then clipped at the node boundary.\nSee limitation.\n","categories":"","description":"","excerpt":"Indicates where on the head node to attach the head of the edge. In …","ref":"/hugo/docs/attrs/headport/","tags":"","title":"headport"},{"body":"If the edge has a headURL, headtarget determines which window of the browser is used for the URL. Setting headURL=_graphviz will open a new window if the window doesn’t already exist, or reuse the window if it does.\nIf undefined, the value of the target is used.\n","categories":"","description":"","excerpt":"If the edge has a headURL, headtarget determines which window of the …","ref":"/hugo/docs/attrs/headtarget/","tags":"","title":"headtarget"},{"body":"Tooltip annotation attached to the head of an edge.\nUsed only if the edge has a headURL attribute.\nSee also:\nedgetooltip. labeltooltip. tailtooltip. tooltip. ","categories":"","description":"","excerpt":"Tooltip annotation attached to the head of an edge.\nUsed only if the …","ref":"/hugo/docs/attrs/headtooltip/","tags":"","title":"headtooltip"},{"body":"If defined, headURL is output as part of the head label of the edge.\nAlso, this value is used near the head node, overriding any URL value.\nSee limitation.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"If defined, headURL is output as part of the head label of the edge. …","ref":"/hugo/docs/attrs/headurl/","tags":"","title":"headURL"},{"body":"Height of node, in inches.\nThis is taken as the initial, minimum height of the node. If fixedsize is true, this will be the final height of the node. Otherwise, if the node label requires more height to fit, the node’s height will be increased to contain the label.\nIf the output format is dot, the value given to height will be the final value.\nIf the node shape is regular, the width and height are made identical:\nIf both the width and the height are set explicitly, the maximum of the two values is used. If one of width or height is set explicitly, that value is used for both width and height. If neither is set explicitly, the minimum of the two default values is used. Height Example digraph G { \"default\" \"1in\" [height=1] \"2in\" [height=2] } Edit in Playground See also:\nwidth ","categories":"","description":"","excerpt":"Height of node, in inches.\nThis is taken as the initial, minimum …","ref":"/hugo/docs/attrs/height/","tags":"","title":"height"},{"body":"Synonym for URL.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"Synonym for URL.\nSee also:\nedgehref, edgeURL headhref, headURL …","ref":"/hugo/docs/attrs/href/","tags":"","title":"href"},{"body":"Outputs images in the Windows ICO format.\n","categories":"","description":"Windows Icon","excerpt":"Windows Icon","ref":"/hugo/docs/outputs/ico/","tags":"","title":"ICO"},{"body":"Allows the graph author to provide an identifier for graph objects which is to be included in the output.\nNormal \\N, \\E, \\G substitutions are applied.\nIf provided, it is the responsibility of the provider to keep id values unique for its intended downstream use.\nNote, in particular, that \\E does not provide a unique id for multi-edges.\nIf no id attribute is provided, then a unique internal id is used. However, this value is unpredictable by the graph writer.\nIf the graph provides an id attribute, this will be used as a prefix for internally generated attributes. By making internally-used attributes distinct, the user can include multiple image maps in the same document.\n","categories":"","description":"","excerpt":"Allows the graph author to provide an identifier for graph objects …","ref":"/hugo/docs/attrs/id/","tags":"","title":"id"},{"body":"Gives the name of a file containing an image to be displayed inside a node. The image file must be in one of the recognized formats, typically JPEG, PNG, GIF, BMP, SVG, or Postscript, and be able to be converted into the desired output format.\nThe file must contain the image size information:\nBitmap formats usually already contain image size. PostScript files must contain a line starting with %%BoundingBox: followed by four integers specifying the lower left x and y coordinates and the upper right x and y coordinates of the bounding box for the image, the coordinates being in points. An SVG image file must contain width and height attributes, typically as part of the svg element. The values for these should have the form of a floating point number, followed by optional units, e.g., width=\"76pt\". Recognized units are in, px, pc, pt, cm and mm for inches, pixels, picas, points, centimeters and millimeters, respectively. The default unit is points. Unlike with the shapefile attribute, the image is treated as node content rather than the entire node. In particular, an image can be contained in a node of any shape, not just a rectangle.\n","categories":"","description":"","excerpt":"Gives the name of a file containing an image to be displayed inside a …","ref":"/hugo/docs/attrs/image/","tags":"","title":"image"},{"body":"Deprecated.\nProduces map files for client-side image maps. The cmap format is mostly identical to cmapx, but the latter is well-formed XML amenable to processing by XML tools. In particular, the cmapx output is wrapped in \u003cmap\u003e\u003c/map\u003e.\nSee ID Output Note.\n","categories":"","description":"","excerpt":"Deprecated.\nProduces map files for client-side image maps. The cmap …","ref":"/hugo/docs/outputs/cmap/","tags":"","title":"Image Map: Client-side"},{"body":"Deprecated.\nProduces HTML image map files. This is a predecessor (circa 1994) of the IMAP format. Most servers now use the latter. URLs can be attached to the root graph, nodes and edges. Since edge links are attached to edge labels, an edge must have a label for its URL to be used. For both nodes and edges, if the URL has the escape sequence \\N embedded in its string, this will be replaced with the node or edge name.\n","categories":"","description":"","excerpt":"Deprecated.\nProduces HTML image map files. This is a predecessor …","ref":"/hugo/docs/outputs/ismap/","tags":"","title":"Image Map: Server-side"},{"body":"Produces map files for server-side and client-side image maps. These can be used in a web page with a graphical form of the output, e.g. in JPEG, GIF or PNG format, to attach links to nodes and edges. Graphviz generates an object’s map information only if the object has a non-trival URL or href attribute, or if it has an explicit tooltip attribute.\nFor example, to create a server-side map given the dot file\n/* x.gv */ digraph mainmap { URL=\"http://www.research.att.com/base.html\"; command [URL=\"http://www.research.att.com/command.html\"]; command -\u003e output [URL=\"colors.html\"]; } Edit in Playground one would process the graph and generate two output files:\ndot -Timap -ox.map -Tgif -ox.gif x.gv and then refer to it in a web page:\n\u003cA HREF=\"x.map\"\u003e\u003cIMG SRC=\"x.gif\" ismap=\"ismap\" /\u003e\u003c/A\u003e For client-side maps, one again generates two output files:\ndot -Tcmapx -ox.map -Tgif -ox.gif x.gv and uses the HTML\n\u003cIMG SRC=\"x.gif\" USEMAP=\"#mainmap\" /\u003e ... [content of x.map] ... Note that the name given in the USEMAP attribute must be the same as the ID attribute of the MAP element. The Graphviz renderer uses the name of the graph as the ID. Thus, in the example above, where the graph’s name is mainmap, we have USEMAP=\"#mainmap\" in the IMG attribute, and x.map will look like\n\u003cmap id=\"mainmap\" name=\"mainmap\"\u003e ... \u003c/map\u003e URLs can be attached to the root graph, nodes and edges. If a node has a URL, clicking in the node will activate the link. If an edge has a URL, various points along the edge (but not necessarily the head or tail) will link to it. In addition, if the edge has a label, that will link to the URL. As for the head of the edge, this is linked to the headURL, if set. Otherwise, it is linked to the edge’s URL if that is defined. The analogous description holds for the tail and the tailURL. A URL associated with the graph is used as a default link.\nIf the URL of a node contains the escape sequence “\\N”, it will be replaced by the node’s name. If the headURL is defined and contains the escape sequence “\\N”, it will be replaced by the headlabel, if defined. The analogous result holds for the tailURL and the taillabel.\nSee ID Output Note.\n","categories":"","description":"","excerpt":"Produces map files for server-side and client-side image maps. These …","ref":"/hugo/docs/outputs/imap/","tags":"","title":"Image Map: Server-side and client-side"},{"body":"These are identical to the imap and cmapx formats, except they rely solely on rectangles as active areas.\n","categories":"","description":"","excerpt":"These are identical to the imap and cmapx formats, except they rely …","ref":"/hugo/docs/outputs/imap_np/","tags":"","title":"Image Map: Server-side and client-side"},{"body":"Specifies a list of directories in which to look for image files as specified by the image attribute or using the IMG element in HTML-like labels.\nimagepath should be a list of (absolute or relative) pathnames, each separated by a semicolon ; (for Windows) or a colon : (all other OS).\nThe first directory in which a file of the given name is found will be used to load the image.\nIf imagepath is not set, relative pathnames for the image file will be interpreted with respect to the current working directory.\n","categories":"","description":"","excerpt":"Specifies a list of directories in which to look for image files as …","ref":"/hugo/docs/attrs/imagepath/","tags":"","title":"imagepath"},{"body":"Controls how an image is positioned within its containing node.\nimagepos only has an effect when the image is smaller than the containing node.\nThe default is to be centered both horizontally and vertically.\nValid values:\ntl - Top Left tc - Top Centered tr - Top Right ml - Middle Left mc - Middle Centered (the default) mr - Middle Right bl - Bottom Left bc - Bottom Centered br - Bottom Right ","categories":"","description":"","excerpt":"Controls how an image is positioned within its containing node. …","ref":"/hugo/docs/attrs/imagepos/","tags":"","title":"imagepos"},{"body":"Controls how an image fills its containing node.\nIn general, the image is given its natural size, (cf. dpi), and the node size is made large enough to contain its image, its label, its margin, and its peripheries.\nIts width and height will also be at least as large as its minimum width and height. If, however, fixedsize=true, the width and height attributes specify the exact size of the node.\nDuring rendering, in the default case (imagescale=false), the image retains its natural size. If imagescale=true, the image is uniformly scaled (i.e., its aspect ratio is preserved) to fit inside the node. At least one dimension of the image will be as large as possible given the size of the node. When imagescale=width, the width of the image is scaled to fill the node width. The corresponding property holds when imagescale=height. When imagescale=both, both the height and the width are scaled separately to fill the node. In all cases, if a dimension of the image is larger than the corresponding dimension of the node, that dimension of the image is scaled down to fit the node.\nAs with the case of expansion, if imagescale=true, width and height are scaled uniformly.\n","categories":"","description":"","excerpt":"Controls how an image fills its containing node.\nIn general, the image …","ref":"/hugo/docs/attrs/imagescale/","tags":"","title":"imagescale"},{"body":"For layout algorithms that support initial input positions (specified by the pos attribute), this attribute can be used to appropriately scale the values.\nBy default, fdp and neato interpret the x and y values of pos as being in inches. (NOTE: neato -n(2) treats the coordinates as being in points, being the unit used by the layout algorithms for the pos attribute.) Thus, if the graph has pos attributes in points, one should set inputscale=72. This can also be set on the command line using the -s flag.\nIf unset, no scaling is done and the units on input are treated as inches.\ninputscale=0 is equivalent to inputscale=72.\n","categories":"","description":"","excerpt":"For layout algorithms that support initial input positions (specified …","ref":"/hugo/docs/attrs/inputscale/","tags":"","title":"inputscale"},{"body":"Integer number.\n","categories":"","description":"Integer","excerpt":"Integer","ref":"/hugo/docs/attr-types/int/","tags":"","title":"int"},{"body":"\nPlease join the Interlisp Medley Users Group to ask questions and discuss Interlisp.\nWhat is Interlisp Medley? Medley Interlisp is the environment originally developed for the Xerox Lisp machines (called D-machines, names Dorado, Dolphin, Dandelion, Daybreak). The project was spun out to a company called Envos, which then turned into Venue.\nIt was the first IDE with a window/mouse/menu GUI, launched as a product from Xerox in 1980. It was a base from which AI applications were built, as well as a research project in its own right.\nFor example, Interlisp SEDIT is the canonical ancestral structure editor. Masterscope and the “file package” included system-management tools that combined features of version control and build systems, with comprehensive cross referencing support.\nMedley was the last release of the Xerox Lisp environment, before the whole environment was renamed Medley. It was originally written in Interlisp (a dialect separate from the MACLISP/Common Lisp tradition, with its own ancestry), but later, Common Lisp also became part of the environment. Medley includes a WYSIWYG text editor (TEdit), email organizer (Lafite), performance tools (Spy) and many other libraries and user contributed code (from the 1980s).\nDocumentation Interlisp Medley documentation for is available in from here: Documentation.\nDocumentation on building and running the restored version of Interlisp Medley can be found here: ??\nDiscussions You can post questions and comments to the Medley Interlisp Users Group.\nBug And Issue Tracking You can report or view bugs and issues by visiting the Interlisp Medley Issues page.\n","categories":"","description":"","excerpt":"\nPlease join the Interlisp Medley Users Group to ask questions and …","ref":"/hugo/","tags":"","title":"Interlisp"},{"body":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","categories":"","description":"","excerpt":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","ref":"/hugo/doc/todo.html","tags":"","title":"Interlisp Wish List"},{"body":"Output JPEG compressed image files.\nJPEG’s image compression can blur fine image details like text \u0026 lines, so consider using a lossless format (say, PNG or WebP) instead.\n","categories":"","description":"Joint Photographic Experts Group","excerpt":"Joint Photographic Experts Group","ref":"/hugo/docs/outputs/jpg/","tags":"","title":"JPEG"},{"body":"Output using the JPEG 2000 format.\nJPEG’s image compression can blur fine image details like text \u0026 lines, so consider using a lossless format (say, PNG or WebP) instead.\n","categories":"","description":"","excerpt":"Output using the JPEG 2000 format.\nJPEG’s image compression can blur …","ref":"/hugo/docs/outputs/jp2/","tags":"","title":"JPEG 2000"},{"body":"These formats produce a JSON output encoding the DOT language. Using json0 produces output in JSON format that contains the same information produced by -Tdot. Using json produces output in JSON format that contains the same information produced by -Txdot. Both of these assume the graph has been processed by one of the layout algorithms. The dot_json and xdot_json also produce JSON output similar to to json0 and json, respectively, except they only use the content of the graph on input. In particular, they do not assume that the graph has been processed by any layout algorithm, and the only xdot information appearing in the output was in the original input file.\nThe output produced by these follows the json schema shown below. Note that the objects array has all of the subgraphs first, followed by all of the nodes. The _gvid value is the index of the subgraph or node in the objects array. This also holds true for the edges in the objects array. Note that this format allows clustered graphs, where edges can connect clusters as well as nodes.\nExample: simple graph rendered with -Tdot_json $ echo 'digraph { a-\u003eb }' | dot -Tdot_json { \"name\": \"%3\", \"directed\": true, \"strict\": false, \"_subgraph_cnt\": 0, \"objects\": [ { \"_gvid\": 0, \"name\": \"a\", \"label\": \"\\\\N\" }, { \"_gvid\": 1, \"name\": \"b\", \"label\": \"\\\\N\" } ], \"edges\": [ { \"_gvid\": 0, \"tail\": 0, \"head\": 1 } ] } Example: simple graph rendered with -Txdot_json $ echo 'digraph { a-\u003eb }' | dot -Txdot_json { \"name\": \"%3\", \"directed\": true, \"strict\": false, \"_subgraph_cnt\": 0, \"objects\": [ { \"_gvid\": 0, \"name\": \"a\", \"label\": \"\\\\N\" }, { \"_gvid\": 1, \"name\": \"b\", \"label\": \"\\\\N\" } ], \"edges\": [ { \"_gvid\": 0, \"tail\": 0, \"head\": 1 } ] } Example: simple graph rendered with -Tjson0 $ echo 'digraph { a-\u003eb }' | dot -Tjson0 { \"name\": \"%3\", \"directed\": true, \"strict\": false, \"bb\": \"0,0,54,108\", \"_subgraph_cnt\": 0, \"objects\": [ { \"_gvid\": 0, \"name\": \"a\", \"height\": \"0.5\", \"label\": \"\\\\N\", \"pos\": \"27,90\", \"width\": \"0.75\" }, { \"_gvid\": 1, \"name\": \"b\", \"height\": \"0.5\", \"label\": \"\\\\N\", \"pos\": \"27,18\", \"width\": \"0.75\" } ], \"edges\": [ { \"_gvid\": 0, \"tail\": 0, \"head\": 1, \"pos\": \"e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112\" } ] } Example: simple graph rendered with -Tjson echo 'digraph { a-\u003eb }' | dot -Tjson { \"name\": \"%3\", \"directed\": true, \"strict\": false, \"_draw_\": [ { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#fffffe00\" }, { \"op\": \"C\", \"grad\": \"none\", \"color\": \"#ffffff\" }, { \"op\": \"P\", \"points\": [[0.000,0.000],[0.000,108.000],[54.000,108.000],[54.000,0.000]] } ], \"bb\": \"0,0,54,108\", \"xdotversion\": \"1.7\", \"_subgraph_cnt\": 0, \"objects\": [ { \"_gvid\": 0, \"name\": \"a\", \"_draw_\": [ { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"e\", \"rect\": [27.000,90.000,27.000,18.000] } ], \"_ldraw_\": [ { \"op\": \"F\", \"size\": 14.000, \"face\": \"Times-Roman\" }, { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"T\", \"pt\": [27.000,86.300], \"align\": \"c\", \"width\": 7.000, \"text\": \"a\" } ], \"height\": \"0.5\", \"label\": \"\\\\N\", \"pos\": \"27,90\", \"width\": \"0.75\" }, { \"_gvid\": 1, \"name\": \"b\", \"_draw_\": [ { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"e\", \"rect\": [27.000,18.000,27.000,18.000] } ], \"_ldraw_\": [ { \"op\": \"F\", \"size\": 14.000, \"face\": \"Times-Roman\" }, { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"T\", \"pt\": [27.000,14.300], \"align\": \"c\", \"width\": 7.000, \"text\": \"b\" } ], \"height\": \"0.5\", \"label\": \"\\\\N\", \"pos\": \"27,18\", \"width\": \"0.75\" } ], \"edges\": [ { \"_gvid\": 0, \"tail\": 0, \"head\": 1, \"_draw_\": [ { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"b\", \"points\": [[27.000,71.700],[27.000,63.980],[27.000,54.710],[27.000,46.110]] } ], \"_hdraw_\": [ { \"op\": \"S\", \"style\": \"solid\" }, { \"op\": \"c\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"C\", \"grad\": \"none\", \"color\": \"#000000\" }, { \"op\": \"P\", \"points\": [[30.500,46.100],[27.000,36.100],[23.500,46.100]] } ], \"pos\": \"e,27,36.104 27,71.697 27,63.983 27,54.712 27,46.112\" } ] } descriptionJSON representation of a graph encoding xdot attributestitleGraphviz JSONrequirednamedirectedstrict_subgraph_cntdefinitionsdrawopsitemsoneOf$ref#/definitions/ellipse#/definitions/polygon#/definitions/polyline#/definitions/bspline#/definitions/text#/definitions/font_style#/definitions/drawcolor#/definitions/font#/definitions/styletypearraystylerequiredopstyletypeobjectpropertiesstyletypestringoppatternStypestringfont_stylerequiredopfontchartypeobjectpropertiesoppatternttypestringfontcharminimum0typeintegermaximum127polygonrequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppattern[pP]typestringmetanoderequired_gvidnametypeobjectproperties_draw_$ref#/definitions/drawopsnametypestringdescriptionThe node or subgraph name_ldraw_$ref#/definitions/drawops_gvidtypeintegersubgraphsitemstypeintegertypearraydescriptionindex of a child subgraphedgesitemstypeintegertypearraydescriptionindex of an edge in this subgraphadditionalPropertiestypestringnodesitemstypeintegertypearraydescriptionindex of a node in this subgraphtitlenode or subgraphcolorpattern(#[0-9a-f]*)|(#[0-9a-f]{8})typestringtextrequiredopptaligntextwidthtypeobjectpropertiestexttypestringalignpattern[lcr]typestringoppatternTtypestringpt$ref#/definitions/pointwidthtypenumberpointminItems2itemstypenumbertypearraymaxItems2stoprequiredfraccolortypeobjectpropertiescolor$ref#/definitions/colorfractypenumberdrawcolorrequiredopgradtypeobjectpropertiesp0oneOf$ref#/definitions/point#/definitions/point3p1oneOf$ref#/definitions/point#/definitions/point3color$ref#/definitions/colorstopsitems$ref#/definitions/stoptypearraygradenumnonelinearradialtypestringoppattern[cC]typestringellipserequiredoprecttypeobjectpropertiesrect$ref#/definitions/rectangleoppattern[eE]typestringbsplinerequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppattern[bB]typestringedgerequired_gvidtailheadtypeobjectproperties_hldraw_$ref#/definitions/drawops_tdraw_$ref#/definitions/drawops_draw_$ref#/definitions/drawops_ldraw_$ref#/definitions/drawops_gvidtypeintegertailtypeintegerdescription_gvid of tail node_tldraw_$ref#/definitions/drawops_hdraw_$ref#/definitions/drawopsadditionalPropertiestypestringheadtypeintegerdescription_gvid of tail headtitleedgepolylinerequiredoppointstypeobjectpropertiespoints$ref#/definitions/pointlistoppatternLtypestringfontrequiredopsizefacetypeobjectpropertiessizeminimum0typenumberoppatternFtypestringfacetypestringpoint3minItems3itemstypenumbertypearraymaxItems3rectangleminItems4itemstypenumbertypearraymaxItems4pointlistitems$ref#/definitions/pointtypearraytypeobjectpropertiesdirectedtypebooleandescriptionTrue if the graph is directed_draw_$ref#/definitions/drawopsnametypestringdescriptionThe graph nameobjectsitems$ref#/definitions/metanodetypearraydescriptionThe graph's subgraphs followed by the graph's nodes_ldraw_$ref#/definitions/drawopsstricttypebooleandescriptionTrue if the graph is strictedgesitems$ref#/definitions/edgetypearrayadditionalPropertiestypestring_subgraph_cnttypeintegerdescriptionNumber of subgraphs in the graph ","categories":"","description":"JavaScript Object Notation","excerpt":"JavaScript Object Notation","ref":"/hugo/docs/outputs/json/","tags":"","title":"JSON"},{"body":"Spring constant used in virtual physical model. It roughly corresponds to an ideal edge length (in inches), in that increasing K tends to increase the distance between nodes.\nNote that the edge attribute len can be used to override this value for adjacent nodes.\n","categories":"","description":"","excerpt":"Spring constant used in virtual physical model. It roughly corresponds …","ref":"/hugo/docs/attrs/k/","tags":"","title":"K"},{"body":"Text label attached to objects.\nIf a node’s shape is record, then the label can have a special format which describes the record layout.\nNote that a node’s default label is \"\\N\", so the node’s name or ID becomes its label.\nTechnically, a node’s name can be an HTML string but this will not mean that the node’s label will be interpreted as an HTML-like label. This is because the node’s actual label is an ordinary string, which will be replaced by the raw bytes stored in the node’s name.\nTo get an HTML-like label, the label attribute value itself must be an HTML string.\nExample: Van Gogh Paintings graph { label=\"Vincent van Gogh Paintings\" subgraph cluster_self_portraits { label=\"Self-portraits\" spwgfh [label=\"Self-Portrait with Grey Felt Hat\"] spaap [label=\"Self-Portrait as a Painter\"] } subgraph cluster_flowers { label=\"Flowers\" sf [label=\"Sunflowers\"] ab [label=\"Almond Blossom\"] } } Edit in Playground ","categories":"","description":"","excerpt":"Text label attached to objects.\nIf a node’s shape is record, then the …","ref":"/hugo/docs/attrs/label/","tags":"","title":"label"},{"body":"Whether to treat a node whose name has the form |edgelabel|* as a special node representing an edge label.\nThe default, label_scheme=0, produces no effect. If label_scheme=1, sfdp uses a penalty-based method to make that kind of node close to the center of its neighbor. With label_scheme=2, sfdp uses a penalty-based method to make that kind of node close to the old center of its neighbor. Finally, label_scheme=3 invokes a two-step process of overlap removal and straightening. ","categories":"","description":"","excerpt":"Whether to treat a node whose name has the form |edgelabel|* as a …","ref":"/hugo/docs/attrs/label_scheme/","tags":"","title":"label_scheme"},{"body":"Determines, along with labeldistance, where the headlabel / taillabel are placed with respect to the head / tail in polar coordinates.\nThe origin in the coordinate system is the point where the edge touches the node. The ray of 0 degrees goes from the origin back along the edge, parallel to the edge at the origin.\nThe angle, in degrees, specifies the rotation from the 0 degree ray, with positive angles moving counterclockwise and negative angles moving clockwise.\n","categories":"","description":"","excerpt":"Determines, along with labeldistance, where the headlabel / taillabel …","ref":"/hugo/docs/attrs/labelangle/","tags":"","title":"labelangle"},{"body":"Multiplicative scaling factor adjusting the distance that the headlabel / taillabel is from the head / tail node.\nThe default distance is 10 points.\nSee labelangle for more details.\n","categories":"","description":"","excerpt":"Multiplicative scaling factor adjusting the distance that the …","ref":"/hugo/docs/attrs/labeldistance/","tags":"","title":"labeldistance"},{"body":"If true, allows edge labels to be less constrained in position. In particular, it may appear on top of other edges.\n","categories":"","description":"","excerpt":"If true, allows edge labels to be less constrained in position. In …","ref":"/hugo/docs/attrs/labelfloat/","tags":"","title":"labelfloat"},{"body":"Color used for headlabel and taillabel.\nIf not set, defaults to edge’s fontcolor.\n","categories":"","description":"","excerpt":"Color used for headlabel and taillabel.\nIf not set, defaults to edge’s …","ref":"/hugo/docs/attrs/labelfontcolor/","tags":"","title":"labelfontcolor"},{"body":"Font used for headlabel and taillabel.\nIf not set, defaults to edge’s fontname.\n","categories":"","description":"","excerpt":"Font used for headlabel and taillabel.\nIf not set, defaults to edge’s …","ref":"/hugo/docs/attrs/labelfontname/","tags":"","title":"labelfontname"},{"body":"Font size, in points, used for headlabel and taillabel.\nIf not set, defaults to edge’s fontsize.\n","categories":"","description":"","excerpt":"Font size, in points, used for headlabel and taillabel.\nIf not set, …","ref":"/hugo/docs/attrs/labelfontsize/","tags":"","title":"labelfontsize"},{"body":"Synonym for labelURL.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"Synonym for labelURL.\nSee also:\nedgehref, edgeURL headhref, headURL …","ref":"/hugo/docs/attrs/labelhref/","tags":"","title":"labelhref"},{"body":"Justification for graph \u0026 cluster labels.\nIf labeljust=r, the label is right-justified within bounding rectangle If labeljust=l, left-justified Else the label is centered. Note that a subgraph inherits attributes from its parent. Thus, if the root graph sets labeljust=l, the subgraph inherits this value.\nGraph label justifications digraph { label=\"l\" labeljust=l a } Edit in Playground Graph label justifications digraph { label=\"r\" labeljust=r b } Edit in Playground Cluster label justifications digraph { subgraph cluster_l { label=\"l\" labeljust=l a } subgraph cluster_c { label=\"c\" labeljust=c b } subgraph cluster_r { label=\"r\" labeljust=r c } } Edit in Playground ","categories":"","description":"","excerpt":"Justification for graph \u0026 cluster labels.\nIf labeljust=r, the label is …","ref":"/hugo/docs/attrs/labeljust/","tags":"","title":"labeljust"},{"body":"Vertical placement of labels for nodes, root graphs and clusters.\nFor graphs and clusters, only labelloc=t and labelloc=b are allowed, corresponding to placement at the top and bottom, respectively.\nBy default, root graph labels go on the bottom and cluster labels go on the top.\nNote that a subgraph inherits attributes from its parent. Thus, if the root graph sets labelloc=b, the subgraph inherits this value.\nFor nodes, this attribute is used only when the height of the node is larger than the height of its label.\nIf labelloc=t, labelloc=c, labelloc=b, the label is aligned with the top, centered, or aligned with the bottom of the node, respectively.\nBy default, the label is vertically centered.\nLabel at top of graph digraph { labelloc=\"t\" label=\"Title\" a -\u003e b } Edit in Playground Label at bottom of graph digraph { labelloc=\"b\" label=\"Title\" a -\u003e b } Edit in Playground Cluster Label Locations digraph { label=\"Graph Title\" subgraph cluster_t { labelloc=\"t\" label=\"Cluster Top\" a -\u003e b } subgraph cluster_b { labelloc=\"b\" label=\"Cluster Bottom\" c -\u003e d } } Edit in Playground Node label positions digraph { t [labelloc=t] c [labelloc=c] b [labelloc=b] } Edit in Playground ","categories":"","description":"","excerpt":"Vertical placement of labels for nodes, root graphs and clusters.\nFor …","ref":"/hugo/docs/attrs/labelloc/","tags":"","title":"labelloc"},{"body":"If the edge has a URL or labelURL attribute, this attribute determines which window of the browser is used for the URL attached to the label.\nSetting labeltarget=_graphviz will open a new window if it doesn’t already exist, or reuse it if it does.\nIf undefined, the value of the target is used.\n","categories":"","description":"","excerpt":"If the edge has a URL or labelURL attribute, this attribute determines …","ref":"/hugo/docs/attrs/labeltarget/","tags":"","title":"labeltarget"},{"body":"Tooltip annotation attached to label of an edge.\nedgetooltip. headtooltip. tailtooltip. tooltip. ","categories":"","description":"","excerpt":"Tooltip annotation attached to label of an edge.\nedgetooltip. …","ref":"/hugo/docs/attrs/labeltooltip/","tags":"","title":"labeltooltip"},{"body":"If defined, labelURL is the link used for the label of an edge.\nlabelURL overrides any URL defined for the edge.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"If defined, labelURL is the link used for the label of an edge. …","ref":"/hugo/docs/attrs/labelurl/","tags":"","title":"labelURL"},{"body":"If true, the graph is rendered in landscape mode. Synonymous with rotate=90 or orientation=landscape.\nRotations digraph { landscape=true a -\u003e b } Edit in Playground See also:\nrotate orientation ","categories":"","description":"","excerpt":"If true, the graph is rendered in landscape mode. Synonymous with …","ref":"/hugo/docs/attrs/landscape/","tags":"","title":"landscape"},{"body":"Specifies layers in which the node, edge or cluster is present.\n","categories":"","description":"","excerpt":"Specifies layers in which the node, edge or cluster is present.\n","ref":"/hugo/docs/attrs/layer/","tags":"","title":"layer"},{"body":"list of strings separated by characters from the layersep attribute (by default, colons, tabs or spaces), defining layer names and implicitly numbered 1,2,…\n","categories":"","description":"","excerpt":"list of strings separated by characters from the layersep attribute …","ref":"/hugo/docs/attr-types/layerlist/","tags":"","title":"layerList"},{"body":"Specifies the separator characters used to split an attribute of type layerRange into a list of ranges.\n","categories":"","description":"","excerpt":"Specifies the separator characters used to split an attribute of type …","ref":"/hugo/docs/attrs/layerlistsep/","tags":"","title":"layerlistsep"},{"body":"specifies a list of layers defined by the layers attribute.\nIt consists of a list of layer intervals separated by any collection of characters from the layerlistsep attribute. Each layer interval is specified as either a layerId or a layerIdslayerId, where layerId = \"all\", a decimal integer or a layer name. (An integer i corresponds to layer i, layers being numbered from 1.)\nThe string s consists of 1 or more separator characters specified by the layersep attribute.\nThus, assuming the default values for layersep and layerlistsep, if layers=\"a:b:c:d:e:f:g:h\", the layerRange string layers=\"a:b,d,f:all\" would denote the layers a b d f g h.\n","categories":"","description":"","excerpt":"specifies a list of layers defined by the layers attribute.\nIt …","ref":"/hugo/docs/attr-types/layerrange/","tags":"","title":"layerRange"},{"body":"Specifies a linearly ordered list of layer names attached to the graph\nThe graph is then output in separate layers. Only those components belonging to the current output layer appear.\nSee How to use drawing layers (overlays).\n","categories":"","description":"","excerpt":"Specifies a linearly ordered list of layer names attached to the graph …","ref":"/hugo/docs/attrs/layers/","tags":"","title":"layers"},{"body":"Selects a list of layers to be emitted.\n","categories":"","description":"","excerpt":"Selects a list of layers to be emitted.\n","ref":"/hugo/docs/attrs/layerselect/","tags":"","title":"layerselect"},{"body":"Specifies the separator characters used to split the layers attribute into a list of layer names.\n","categories":"","description":"","excerpt":"Specifies the separator characters used to split the layers attribute …","ref":"/hugo/docs/attrs/layersep/","tags":"","title":"layersep"},{"body":"Specifies the name of the layout engine to use, such as dot or neato.\nNormally, graphs should be kept independent of a type of layout. In some cases, however, it can be convenient to embed the type of layout desired within the graph.\nFor example, a graph containing position information from a layout might want to record what the associated layout engine was.\nThis attribute takes precedence over the -K flag or the actual command name used.\n","categories":"","description":"","excerpt":"Specifies the name of the layout engine to use, such as dot or neato. …","ref":"/hugo/docs/attrs/layout/","tags":"","title":"layout"},{"body":"An escString or an HTML label.\n","categories":"","description":"","excerpt":"An escString or an HTML label.\n","ref":"/hugo/docs/attr-types/lblstring/","tags":"","title":"lblString"},{"body":"Preferred edge length, in inches.\nSee also:\nminlen ","categories":"","description":"","excerpt":"Preferred edge length, in inches.\nSee also:\nminlen ","ref":"/hugo/docs/attrs/len/","tags":"","title":"len"},{"body":"Number of levels allowed in the multilevel scheme.\n","categories":"","description":"","excerpt":"Number of levels allowed in the multilevel scheme.\n","ref":"/hugo/docs/attrs/levels/","tags":"","title":"levels"},{"body":"Specifies strictness of level constraints in neato when mode=“ipsep” or mode=hier.\nLarger positive values mean stricter constraints, which demand more separation between levels. On the other hand, negative values will relax the constraints by allowing some overlap between the levels.\n","categories":"","description":"","excerpt":"Specifies strictness of level constraints in neato when mode=“ipsep” …","ref":"/hugo/docs/attrs/levelsgap/","tags":"","title":"levelsgap"},{"body":"Logical head of an edge.\nWhen compound is true, if lhead is defined and is the name of a cluster containing the real head, the edge is clipped to the boundary of the cluster.\ndigraph { compound=true; subgraph cluster_a { label=\"Cluster A\"; node1; node3; node5; node7; } subgraph cluster_b { label=\"Cluster B\"; node2; node4; node6; node8; } node1 -\u003e node2 [label=\"1\"]; node3 -\u003e node4 [label=\"2\" ltail=\"cluster_a\"]; node5 -\u003e node6 [label=\"3\" lhead=\"cluster_b\"]; node7 -\u003e node8 [label=\"4\" ltail=\"cluster_a\" lhead=\"cluster_b\"]; } Edit in Playground See limitation.\n","categories":"","description":"","excerpt":"Logical head of an edge.\nWhen compound is true, if lhead is defined …","ref":"/hugo/docs/attrs/lhead/","tags":"","title":"lhead"},{"body":"Height of graph or cluster label, in inches.\n","categories":"","description":"","excerpt":"Height of graph or cluster label, in inches.\n","ref":"/hugo/docs/attrs/lheight/","tags":"","title":"lheight"},{"body":"Label position, in points.\nThe position indicates the center of the label.\n","categories":"","description":"","excerpt":"Label position, in points.\nThe position indicates the center of the …","ref":"/hugo/docs/attrs/lp/","tags":"","title":"lp"},{"body":"Logical tail of an edge.\nWhen compound=true, if ltail is defined and is the name of a cluster containing the real tail, the edge is clipped to the boundary of the cluster.\ndigraph { compound=true; subgraph cluster_a { label=\"Cluster A\"; node1; node3; node5; node7; } subgraph cluster_b { label=\"Cluster B\"; node2; node4; node6; node8; } node1 -\u003e node2 [label=\"1\"]; node3 -\u003e node4 [label=\"2\" ltail=\"cluster_a\"]; node5 -\u003e node6 [label=\"3\" lhead=\"cluster_b\"]; node7 -\u003e node8 [label=\"4\" ltail=\"cluster_a\" lhead=\"cluster_b\"]; } Edit in Playground See limitation.\n","categories":"","description":"","excerpt":"Logical tail of an edge.\nWhen compound=true, if ltail is defined and …","ref":"/hugo/docs/attrs/ltail/","tags":"","title":"ltail"},{"body":"Width of graph or cluster label, in inches.\n","categories":"","description":"","excerpt":"Width of graph or cluster label, in inches.\n","ref":"/hugo/docs/attrs/lwidth/","tags":"","title":"lwidth"},{"body":"For graphs, this sets x and y margins of canvas, in inches.\nIf the margin is a single double, both margins are set equal to the given value.\nNote that the margin is not part of the drawing but just empty space left around the drawing. The margin basically corresponds to a translation of drawing, as would be necessary to center a drawing on a page. Nothing is actually drawn in the margin. To actually extend the background of a drawing, see the pad attribute.\nFor clusters, margin specifies the space between the nodes in the cluster and the cluster bounding box. By default, this is 8 points.\nFor nodes, this attribute specifies space left around the node’s label. By default, the value is 0.11,0.055.\nNodes Example: Tall Margins, Wide Margins, and Equal Margins graph { \"1.5x0.5\" [shape=rect margin=\"1.5,0.5\"] # in inches \"0.5x1.5\" [shape=rect margin=\"0.5,1.5\"] # in inches \"1.5x1.5\" [shape=rect margin=\"1.5\"] # in inches } Edit in Playground Example: Cluster and Graph Margins graph { bgcolor=lightgray margin=0 # in inches subgraph cluster_one { margin=8 # in points a b } subgraph cluster_two { margin=16 # in points c d } } Edit in Playground ","categories":"","description":"","excerpt":"For graphs, this sets x and y margins of canvas, in inches.\nIf the …","ref":"/hugo/docs/attrs/margin/","tags":"","title":"margin"},{"body":"Sets the number of iterations used.\n","categories":"","description":"","excerpt":"Sets the number of iterations used.\n","ref":"/hugo/docs/attrs/maxiter/","tags":"","title":"maxiter"},{"body":"Multiplicative scale factor used to alter the MinQuit (default = 8) and MaxIter (default = 24) parameters used during crossing minimization.\nThese correspond to the number of tries without improvement before quitting and the maximum number of iterations in each pass.\n","categories":"","description":"","excerpt":"Multiplicative scale factor used to alter the MinQuit (default = 8) …","ref":"/hugo/docs/attrs/mclimit/","tags":"","title":"mclimit"},{"body":"Specifies the minimum separation between all nodes.\n","categories":"","description":"","excerpt":"Specifies the minimum separation between all nodes.\n","ref":"/hugo/docs/attrs/mindist/","tags":"","title":"mindist"},{"body":"Minimum edge length (rank difference between head and tail).\nSee also:\nlen ","categories":"","description":"","excerpt":"Minimum edge length (rank difference between head and tail).\nSee also: …","ref":"/hugo/docs/attrs/minlen/","tags":"","title":"minlen"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo/misc/","tags":"","title":"Misc"},{"body":"Technique for optimizing the layout.\nFor neato, if mode=\"major\", neato uses stress majorization. If mode=\"KK\", neato uses a version of the gradient descent method. KK is sometimes appreciably faster for small (number of nodes \u003c 100) graphs. A significant disadvantage is that KK may cycle. If mode=\"sgd\", neato uses a version of the stochastic gradient descent method. sgd’s advantage is faster and more reliable convergence than both the previous methods, while sgd’s disadvantage is that it runs in a fixed number of iterations and may require larger values of maxiter in some graphs. There are two experimental modes in neato:\nmode=\"hier\", which adds a top-down directionality similar to the layout used in dot, and mode=\"ipsep\", which allows the graph to specify minimum vertical and horizontal distances between nodes. (See the sep attribute.) For sfdp, the default is mode=\"spring\", which corresponds to using a spring-electrical model. Setting mode=\"maxent\" causes a similar model to be run but one that also takes into account edge lengths specified by the len attribute.\n","categories":"","description":"","excerpt":"Technique for optimizing the layout.\nFor neato, if mode=\"major\", neato …","ref":"/hugo/docs/attrs/mode/","tags":"","title":"mode"},{"body":"Specifies how the distance matrix is computed for the input graph.\nThe distance matrix specifies the ideal distance between every pair of nodes. neato attemps to find a layout which best achieves these distances. By default, it uses the length of the shortest path, where the length of each edge is given by its len attribute.\nIf model=\"circuit\", neato uses the circuit resistance model to compute the distances. This tends to emphasize clusters. If model=\"subset\", neato uses the subset model. This sets the edge length to be the number of nodes that are neighbors of exactly one of the end points, and then calculates the shortest paths. This helps to separate nodes with high degree. For more control of distances, one can use model=mds. In this case, the len of an edge is used as the ideal distance between its vertices.\nA shortest path calculation is only used for pairs of nodes not connected by an edge. Thus, by supplying a complete graph, the input can specify all of the relevant distances.\n","categories":"","description":"","excerpt":"Specifies how the distance matrix is computed for the input graph.\nThe …","ref":"/hugo/docs/attrs/model/","tags":"","title":"model"},{"body":"If Graphviz is built with MOSEK defined, mode=ipsep and mosek=true, the Mosek software is use to solve the ipsep constraints.\n","categories":"","description":"","excerpt":"If Graphviz is built with MOSEK defined, mode=ipsep and mosek=true, …","ref":"/hugo/docs/attrs/mosek/","tags":"","title":"mosek"},{"body":"Whether to use a single global ranking, ignoring clusters.\nThe original ranking algorithm in dot is recursive on clusters. This can produce fewer ranks and a more compact layout, but sometimes at the cost of a head node being place on a higher rank than the tail node. It also assumes that a node is not constrained in separate, incompatible subgraphs. For example, a node cannot be in a cluster and also be constrained by rank=same with a node not in the cluster.\nThis allows nodes to be subject to multiple constraints. Rank constraints will usually take precedence over edge constraints.\n","categories":"","description":"","excerpt":"Whether to use a single global ranking, ignoring clusters.\nThe …","ref":"/hugo/docs/attrs/newrank/","tags":"","title":"newrank"},{"body":"In dot, nodesep specifies the minimum space between two adjacent nodes in the same rank, in inches.\nFor other layouts, nodesep affects the spacing between loops on a single node, or multiedges between a pair of nodes.\nSmall node separation digraph { nodesep=0.1; node1; node2; node3; } Edit in Playground Large node separation digraph { nodesep=0.5; node1; node2; node3; } Edit in Playground ","categories":"","description":"","excerpt":"In dot, nodesep specifies the minimum space between two adjacent nodes …","ref":"/hugo/docs/attrs/nodesep/","tags":"","title":"nodesep"},{"body":"By default, the justification of multi-line labels is done within the largest context that makes sense. Thus, in the label of a polygonal node, a left-justified line will align with the left side of the node (shifted by the prescribed margin). In record nodes, left-justified line will line up with the left side of the enclosing column of fields. If nojustify=true, multi-line labels will be justified in the context of itself.\nFor example, if nojustify is set, the first label line is long, and the second is shorter and left-justified, the second will align with the left-most character in the first line, regardless of how large the node might be.\n","categories":"","description":"","excerpt":"By default, the justification of multi-line labels is done within the …","ref":"/hugo/docs/attrs/nojustify/","tags":"","title":"nojustify"},{"body":"Normalizes coordinates of final layout so that the first point is at the origin, and then rotates the layout so that the angle of the first edge is specified by the value of normalize in degrees.\nIf normalize is not a number, it is evaluated as a bool, with true corresponding to 0 degrees.\nNOTE: Since the attribute is evaluated first as a number, 0 and 1 cannot be used for false and true.\n","categories":"","description":"","excerpt":"Normalizes coordinates of final layout so that the first point is at …","ref":"/hugo/docs/attrs/normalize/","tags":"","title":"normalize"},{"body":"By default, the final layout is translated so that the lower-left corner of the bounding box is at the origin.\nThis can be annoying if some nodes are pinned or if the user runs neato -n.\nTo avoid this translation, set notranslate=true.\n","categories":"","description":"","excerpt":"By default, the final layout is translated so that the lower-left …","ref":"/hugo/docs/attrs/notranslate/","tags":"","title":"notranslate"},{"body":"Sets number of iterations in network simplex applications.\nnslimit is used in computing node x coordinates.\nIf defined, # iterations = nslimit * # nodes; otherwise, # iterations = MAXINT.\n","categories":"","description":"","excerpt":"Sets number of iterations in network simplex applications.\nnslimit is …","ref":"/hugo/docs/attrs/nslimit/","tags":"","title":"nslimit"},{"body":"Sets number of iterations in network simplex applications.\nnslimit1 is used for ranking nodes.\nIf defined, # iterations = nslimit * # nodes; otherwise, # iterations = MAXINT.\n","categories":"","description":"","excerpt":"Sets number of iterations in network simplex applications.\nnslimit1 is …","ref":"/hugo/docs/attrs/nslimit1/","tags":"","title":"nslimit1"},{"body":"If ordering=\"out\", then the outedges of a node, that is, edges with the node as its tail node, must appear left-to-right in the same order in which they are defined in the input.\nIf ordering=\"in\", then the inedges of a node must appear left-to-right in the same order in which they are defined in the input.\nIf defined as a graph or subgraph attribute, the value is applied to all nodes in the graph or subgraph.\nNote that the graph attribute takes precedence over the node attribute.\n","categories":"","description":"","excerpt":"If ordering=\"out\", then the outedges of a node, that is, edges with …","ref":"/hugo/docs/attrs/ordering/","tags":"","title":"ordering"},{"body":"When used on nodes: Angle, in degrees, to rotate polygon node shapes. For any number of polygon sides, 0 degrees rotation results in a flat base.\nWhen used on graphs: If \"[lL]*\", sets graph orientation to landscape.\nUsed only if rotate is not defined.\nNode Orientations digraph { layout=neato # Render in a circular layout node [shape=house] # Make all nodes have 'house' shape 0 [orientation=0] 45 [orientation=45] 90 [orientation=90] 135 [orientation=135] 180 [orientation=180] 225 [orientation=225] 270 [orientation=270] 315 [orientation=315] 0 -\u003e 45 -\u003e 90 -\u003e 135 -\u003e 180 -\u003e 225 -\u003e 270 -\u003e 315 -\u003e 0 } Edit in Playground Landscape Graph Orientation digraph { orientation=L a -\u003e b } Edit in Playground See also:\norientation rotate ","categories":"","description":"","excerpt":"When used on nodes: Angle, in degrees, to rotate polygon node shapes. …","ref":"/hugo/docs/attrs/orientation/","tags":"","title":"orientation"},{"body":"osage draws clustered graphs.\nAs input, osage takes any graph in the dot format.\nosage draws the graph recursively. At each level, there will be a collection of nodes and a collection of cluster subgraphs. The internals of each cluster subgraph are laid out, then the cluster subgraphs and nodes at the current level are positioned relative to each other, treating each cluster subgraph as a node.\nAt each level, the nodes and cluster subgraphs are viewed as rectangles to be packed together. At present, edges are ignored during packing. Packing is done using the standard packing functions. In particular, the graph attributes pack and packmode control the layout. Each graph and cluster can specify its own values for these attributes. Remember also that a cluster inherits its attribute values from its parent graph.\nAfter all nodes and clusters, edges are routed based on the value of the splines attribute.\nPDF Manual\n","categories":"","description":"","excerpt":"osage draws clustered graphs.\nAs input, osage takes any graph in the …","ref":"/hugo/docs/layouts/osage/","tags":"","title":"osage"},{"body":" \"breadthfirst\" \"nodesfirst\" \"edgesfirst\" These specify the order in which nodes and edges are drawn in concrete output.\nThe default \"breadthfirst\" is the simplest, but when the graph layout does not avoid edge-node overlap, this mode will sometimes have edges drawn over nodes and sometimes on top of nodes.\nIf the mode \"nodesfirst\" is chosen, all nodes are drawn first, followed by the edges. This guarantees an edge-node overlap will not be mistaken for an edge ending at a node.\nOn the other hand, usually for aesthetic reasons, it may be desirable that all edges appear beneath nodes, even if the resulting drawing is ambiguous. This can be achieved by choosing \"edgesfirst\".\n","categories":"","description":"","excerpt":" \"breadthfirst\" \"nodesfirst\" \"edgesfirst\" These specify the order in …","ref":"/hugo/docs/attr-types/outputmode/","tags":"","title":"outputMode"},{"body":"Specify order in which nodes and edges are drawn.\n","categories":"","description":"","excerpt":"Specify order in which nodes and edges are drawn.\n","ref":"/hugo/docs/attrs/outputorder/","tags":"","title":"outputorder"},{"body":"Determines if and how node overlaps should be removed.\nNodes are first enlarged using the sep attribute. If true , overlaps are retained. If the value is \"scale\", overlaps are removed by uniformly scaling in x and y. If the value converts to \"false\", and it is available, Prism, a proximity graph-based algorithm, is used to remove node overlaps. This can also be invoked explicitly with overlap=prism. This technique starts with a small scaling up, controlled by the overlap_scaling attribute, which can remove a significant portion of the overlap. The prism option also accepts an optional non-negative integer suffix. This can be used to control the number of attempts made at overlap removal. By default, overlap=\"prism\" is equivalent to overlap=\"prism1000\". Setting overlap=\"prism0\" causes only the scaling phase to be run.\nIf Prism is not available, or the version of Graphviz is earlier than 2.28, \"overlap=false\" uses a Voronoi-based technique. This can always be invoked explicitly with \"overlap=voronoi\".\nIf overlap=\"scalexy\", x and y are separately scaled to remove overlaps.\nIf overlap=\"compress\", the layout will be scaled down as much as possible without introducing any overlaps, obviously assuming there are none to begin with.\n**N.B.**The remaining allowed values of overlap correspond to algorithms which, at present, can produce bad aspect ratios. In addition, we deprecate the use of the \"ortho*\" and \"portho*\".\nIf the value is \"vpsc\", overlap removal is done as a quadratic optimization to minimize node displacement while removing node overlaps.\nIf the value is \"orthoxy\" or \"orthoyx\", overlaps are moved by optimizing two constraint problems, one for the x axis and one for the y. The suffix indicates which axis is processed first. If the value is “ortho”, the technique is similar to “orthoxy” except a heuristic is used to reduce the bias between the two passes. If the value is \"ortho_yx\", the technique is the same as \"ortho\", except the roles of x and y are reversed. The values \"portho\", \"porthoxy\", \"porthoxy\", and \"portho_yx\" are similar to the previous four, except only pseudo-orthogonal ordering is enforced.\nIf the layout is done by neato with mode=“ipsep”, then one can use overlap=ipsep. In this case, the overlap removal constraints are incorporated into the layout algorithm itself. N.B. At present, this only supports one level of clustering.\nExcept for fdp and sfdp, the layouts assume overlap=\"true\" as the default. Fdp first uses a number of passes using a built-in, force-directed technique to try to remove overlaps. Thus, fdp accepts overlap with an integer prefix followed by a colon, specifying the number of tries. If there is no prefix, no initial tries will be performed. If there is nothing following a colon, none of the above methods will be attempted. By default, fdp uses overlap=\"9:prism\". Note that overlap=\"true\", overlap=\"0:true\" and overlap=\"0:\" all turn off all overlap removal.\nBy default, sfdp uses overlap=\"prism0\".\nExcept for the Voronoi and prism methods, all of these transforms preserve the orthogonal ordering of the original layout. That is, if the x coordinates of two nodes are originally the same, they will remain the same, and if the x coordinate of one node is originally less than the x coordinate of another, this relation will still hold in the transformed layout. The similar properties hold for the y coordinates. This is not quite true for the \"porth*\" cases. For these, orthogonal ordering is only preserved among nodes related by an edge.\n","categories":"","description":"","excerpt":"Determines if and how node overlaps should be removed.\nNodes are first …","ref":"/hugo/docs/attrs/overlap/","tags":"","title":"overlap"},{"body":"When overlap=prism, the layout is scaled by this factor, thereby removing a fair amount of node overlap, and making node overlap removal faster and better able to retain the graph’s shape.\nIf overlap_scaling is negative, the layout is scaled by -1*overlap_scaling times the average label size.\nIf overlap_scaling is positive, the layout is scaled by overlap_scaling.\nIf overlap_scaling is zero, no scaling is done.\n","categories":"","description":"","excerpt":"When overlap=prism, the layout is scaled by this factor, thereby …","ref":"/hugo/docs/attrs/overlap_scaling/","tags":"","title":"overlap_scaling"},{"body":"Whether the overlap removal algorithm should perform a compression pass to reduce the size of the layout.\n","categories":"","description":"","excerpt":"Whether the overlap removal algorithm should perform a compression …","ref":"/hugo/docs/attrs/overlap_shrink/","tags":"","title":"overlap_shrink"},{"body":"Whether each connected component of the graph should be laid out separately, and then the graphs packed together.\nIf pack has an integral value, this is used as the size, in points,of a margin around each part; otherwise, a default margin of 8 is used.\nIf pack is interpreted as false, the entire graph is laid out together. The granularity and method of packing is influenced by the packmode attribute.\nFor layouts which always do packing, such as twopi, the pack attribute is just used to set the margin.\npack is treated as true if the value of pack is true (case-insensitive) or a non-negative integer.\n","categories":"","description":"","excerpt":"Whether each connected component of the graph should be laid out …","ref":"/hugo/docs/attrs/pack/","tags":"","title":"pack"},{"body":"This indicates how connected components should be packed (cf. packMode). Note that defining packmode will automatically turn on packing as though one had set pack=true.\n","categories":"","description":"","excerpt":"This indicates how connected components should be packed (cf. …","ref":"/hugo/docs/attrs/packmode/","tags":"","title":"packmode"},{"body":" \"node\" \"clust\" \"graph\" \"array(_flags)?(%d)?\" The modes \"node\", \"clust\" or \"graph\" specify that the components should be packed together tightly, using the specified granularity. A value of \"node\" causes packing at the node and edge level, with no overlapping of these objects. This produces a layout with the least area, but it also allows interleaving, where a node of one component may lie between two nodes in another component. A value of \"graph\" does a packing using the bounding box of the component. Thus, there will be a rectangular region around a component free of elements of any other component. A value of “clust” guarantees that top-level clusters are kept intact. What effect a value has also depends on the layout algorithm. For example, neato does not support clusters, so a value of \"clust\" will have the same effect as the default \"node\" value.\nThe mode \"array(_flag)?(%d)?\" indicates that the components should be packed at the graph level into an array of graphs. By default, the components are in row-major order, with the number of columns roughly the square root of the number of components. If the optional flags contains 'c', then column-major order is used. Finally, if the optional integer suffix is used, this specifies the number of columns for row-major or the number of rows for column-major. Thus, the mode \"array_c4\" indicates array packing, with 4 rows, starting in the upper left and going down the first column, then down the second column, etc., until all components are used.\nIf a graph is smaller than the array cell it occupies, it is centered by default. The optional flags may contain 't', 'b', 'l', or 'r', indicating that the graphs should be aligned along the top, bottom, left or right, respectively.\nIf the optional flags contains 'u', this causes the insertion order of elements in the array to be determined by user-supplied values. Each component can specify its sort value by a non-negative integer using the sortv attribute. Components are inserted in order, starting with the one with the smallest sort value. If no sort value is specified, zero is used.\n","categories":"","description":"","excerpt":" \"node\" \"clust\" \"graph\" \"array(_flags)?(%d)?\" The modes \"node\", …","ref":"/hugo/docs/attr-types/packmode/","tags":"","title":"packMode"},{"body":"Specifies how much, in inches, to extend the drawing area around the minimal area needed to draw the graph.\nIf pad is a single double, both the x and y pad values are set equal to the given value. This area is part of the drawing and will be filled with the background color, if appropriate.\nNormally, a small pad is used for aesthetic reasons, especially when a background color is used, to avoid having nodes and edges abutting the boundary of the drawn region.\n","categories":"","description":"","excerpt":"Specifies how much, in inches, to extend the drawing area around the …","ref":"/hugo/docs/attrs/pad/","tags":"","title":"pad"},{"body":"Width and height of output pages, in inches.\nIf only a single value is given, this is used for both the width and height.\nIf page is set and is smaller than the size of the layout, a rectangular array of pages of the specified page size is overlaid on the layout, with origins aligned in the lower-left corner, thereby partitioning the layout into pages. The pages are then produced one at a time, in pagedir order.\nAt present, page only works for PostScript output. For other types of output, use another tool to split the output into multiple output files, or use viewport to generate multiple files.\n","categories":"","description":"","excerpt":"Width and height of output pages, in inches.\nIf only a single value is …","ref":"/hugo/docs/attrs/page/","tags":"","title":"page"},{"body":" \"BL\" \"BR\" \"TL\" \"TR\" \"RB\" \"RT\" \"LB\" \"LT\" These specify the 8 row or column major orders for traversing a rectangular array, the first character corresponding to the major order and the second to the minor order. Thus, for “BL”, the major order is from bottom to top, and the minor order is from left to right. This means the bottom row is traversed first, from left to right, then the next row up, from left to right, and so on, until the topmost row is traversed.\n","categories":"","description":"Page Direction","excerpt":"Page Direction","ref":"/hugo/docs/attr-types/pagedir/","tags":"","title":"pagedir"},{"body":"The order in which pages are emitted.\nUsed only if page is set and applicable.\nLimited to one of the 8 row or column major orders.\n","categories":"","description":"","excerpt":"The order in which pages are emitted.\nUsed only if page is set and …","ref":"/hugo/docs/attrs/pagedir/","tags":"","title":"pagedir"},{"body":"patchwork draws clustered graphs using a squarified treemap layout.\nAs input, patchwork takes any graph in the dot format.\nEach cluster is given an area based on the areas specified by the clusters and nodes it contains. The areas of nodes and empty clusters can be specified by the area attribute. The default area is 1.\nThe root graph is laid out as a square. Then, recursively, the region of a cluster or graph is partitioned among its top-level nodes and clusters, with each given a roughly square subregion with its specified area.\nPDF Manual\n","categories":"","description":"","excerpt":"patchwork draws clustered graphs using a squarified treemap layout.\nAs …","ref":"/hugo/docs/layouts/patchwork/","tags":"","title":"patchwork"},{"body":"Produces PDF output. (This option assumes Graphviz includes the Cairo renderer.) Alternatively, one can use the ps2 option to produce PDF-compatible PostScript, and then use a ps-to-pdf converter.\n","categories":"","description":"Portable Document Format","excerpt":"Portable Document Format","ref":"/hugo/docs/outputs/pdf/","tags":"","title":"PDF"},{"body":"Color used to draw the bounding box around a cluster.\nIf pencolor is not defined, color is used.\nIf color is not defined, bgcolor is used.\nIf bgcolor is not defined, the default is used.\nNote that a cluster inherits the root graph’s attributes if defined. Thus, if the root graph has defined a pencolor, this will override a color or bgcolor attribute set for the cluster.\n","categories":"","description":"","excerpt":"Color used to draw the bounding box around a cluster.\nIf pencolor is …","ref":"/hugo/docs/attrs/pencolor/","tags":"","title":"pencolor"},{"body":"Specifies the width of the pen, in points, used to draw lines and curves, including the boundaries of edges and clusters.\npenwidth value is inherited by subclusters, and has no effect on text.\nPrevious to 31 January 2008, the effect of penwidth=W was achieved by including setlinewidth(W) as part of a style specification.\nIf both attributes are set, penwidth will be used.\n","categories":"","description":"","excerpt":"Specifies the width of the pen, in points, used to draw lines and …","ref":"/hugo/docs/attrs/penwidth/","tags":"","title":"penwidth"},{"body":"Set number of peripheries used in polygonal shapes and cluster boundaries.\nNote that user-defined shapes are treated as a form of box shape, so the default peripheries value is 1 and the user-defined shape will be drawn in a bounding rectangle. Setting peripheries=0 will turn this off.\nperipheries=1 is the maximum value for clusters.\n","categories":"","description":"","excerpt":"Set number of peripheries used in polygonal shapes and cluster …","ref":"/hugo/docs/attrs/peripheries/","tags":"","title":"peripheries"},{"body":"Output is given in the text-based PIC language developed for troff. See PIC language.\nExample outputs of a simple graph with two nodes connected with an edge: $ echo 'digraph { a-\u003eb }' | dot -Tpic # Creator: graphviz version 2.47.1 (20210417.1919) # Title: %3 # save point size and font .nr .S \\n(.s .nr DF \\n(.f .PS 0.86111 1.61111 # to change drawing size, multiply the width and height on the .PS line above and the number on the two lines below (rounded to the nearest integer) by a scale factor .nr SF 861 scalethickness = 861 # don't change anything below this line in this drawing # non-fatal run-time pic version determination, version 2 boxrad=2.0 # will be reset to 0.0 by gpic only scale=1.0 # required for comparisons # boxrad is now 0.0 in gpic, else it remains 2.0 # dashwid is 0.1 in 10th Edition, 0.05 in DWB 2 and in gpic # fillval is 0.3 in 10th Edition (fill 0 means black), 0.5 in gpic (fill 0 means white), undefined in DWB 2 # fill has no meaning in DWB 2, gpic can use fill or filled, 10th Edition uses fill only # DWB 2 doesn't use fill and doesn't define fillval # reset works in gpic and 10th edition, but isn't defined in DWB 2 # DWB 2 compatibility definitions if boxrad \u003e 1.0 \u0026\u0026 dashwid \u003c 0.075 then X fillval = 1; define fill Y Y; define solid Y Y; define reset Y scale=1.0 Y; X reset # set to known state # GNU pic vs. 10th Edition d\\(e'tente if fillval \u003e 0.4 then X define setfillval Y fillval = 1 - Y; define bold Y thickness 2 Y; # if you use gpic and it barfs on encountering \"solid\", # install a more recent version of gpic or switch to DWB or 10th Edition pic; # sorry, the groff folks changed gpic; send any complaint to them; X else Z define setfillval Y fillval = Y; define bold Y Y; define filled Y fill Y; Z # arrowhead has no meaning in DWB 2, arrowhead = 7 makes filled arrowheads in gpic and in 10th Edition # arrowhead is undefined in DWB 2, initially 1 in gpic, 2 in 10th Edition arrowhead = 7 # not used by graphviz # GNU pic supports a boxrad variable to draw boxes with rounded corners; DWB and 10th Ed. do not boxrad = 0 # no rounded corners in graphviz # GNU pic supports a linethick variable to set line thickness; DWB and 10th Ed. do not linethick = 0; oldlinethick = linethick # .PS w/o args causes GNU pic to scale drawing to fit 8.5x11 paper; DWB does not # maxpsht and maxpswid have no meaning in DWB 2.0, set page boundaries in gpic and in 10th Edition # maxpsht and maxpswid are predefined to 11.0 and 8.5 in gpic maxpsht = 1.611111 maxpswid = 0.861111 Dot: [ define attrs0 % %; define unfilled % %; define rounded % %; define diagonals % % move to (0, 0); line to (0, 116); line to (62, 116); line to (62, 0); line to (0, 0) # a ellipse attrs0 wid 0.75000 ht 0.50000 at (0.43056,1.30556); .ft R .ps 14*\\n(SFu/861u \"a\" at (27.54861,87.56481); # b ellipse attrs0 wid 0.75000 ht 0.50000 at (0.43056,0.30556); \"b\" at (27.54861,15.56481); # a-\u003eb move to (31, 76); spline to (31, 72); spline to (31, 68); spline to (31, 63); spline to (31, 59); spline to (31, 54); spline to (31, 50) move to (35, 50); line to (31, 40); line to (28, 50); line to (35, 50) ] .PE # restore point size and font .ps \\n(.S .ft \\n(DF ","categories":"","description":"Brian Kernighan's Diagram Language","excerpt":"Brian Kernighan's Diagram Language","ref":"/hugo/docs/outputs/pic/","tags":"","title":"PIC"},{"body":"Output in the Apple PICT file format.\n","categories":"","description":"Apple PICT","excerpt":"Apple PICT","ref":"/hugo/docs/outputs/pct/","tags":"","title":"PICT"},{"body":"Keeps the node at the node’s given input position.\nIf true and the node has a pos attribute on input, neato or fdp prevents the node from moving from the input position. This property can also be specified in the pos attribute itself (cf. the point type).\nNote: Due to an artifact of the implementation, previous to 27 Feb 2014, final coordinates are translated to the origin. Thus, if you look at the output coordinates given in the (x)dot or plain format, pinned nodes will not have the same output coordinates as were given on input. If this is important, a simple workaround is to maintain the coordinates of a pinned node. The vector difference between the old and new coordinates will give the translation, which can then be subtracted from all of the appropriate coordinates.\nAfter 27 Feb 2014, this translation can be avoided in neato by setting notranslate=true. However, if the graph specifies node overlap removal or a change in aspect ratio, node coordinates may still change.\n","categories":"","description":"","excerpt":"Keeps the node at the node’s given input position.\nIf true and the …","ref":"/hugo/docs/attrs/pin/","tags":"","title":"pin"},{"body":"The plain and plain-ext formats produce output using a simple, line-based language. The latter format differs in that, on edges, it provides port names on head and tail nodes when applicable.\nExample outputs of a simple graph with two nodes connected with an edge:\n-Tplain $ echo 'digraph { a-\u003eb }' | dot -Tplain graph 1 0.75 1.5 node a 0.375 1.25 0.75 0.5 a solid ellipse black lightgrey node b 0.375 0.25 0.75 0.5 b solid ellipse black lightgrey edge a b 4 0.375 0.99579 0.375 0.88865 0.375 0.7599 0.375 0.64045 solid black stop -Tplain-ext $ echo 'digraph { a-\u003eb }' | dot -Tplain-ext graph 1 0.75 1.5 node a 0.375 1.25 0.75 0.5 a solid ellipse black lightgrey node b 0.375 0.25 0.75 0.5 b solid ellipse black lightgrey edge a b 4 0.375 0.99579 0.375 0.88865 0.375 0.7599 0.375 0.64045 solid black stop There are four types of statements.\ngraph scale width height node name x y width height label style shape color fillcolor edge tail head n x₁ y₁ .. xₙ yₙ [label xl yl] style color stop graph The width and height values give the width and height of the drawing. The lower left corner of the drawing is at the origin. The scale value indicates how the drawing should be scaled if a size attribute was given and the drawing needs to be scaled to conform to that size. If no scaling is necessary, it will be set to 1.0. Note that all graph, node and edge coordinates and lengths are given unscaled. node The name value is the name of the node, and x and y give the node’s position. The width and height are the width and height of the node. The label, style, shape, color and fillcolor give the node’s label, style, shape, color and fillcolor, respectively, using attribute default values where necessary. If the node does not have a style attribute, “solid” is used. edge The tail and head values give the names of the head and tail nodes. In plain-ext format, the head or tail name will be appended with a colon and a portname if the edge connects to the node at a port. n is the number of control points defining the B-spline forming the edge. This is followed by 2*n numbers giving the x and y coordinates of the control points in order from tail to head. If the edge has a label, this comes next followed by the x and y coordinates of the label’s position. The edge description is completed by the edge’s style and color. As with nodes, if a style is not defined, “solid” is used. Note: The control points given in an edge statement define the body of the edge. In particular, if the edge has an arrowhead to the head or tail node, there will be a gap between the last or first control points and the boundary of the associated node. There are at least 3 possible ways of handling this gap:\nArrange that the input graph uses dir=none, arrowhead=none, or arrowtail=none for all edges. In this case, the terminating control points will always touch the node. Consider the line segment joining the control point and the center of the node, and determine the point where the segment intersects the node’s boundary. Then use the control point and the intersection point as the main axis of an arrowhead. The problem with this approach is that, if the edge has a port, the edge will not be pointing to the center of the node. In this case, rather than use the control point and center point, one can use the control point and its tangent. Arrange that the input graph uses headclip=false or tailclip=false. In this case, the edge will terminate at the node’s center rather than its boundary. If arrowheads are used, there will still be a gap, but normally this will occur within the node. The application will still need to clip the spline to the node boundary. Also, as with the previous item, if the edge points to a node port, this technique will fail. The output consists of one graph line, a sequence of node lines, one per node, a sequence of edge lines, one per edge, and a final stop line. All units are in inches, represented by a floating point number.\nNote that the plain formats provide minimal information, really giving not much more than node positions and sizes, and edge spline control points. These formats are usually most useful to applications wanting just this geometric information, and willing to fill in all of the graphical details. The only real advantages to these formats is their terseness and their ease of parsing. In general, the dot and xdot are preferable in terms of the quantity of information provided.\n","categories":"","description":"Simple, line-based language","excerpt":"Simple, line-based language","ref":"/hugo/docs/outputs/plain/","tags":"","title":"Plain Text"},{"body":"Produces output in the PNG (Portable Network Graphics) format.\n(25 November 2014) A standard Graphviz installation will render using both the Cairo and GD library. By mixing the rendering and formatting of these libraries, one can achieve different variations in the output.\n-Tpng:gd (or -Tpng:gd:gd) Indexed color, no antialiasing -Tpng:cairo:gd Indexed color, with antialiasing -Tpng (or -Tpng:cairo) True color, with antialiasing These options are listed in increasing order of image quality and output size.\n","categories":"","description":"Portable Network Graphics","excerpt":"Portable Network Graphics","ref":"/hugo/docs/outputs/png/","tags":"","title":"PNG"},{"body":"\"%f,%f('!')?\" representing the point (x,y). The optional '!' indicates the node position should not change (input-only).\nIf dim=3, point may also have the format \"%f,%f,%f('!')?\" to represent the point (x,y,z).\n","categories":"","description":"","excerpt":"\"%f,%f('!')?\" representing the point (x,y). The optional '!' indicates …","ref":"/hugo/docs/attr-types/point/","tags":"","title":"point"},{"body":"A list of points, separated by spaces.\n","categories":"","description":"","excerpt":"A list of points, separated by spaces.\n","ref":"/hugo/docs/attr-types/pointlist/","tags":"","title":"pointList"},{"body":"modifier indicating where on a node an edge should be aimed. It has the form portname(:compass_point)? or compass_point. If the first form is used, the corresponding node must either have record shape with one of its fields having the given portname, or have an HTML-like label, one of whose components has a PORT attribute set to portname.\nIf a compass point is used, it must have the form \"n\",\"ne\",\"e\",\"se\",\"s\",\"sw\",\"w\",\"nw\",\"c\",\"_\". This modifies the edge placement to aim for the corresponding compass point on the port or, in the second form where no portname is supplied, on the node itself. The compass point “c” specifies the center of the node or port. The compass point \"_\" specifies that an appropriate side of the port adjacent to the exterior of the node should be used, if such exists. Otherwise, the center is used. If no compass point is used with a portname, the default value is \"_\".\nThis attribute can be attached to an edge using the headport and tailport attributes, or as part of the edge description as in\ndigraph { node1:port1 -\u003e node2:port5:nw; } Edit in Playground Note that it is legal to have a portname the same as one of the compass points. In this case, this reference will be resolved to the port. Thus, if node A has a port w, then headport=w will refer to the port and not the compass point. At present, in this case, there is no way to specify that the compass point should be used.\n","categories":"","description":"Port Position","excerpt":"Port Position","ref":"/hugo/docs/attr-types/portpos/","tags":"","title":"portPos"},{"body":"Position of node, or spline control points.\nFor nodes, the position indicates the center of the node. On output, the coordinates are in points.\nIn neato and fdp, pos can be used to set the initial position of a node. By default, the coordinates are assumed to be in inches. However, the -s command line flag can be used to specify different units. As the output coordinates are in points, feeding the output of a graph laid out by a Graphviz program into neato or fdp will almost always require the -s flag.\nWhen the -n command line flag is used with neato, it is assumed the positions have been set by one of the layout programs, and are therefore in points. Thus, neato -n can accept input correctly without requiring a -s flag and, in fact, ignores any such flag.\n","categories":"","description":"","excerpt":"Position of node, or spline control points.\nFor nodes, the position …","ref":"/hugo/docs/attrs/pos/","tags":"","title":"pos"},{"body":"Scene-description language for 3D modelling for the Persistence of Vision Raytracer.\nExample: simple graph, rendered with -Tpov $ echo 'digraph { a-\u003eb }' | dot -Tpov #version 3.6; global_settings { assumed_gamma 1.0 } #default { finish { ambient 0.1 diffuse 0.9 } } #include \"colors.inc\" #include \"textures.inc\" #include \"shapes.inc\" #declare black = Black; #declare white = White; //*** begin_graph %3 camera { location \u003c31.000 , 58.000 , -500.000\u003e look_at \u003c31.000 , 58.000 , 0.000\u003e right x * image_width / image_height angle 15.880 } //sky plane { \u003c0, 1, 0\u003e, 1 hollow texture { pigment { bozo turbulence 0.95 color_map { [0.00 rgb \u003c0.05, 0.20, 0.50\u003e] [0.50 rgb \u003c0.05, 0.20, 0.50\u003e] [0.75 rgb \u003c1.00, 1.00, 1.00\u003e] [0.75 rgb \u003c0.25, 0.25, 0.25\u003e] [1.00 rgb \u003c0.50, 0.50, 0.50\u003e] } scale \u003c1.00, 1.00, 1.50\u003e * 2.50 translate \u003c0.00, 0.00, 0.00\u003e } finish { ambient 1 diffuse 0 } } scale 10000 } //mist fog { fog_type 2 distance 50 color rgb \u003c1.00, 1.00, 1.00\u003e * 0.75 fog_offset 0.10 fog_alt 1.50 turbulence 1.75 } //gnd plane { \u003c0.00, 1.00, 0.00\u003e, 0 texture { pigment{ color rgb \u003c0.25, 0.45, 0.00\u003e } normal { bumps 0.75 scale 0.01 } finish { phong 0.10 } } } light_source { \u003c1500,3000,-2500\u003e color White } //*** begin_page //*** comment: a //*** begin_node: a //*** ellipse torus { 1.000, 0.056 scale \u003c 27.000, 11.250, 18.000\u003e rotate \u003c 90.000, 0.000, 0.000\u003e translate\u003c 31.000, 94.000, -6.000\u003e pigment { color black transmit 0.000 } } //*** textspan: a, fontsize = 14.000, fontname = Times-Roman text { ttf \"Times-Roman\", \"a\", 0.250, 0.000 no_shadow scale 14.000 rotate \u003c 0.000, 0.000, 0.000\u003e translate\u003c 27.500, 87.500, -9.000\u003e pigment { color black transmit 0.000 } } //*** end_node //*** comment: b //*** begin_node: b //*** ellipse torus { 1.000, 0.056 scale \u003c 27.000, 11.250, 18.000\u003e rotate \u003c 90.000, 0.000, 0.000\u003e translate\u003c 31.000, 22.000, -6.000\u003e pigment { color black transmit 0.000 } } //*** textspan: b, fontsize = 14.000, fontname = Times-Roman text { ttf \"Times-Roman\", \"b\", 0.250, 0.000 no_shadow scale 14.000 rotate \u003c 0.000, 0.000, 0.000\u003e translate\u003c 27.500, 15.500, -9.000\u003e pigment { color black transmit 0.000 } } //*** end_node //*** comment: a-\u003eb //*** begin_edge //*** bezier sphere_sweep { b_spline 6, \u003c 31.000, 75.697, 0.000\u003e, 1.000 \u003c 31.000, 75.697, 0.000\u003e, 1.000 \u003c 31.000, 67.983, 0.000\u003e, 1.000 \u003c 31.000, 58.712, 0.000\u003e, 1.000 \u003c 31.000, 50.112, 0.000\u003e, 1.000 \u003c 31.000, 50.112, 0.000\u003e, 1.000 tolerance 0.01 scale \u003c 1.000, 1.000, 1.000\u003e rotate \u003c 0.000, 0.000, 0.000\u003e translate\u003c 0.000, 0.000, -11.000\u003e pigment { color black transmit 0.000 } } //*** polygon sphere_sweep { linear_spline 4, \u003c 34.500, 50.104, 0.000\u003e, 1.000 \u003c 31.000, 40.104, 0.000\u003e, 1.000 \u003c 27.500, 50.104, 0.000\u003e, 1.000 \u003c 34.500, 50.104, 0.000\u003e, 1.000 tolerance 0.1 scale \u003c 1.000, 1.000, 1.000\u003e rotate \u003c 0.000, 0.000, 0.000\u003e translate\u003c 0.000, 0.000, -9.000\u003e pigment { color black transmit 0.000 } } polygon { 3, \u003c 34.500, 50.104, 0.000\u003e \u003c 31.000, 40.104, 0.000\u003e \u003c 27.500, 50.104, 0.000\u003e scale \u003c 1.000, 1.000, 1.000\u003e rotate \u003c 0.000, 0.000, 0.000\u003e translate\u003c 0.000, 0.000, -9.000\u003e pigment { color black transmit 0.250 } } //*** end_edge //*** end_page //*** end_graph ","categories":"","description":"Persistence of Vision Raytracer (prototype)","excerpt":"Persistence of Vision Raytracer (prototype)","ref":"/hugo/docs/outputs/pov/","tags":"","title":"POV-Ray"},{"body":"Produces PostScript output.\nNote: The default PostScript renderer can only handle the Latin-1 character set. To get non-Latin-1 characters into PostScript output, use -Tps:cairo, assuming your version was built with the Cairo renderer.\n","categories":"","description":"Adobe PostScript","excerpt":"Adobe PostScript","ref":"/hugo/docs/outputs/ps/","tags":"","title":"PS"},{"body":"Produces PostScript output with PDF notations.\nIt is assumed the output will be directly converted into PDF format. The notations include PDF bounding box information, so that the resulting PDF file can be correctly used with pdf tools, such as pdflatex. In addition, if a node has a URL attribute, this gets translated into PDF code such that the node, when viewed in a PDF-viewer, e.g., Adobe Acrobat, is a link to the given URL. If a URL is attached to the graph, this serves as a base, such that relative URLs on nodes are derived from it.\n","categories":"","description":"Adobe PostScript for Portable Document Format","excerpt":"Adobe PostScript for Portable Document Format","ref":"/hugo/docs/outputs/ps2/","tags":"","title":"PS/PDF"},{"body":"Output in the Adobe PhotoShop PSD file format.\n","categories":"","description":"Photoshop","excerpt":"Photoshop","ref":"/hugo/docs/outputs/psd/","tags":"","title":"PSD"},{"body":"Quadtree scheme to use.\nquadtree=true aliases quadtree=normal quadtree=false aliases quadtree=none quadtree=2 aliases quadtree=fast ","categories":"","description":"","excerpt":"Quadtree scheme to use.\nquadtree=true aliases quadtree=normal …","ref":"/hugo/docs/attrs/quadtree/","tags":"","title":"quadtree"},{"body":" \"normal\" \"fast\" \"none\". Using \"fast\" gives about a 2-4 times overall speedup compared with \"normal\", though layout quality can suffer a little.\n","categories":"","description":"","excerpt":" \"normal\" \"fast\" \"none\". Using \"fast\" gives about a 2-4 times overall …","ref":"/hugo/docs/attr-types/quadtype/","tags":"","title":"quadType"},{"body":"If quantum \u003e 0.0, node label dimensions will be rounded to integral multiples of the quantum.\n","categories":"","description":"","excerpt":"If quantum \u003e 0.0, node label dimensions will be rounded to integral …","ref":"/hugo/docs/attrs/quantum/","tags":"","title":"quantum"},{"body":"Rank constraints on the nodes in a subgraph.\nIf rank=\"same\", all nodes are placed on the same rank. If rank=\"min\", all nodes are placed on the minimum rank. If rank=\"source\", all nodes are placed on the minimum rank, and the only nodes on the minimum rank belong to some subgraph with rank=\"source\" or rank=\"min\". Analogous criteria hold for rank=\"max\" and rank=\"sink\".\n(Note: the minimum rank is topmost or leftmost, and the maximum rank is bottommost or rightmost.)\nFor more information check this answer in Stack Overflow\n","categories":"","description":"","excerpt":"Rank constraints on the nodes in a subgraph.\nIf rank=\"same\", all nodes …","ref":"/hugo/docs/attrs/rank/","tags":"","title":"rank"},{"body":" \"TB\" \"LR\" \"BT\" \"RL\" Corresponding to directed graphs drawn from top to bottom, from left to right, from bottom to top, and from right to left, respectively.\n","categories":"","description":"Rank Direction","excerpt":"Rank Direction","ref":"/hugo/docs/attr-types/rankdir/","tags":"","title":"rankdir"},{"body":"Sets direction of graph layout.\nFor example, if rankdir=\"LR\", and barring cycles, an edge T -\u003e H; will go from left to right. By default, graphs are laid out from top to bottom.\nThis attribute also has a side-effect in determining how record nodes are interpreted. See record shapes.\nTop to bottom (default) digraph { rankdir=\"TB\" a -\u003e b -\u003e c; } Edit in Playground Bottom to top digraph { rankdir=\"BT\" a -\u003e b -\u003e c; } Edit in Playground Left to right digraph { rankdir=\"LR\" a -\u003e b -\u003e c; } Edit in Playground Right to left digraph { rankdir=\"RL\" a -\u003e b -\u003e c; } Edit in Playground ","categories":"","description":"","excerpt":"Sets direction of graph layout.\nFor example, if rankdir=\"LR\", and …","ref":"/hugo/docs/attrs/rankdir/","tags":"","title":"rankdir"},{"body":"In dot, sets the desired rank separation, in inches.\nThis is the minimum vertical distance between the bottom of the nodes in one rank and the tops of nodes in the next. If the value contains equally, the centers of all ranks are spaced equally apart. Note that both settings are possible, e.g., ranksep=\"1.2 equally\".\nIn twopi, this attribute specifies the radial separation of concentric circles. For twopi, ranksep can also be a list of doubles. The first double specifies the radius of the inner circle; the second double specifies the increase in radius from the first circle to the second; etc. If there are more circles than numbers, the last number is used as the increment for the remainder.\n","categories":"","description":"","excerpt":"In dot, sets the desired rank separation, in inches.\nThis is the …","ref":"/hugo/docs/attrs/ranksep/","tags":"","title":"ranksep"},{"body":" \"same\" \"min\" \"source\" \"max\" \"sink\" ","categories":"","description":"","excerpt":" \"same\" \"min\" \"source\" \"max\" \"sink\" ","ref":"/hugo/docs/attr-types/ranktype/","tags":"","title":"rankType"},{"body":"Sets the aspect ratio (drawing height/drawing width) for the drawing.\nNote that this is adjusted before the size attribute constraints are enforced.\nIn addition, the calculations usually ignore the node sizes, so the final drawing size may only approximate what is desired.\nIf ratio is numeric, ratio is taken as the desired aspect ratio. Then, if the actual aspect ratio is less than the desired ratio, the drawing height is scaled up to achieve the desired ratio; if the actual ratio is greater than that desired ratio, the drawing width is scaled up.\nIf ratio=\"fill\" and the size attribute is set, node positions are scaled, separately in both x and y, so that the final drawing exactly fills the specified size. If both size values exceed the width and height of the drawing, then both coordinate values of each node are scaled up accordingly. However, if either size dimension is smaller than the corresponding dimension in the drawing, one dimension is scaled up so that the final drawing has the same aspect ratio as specified by size. Then, when rendered, the layout will be scaled down uniformly in both dimensions to fit the given size, which may cause nodes and text to shrink as well. This may not be what the user wants, but it avoids the hard problem of how to reposition the nodes in an acceptable fashion to reduce the drawing size.\nIf ratio=\"compress\" and the size attribute is set, dot attempts to compress the initial layout to fit in the given size. This achieves a tighter packing of nodes but reduces the balance and symmetry. This feature only works in dot.\nIf ratio=\"expand\", the size attribute is set, and both the width and the height of the graph are less than the value in size, node positions are scaled uniformly until at least one dimension fits size exactly. Note that this is distinct from using size as the desired size, as here the drawing is expanded before edges are generated and all node and text sizes remain unchanged.\nIf ratio=\"auto\", the page attribute is set and the graph cannot be drawn on a single page, then size is set to an “ideal” value.\nIn particular, the size in a given dimension will be the smallest integral multiple of the page size in that dimension which is at least half the current size. The two dimensions are then scaled independently to the new size. This feature only works in dot.\n","categories":"","description":"","excerpt":"Sets the aspect ratio (drawing height/drawing width) for the drawing. …","ref":"/hugo/docs/attrs/ratio/","tags":"","title":"ratio"},{"body":"\"%f,%f,%f,%f\"\nThe rectangle llx,lly,urx,ury gives the coordinates, in points, of the lower-left corner (llx,lly) and the upper-right corner (urx,ury).\n","categories":"","description":"","excerpt":"\"%f,%f,%f,%f\"\nThe rectangle llx,lly,urx,ury gives the coordinates, in …","ref":"/hugo/docs/attr-types/rect/","tags":"","title":"rect"},{"body":"Rectangles for fields of records, in points.\n","categories":"","description":"","excerpt":"Rectangles for fields of records, in points.\n","ref":"/hugo/docs/attrs/rects/","tags":"","title":"rects"},{"body":"If true, force polygon to be regular, i.e., the vertices of the polygon will lie on a circle whose center is the center of the node.\ndigraph { \"pentagon1\" [shape=\"pentagon\"]; \"pentagon2\" [shape=\"pentagon\" regular=true] \"hexagon1\" [shape=\"hexagon\"]; \"hexagon2\" [shape=\"hexagon\" regular=true]; } Edit in Playground ","categories":"","description":"","excerpt":"If true, force polygon to be regular, i.e., the vertices of the …","ref":"/hugo/docs/attrs/regular/","tags":"","title":"regular"},{"body":"If true and there are multiple clusters, run crossing minimization a second time.\n","categories":"","description":"","excerpt":"If true and there are multiple clusters, run crossing minimization a …","ref":"/hugo/docs/attrs/remincross/","tags":"","title":"remincross"},{"body":"The power of the repulsive force used in an extended Fruchterman-Reingold force directed model. Values larger than 1 tend to reduce the warping effect at the expense of less clustering.\n","categories":"","description":"","excerpt":"The power of the repulsive force used in an extended …","ref":"/hugo/docs/attrs/repulsiveforce/","tags":"","title":"repulsiveforce"},{"body":"Synonym for dpi.\n","categories":"","description":"","excerpt":"Synonym for dpi.\n","ref":"/hugo/docs/attrs/resolution/","tags":"","title":"resolution"},{"body":"Specifies nodes to be used as the center of the layout and the root of the generated spanning tree.\nAs a graph attribute, this gives the name of the node. As a node attribute, it specifies that the node should be used as a central node. In twopi, root will actually be the central node. In circo, the block containing the node will be central in the drawing of its connected component. If not defined, twopi will pick a most central node, and circo will pick a random node.\nIf the root attribute is defined as the empty string, twopi will reset it to name of the node picked as the root node.\nFor twopi, it is possible to have multiple roots, presumably one for each component. If more than one node in a component is marked as the root, twopi will pick one.\n","categories":"","description":"","excerpt":"Specifies nodes to be used as the center of the layout and the root of …","ref":"/hugo/docs/attrs/root/","tags":"","title":"root"},{"body":"If rotate=90, sets drawing orientation to landscape.\nRotations digraph { rotate=90 a -\u003e b } Edit in Playground See also:\nlandscape orientation ","categories":"","description":"","excerpt":"If rotate=90, sets drawing orientation to landscape.\nRotations digraph …","ref":"/hugo/docs/attrs/rotate/","tags":"","title":"rotate"},{"body":"Rotates the final layout counter-clockwise by the specified number of degrees.\n","categories":"","description":"","excerpt":"Rotates the final layout counter-clockwise by the specified number of …","ref":"/hugo/docs/attrs/rotation/","tags":"","title":"rotation"},{"body":"Edges with the same head and the same samehead value are aimed at the same point on the head.\nThis has no effect on loops.\nEach node can have at most 5 unique samehead values.\nSee limitation.\nSee also sametail.\n","categories":"","description":"","excerpt":"Edges with the same head and the same samehead value are aimed at the …","ref":"/hugo/docs/attrs/samehead/","tags":"","title":"samehead"},{"body":"Edges with the same tail and the same sametail value are aimed at the same point on the tail.\nThis has no effect on loops.\nEach node can have at most 5 unique sametail values.\nSee limitation.\nSee also samehead.\n","categories":"","description":"","excerpt":"Edges with the same tail and the same sametail value are aimed at the …","ref":"/hugo/docs/attrs/sametail/","tags":"","title":"sametail"},{"body":"Gives the number of points used for a circle/ellipse node.\nUsed if the input graph defines the vertices attribute, and output is dot or xdot.\nIt plays the same role in neato, when adjusting the layout to avoid overlapping nodes, and in image maps.\n","categories":"","description":"","excerpt":"Gives the number of points used for a circle/ellipse node.\nUsed if the …","ref":"/hugo/docs/attrs/samplepoints/","tags":"","title":"samplepoints"},{"body":"Scales layout by the given factor after the initial layout.\nIf only a single number is given, that number scales both width and height.\n","categories":"","description":"","excerpt":"Scales layout by the given factor after the initial layout.\nIf only a …","ref":"/hugo/docs/attrs/scale/","tags":"","title":"scale"},{"body":"During network simplex, the maximum number of edges with negative cut values to search when looking for one with minimum cut value.\n","categories":"","description":"","excerpt":"During network simplex, the maximum number of edges with negative cut …","ref":"/hugo/docs/attrs/searchsize/","tags":"","title":"searchsize"},{"body":"Margin to leave around nodes when removing node overlap.\nThis guarantees a minimal non-zero distance between nodes.\nIf the attribute begins with a plus sign '+', an additive margin is specified. That is, \"+w,h\" causes the node’s bounding box to be increased by w points on the left and right sides, and by h points on the top and bottom.\nWithout a plus sign, the node is scaled by 1 + w in the x coordinate and 1 + h in the y coordinate.\nIf only a single number is given, this is used for both dimensions.\nIf unset but esep is defined, the sep values will be set to the esep values divided by 0.8. If esep is unset, the default value is used.\n","categories":"","description":"","excerpt":"Margin to leave around nodes when removing node overlap.\nThis …","ref":"/hugo/docs/attrs/sep/","tags":"","title":"sep"},{"body":"sfdp stands for Scalable Force Directed Placement.\nsfdp is a fast, multilevel, force-directed algorithm that efficiently layouts large graphs, outlined in “Efficient and High Quality Force-Dircted Graph Drawing”1.\nMultiscale version of the fdp layout, for the layout of large graphs.\nPDF Manual\nHu, Yifan. (2005). Efficient and High Quality Force-Directed Graph Drawing. Mathematica Journal. 10. 37-71. ↩︎\n","categories":"","description":"","excerpt":"sfdp stands for Scalable Force Directed Placement.\nsfdp is a fast, …","ref":"/hugo/docs/layouts/sfdp/","tags":"","title":"sfdp"},{"body":"Output in the SGI (Silicon Graphics Image) file format.\n","categories":"","description":"Silicon Graphics Image","excerpt":"Silicon Graphics Image","ref":"/hugo/docs/outputs/sgi/","tags":"","title":"SGI"},{"body":"A string specifying the shape of a node. There are three main types of shapes:\npolygon-based, record-based and user-defined. The record-based shape has largely been superseded and greatly generalized by HTML-like labels. That is, instead of using shape=record, consider using shape=none and an HTML-like label.\n","categories":"","description":"","excerpt":"A string specifying the shape of a node. There are three main types of …","ref":"/hugo/docs/attr-types/shape/","tags":"","title":"shape"},{"body":"Sets the shape of a node.\ndigraph { \"pentagon\" [shape=\"pentagon\"]; \"hexagon\" [shape=\"hexagon\"]; } Edit in Playground ","categories":"","description":"","excerpt":"Sets the shape of a node.\ndigraph { \"pentagon\" [shape=\"pentagon\"]; …","ref":"/hugo/docs/attrs/shape/","tags":"","title":"shape"},{"body":"(Deprecated) Specifies a file containing user-supplied node content.\nSets the node’s shape=“box”. The image in the shapefile must be rectangular. The image formats supported as well as the precise semantics of how the file is used depends on the output format. For further details, see Image Formats and External PostScript files.\nThere is one exception to this usage: If shape=“epsf”, shapefile gives a filename containing a definition of the node in PostScript. The graphics defined must be contain all of the node content, including any desired boundaries. For further details, see External PostScript files.\n","categories":"","description":"","excerpt":"(Deprecated) Specifies a file containing user-supplied node content. …","ref":"/hugo/docs/attrs/shapefile/","tags":"","title":"shapefile"},{"body":"Print guide boxes in PostScript at the beginning of routesplines if showboxes=1, or at the end if showboxes=2. (Debugging, TB mode only!)\n","categories":"","description":"","excerpt":"Print guide boxes in PostScript at the beginning of routesplines if …","ref":"/hugo/docs/attrs/showboxes/","tags":"","title":"showboxes"},{"body":"Number of sides when shape=polygon.\nExample: Polygons with 3-6 sides graph { Triangle [shape=polygon sides=3] Rectangle [shape=polygon sides=4] Pentagon [shape=polygon sides=5] Hexagon [shape=polygon sides=6] } Edit in Playground ","categories":"","description":"","excerpt":"Number of sides when shape=polygon.\nExample: Polygons with 3-6 sides …","ref":"/hugo/docs/attrs/sides/","tags":"","title":"sides"},{"body":"Maximum width and height of drawing, in inches.\nIf only a single number is given, this is used for both the width and the height.\nIf defined and the drawing is larger than the given size, the drawing is uniformly scaled down so that it fits within the given size.\nIf size ends in an exclamation point \"!\", then size is taken to be the desired minimum size. In this case, if both dimensions of the drawing are less than size, the drawing is scaled up uniformly until at least one dimension equals its dimension in size.\nThere is some interaction between the size and ratio attributes.\n","categories":"","description":"","excerpt":"Maximum width and height of drawing, in inches.\nIf only a single …","ref":"/hugo/docs/attrs/size/","tags":"","title":"size"},{"body":"Skew factor for shape=polygon.\nPositive values skew top of polygon to right; negative to left.\nSee also distortion.\nExample graph { SkewLeft [shape=polygon sides=4 skew=-.5] SkewRight [shape=polygon sides=4 skew=.5] } Edit in Playground ","categories":"","description":"","excerpt":"Skew factor for shape=polygon.\nPositive values skew top of polygon to …","ref":"/hugo/docs/attrs/skew/","tags":"","title":"skew"},{"body":"Specifies a post-processing step used to smooth out an uneven distribution of nodes.\n","categories":"","description":"","excerpt":"Specifies a post-processing step used to smooth out an uneven …","ref":"/hugo/docs/attrs/smoothing/","tags":"","title":"smoothing"},{"body":"Values are:\n\"none\" \"avg_dist\" \"graph_dist\" \"power_dist\" \"rng\", \"spring\" \"triangle\" ","categories":"","description":"","excerpt":"Values are:\n\"none\" \"avg_dist\" \"graph_dist\" \"power_dist\" \"rng\", …","ref":"/hugo/docs/attr-types/smoothtype/","tags":"","title":"smoothType"},{"body":"If packmode indicates an array packing, sortv specifies an insertion order among the components, with smaller values inserted first.\n","categories":"","description":"","excerpt":"If packmode indicates an array packing, sortv specifies an insertion …","ref":"/hugo/docs/attrs/sortv/","tags":"","title":"sortv"},{"body":"Source Packages For most cases where you want or need to build from source, you should download one of the source packages linked below. They contain all of required generated files. The typical installation process is:\n./configure make make install The configure script has many options for further tailoring the build process to your machine. Run\n./configure --help to see these.\nGraphviz Stable Releases Development Snapshots post-2.46.0 pre-2.46.0 Webdot Stable Releases webdot-2.30.tar.gz, md5 Development Snapshots webdot-2.39.20170725.2013.tar.gz, md5 Git Repos If you wish to build from the tip-of-tree source repositories for Graphviz and Webdot, these can be found at:\nhttps://gitlab.com/graphviz/graphviz/ https://gitlab.com/graphviz/webdot/ You can either download the zip file or clone the repository. Instructions for the latter can be found here.\nIf you are taking this approach, then you must have recent versions of “libtool”, “automake”, and “autoconf”. The build process is basically the same as above with the addition of one more step:\n./autogen.sh ./configure make make install Requirements Dependencies Consider these versions as the minimum suitable for Graphviz, but please always use the latest available version of these packages. If there is any problem with building Graphviz against a latest version, please generate a bug report as we would very much like to know about it.\nHINT: If you are using an rpm-based system, by far the easiest way to determine all the build dependencies is to download the graphviz-xxx.src.rpm, run: rpmbuild --rebuild graphviz-xxx.src.rpm 2\u003et , then edit t into a yum install command.\ncairo-1.1.10.tar.gz [optional (required for libpangocairo), recommended] http://cairographics.org/ expat-2.0.0.tar.gz [optional (required for HTML-like labels), recommended] http://expat.sourceforge.net/ freetype-2.1.10.tar.gz [optional (required for libpangocairo and for gd), recommended] http://www.freetype.org/ gd-2.0.34.tar.gz [optional, deprecated but needed for GIF output] http://www.boutell.com/gd/ fontconfig-2.3.95.tar.gz [optional (required for libpangocairo and for gd), recommended] http://www.fontconfig.org/wiki/ urw-fonts.tar.gz [optional, required if fontconfig is unable to find any fonts] ftp://ftp.gimp.org/pub/gimp/fonts glib-2.11.1.tar.gz [optional (required for libpangocairo), recommended] http://www.gtk.org/ libpng-1.2.10.tar.gz [optional (required for cairo, optional for gd), recommended] http://www.libpng.org/pub/png/ pango-1.12.4.tar.gz provides libpangocairo [optional, recommended] http://www.pango.org/ zlib-1.2.3.tar.gz [optional (required for libpng), recommended] http://www.zlib.net/ GTS [optional (required for sfdp, prism, smyrna), recommended] http://gts.sourceforge.net/ GTK+ [optional (required for smyrna)] http://www.gtk.org/ GtkGLExt [optional (required for smyrna)] http://projects.gnome.org/gtkglext/ Glade [optional (required for smyrna)] http://glade.gnome.org/ Glut [optional (required for smyrna)] http://www.opengl.org/resources/libraries/glut/ Tools autoconf-2.61.tar.gz [if building from git] http://ftp.gnu.org/gnu/autoconf/ automake-1.9.6.tar.gz [if building from git] http://ftp.gnu.org/gnu/automake/ bison-3.0.tar.gz [if building from git] http://ftp.gnu.org/gnu/bison/ flex-2.5.4a.tar.gz [if building from git] http://ftp.gnu.org/non-gnu/flex/ gcc-4.5.0.tar.bz2 http://ftp.gnu.org/gnu/gcc/ gcc-g++-4.5.0.tar.bz2 http://ftp.gnu.org/gnu/gcc/ ghostscript-8.54-gpl.tar.gz http://pages.cs.wisc.edu/~ghost/ libtool-1.5.22.tar.gz [if building from git] http://ftp.gnu.org/gnu/libtool/ pkg-config-0.20.tar.gz http://www.freedesktop.org/wiki/Software/pkg-config/ swig-1.3.29.tar.gz http://www.swig.org/ ","categories":"","description":"","excerpt":"Source Packages For most cases where you want or need to build from …","ref":"/hugo/download/source/","tags":"","title":"Source Code"},{"body":"Controls how, and if, edges are represented.\nIf splines=true, edges are drawn as splines routed around nodes; if splines=false, edges are drawn as line segments. If splines=none or splines=\"\", no edges are drawn at all.\n(1 March 2007) splines=line and splines=spline can be used as synonyms for splines=false and splines=true, respectively.\nIn addition, splines=polyline specifies that edges should be drawn as polylines.\n(28 Sep 2010) splines=ortho specifies edges should be routed as polylines of axis-aligned segments. Currently, the routing does not handle ports or, in dot, edge labels.\n(25 Sep 2012) splines=curved specifies edges should be drawn as curved arcs.\nsplines=nonesplines=\"\" splines=linesplines=false splines=polyline splines=curved splines=ortho splines=splinesplines=true By default, splines is unset. How this is interpreted depends on the layout engine. For dot, the default is to draw edges as splines. For all other layouts, the default is to draw edges as line segments.\nNote that for these latter layouts, if splines=\"true\", this requires non-overlapping nodes (cf. overlap). If fdp is used for layout and splines=\"compound\", then the edges are drawn to avoid clusters as well as nodes.\n","categories":"","description":"","excerpt":"Controls how, and if, edges are represented.\nIf splines=true, edges …","ref":"/hugo/docs/attrs/splines/","tags":"","title":"splines"},{"body":"spline ( ';' spline )*\nwhere spline = (endp)? (startp)? point (triple)+ and triple = point point point and endp = \"e,%f,%f\" and startp = \"s,%f,%f\" If a spline has points p₁ p₂ p₃ … pₙ, (n = 1 (mod 3)), the points correspond to the control points of a cubic B-spline from p₁ to pₙ. If startp is given, it touches one node of the edge, and the arrowhead goes from p₁ to startp. If startp is not given, p₁ touches a node. Similarly for pₙ and endp.\n","categories":"","description":"","excerpt":"spline ( ';' spline )*\nwhere spline = (endp)? (startp)? point …","ref":"/hugo/docs/attr-types/splinetype/","tags":"","title":"splineType"},{"body":"Sql2Dot is a tiny parser written in java to transform sql into dot for visualizing data structures. It parses some very basic sql which we use in PostgreSQL. Here is an example of sql (borrowed from lain) that Sql2Dot likes to parse.\nSource and class files can be found in this sql2dot.jar file\nUsage: java -jar sql2dot.jar \u003cfiles\u003e\n\u003cfiles\u003e - list of sql files\nSql2Dot sends its output to the same location and name as the specified file with a ‘.dot’ on the end.\nExample:\nLet’s say we have a file with sql commands for creating tables called ‘foo.sql’\nWe parse it like this: java -jar sql2dot.jar foo.sql\nThat will create foo.sql.dot\nWe can then run this file through dot to create a PNG dot -Tpng foo.sql.dot -o foo.png\nIt would be nice if someone would throw a real sql parser on it ;)\nThe source is public domain. Do with it as you see fit. It would be nice to see improvements make their way back here :)\nDISCLAIMER: I’m not resposbile for the software’s or your actions.\nEnjoy!\nRobert Dale \u003crdale@digital-mission.com\u003e\n","categories":"","description":"","excerpt":"Sql2Dot is a tiny parser written in java to transform sql into dot for …","ref":"/hugo/misc/sql2dot/","tags":"","title":"Sql2Dot"},{"body":"Parameter used to determine the initial layout of nodes.\nIf unset, the nodes are randomly placed in a unit square with the same seed is always used for the random number generator, so the initial placement is repeatable.\n","categories":"","description":"","excerpt":"Parameter used to determine the initial layout of nodes.\nIf unset, the …","ref":"/hugo/docs/attrs/start/","tags":"","title":"start"},{"body":"has the syntax (style)?(seed)?.\nIf style is present, it must be one of the strings \"regular\", \"self\", or \"random\". In the first case, the nodes are placed regularly about a circle. In the second case, an abbreviated version of neato is run to obtain the initial layout. In the last case, the nodes are placed randomly in a unit square.\nIf seed is present, it specifies a seed for the random number generator. If seed is a positive number, this is used as the seed. If it is anything else, the current time, and possibly the process id, is used to pick a seed, thereby making the choice more random. In this case, the seed value is stored in the graph.\nIf the value is just \"random\", a time-based seed is chosen.\nNote that input positions, specified by a node’s pos attribute, are only used when the style is \"random\".\n","categories":"","description":"","excerpt":"has the syntax (style)?(seed)?.\nIf style is present, it must be one of …","ref":"/hugo/docs/attr-types/starttype/","tags":"","title":"startType"},{"body":"Text; a sequence of characters.\n","categories":"","description":"","excerpt":"Text; a sequence of characters.\n","ref":"/hugo/docs/attr-types/string/","tags":"","title":"string"},{"body":"styleItem ( ',' styleItem )*\nwhere styleItem = name or name'('args')' and args = name ( ',' name )* and name can be any string of characters not containing a space, a left or right parenthesis, or a comma. Whitespace characters are ignored.\nNOTE: The styles tapered, striped and wedged are only available in release 2.30 and later.\nThe recognized style names are,\nFor nodes and edges:\n\"dashed\" \"dotted\" \"solid\" \"invis\" \"bold\" For edges only:\n\"tapered\" For nodes only:\n\"filled\" \"striped\" \"wedged\" \"diagonals\" \"rounded\" For clusters:\n\"filled\" \"striped\" \"rounded\" The style \"radial\" is recognized for nodes, clusters and graphs, and indicates a radial-style gradient fill if applicable.\nThe style \"striped\" causes the fill to be done as a set of vertical stripes. The colors are specified via a colorList, the colors drawn from left to right in list order. Optional color weights can be specified to indicate the proportional widths of the bars. If the sum of the weights is less than 1, the remainder is divided evenly among the colors with no weight. Note: The style \"striped\" is only supported with clusters and rectangularly-shaped nodes.\nThe style \"wedged\" causes the fill to be done as a set of wedges. The colors are specified via a colorList, with the colors drawn counter-clockwise starting at angle 0. Optional color weights are interpreted analogously to the striped case described above. Note: The style \"wedged\" is allowed only for elliptically-shaped nodes.\nThe following tables illustrate some of the effects of the style settings. Examples of tapered line styles are given below. Examples of linear and radial gradient fill can be seen under colorList.\nBasic style settings for nodes solid dashed dotted bold rounded diagonals filled striped wedged Basic style settings for edges solid dashed dotted bold Basic style settings for clusters solid dashed dotted bold rounded filled striped The effect of style=tapered depends on the penwidth, dir, arrowhead and arrowtail attributes. The edge starts with width penwidth and tapers to width 1, in points. The dir attribute determines whether the tapering goes from tail to head (dir=forward), from head to tail (dir=forward), from the middle to both the head and tail (dir=both), or no tapering at all (dir=none). If the dir is not explicitly set, the default for the graph type is used (see dir). Arrowheads and arrowtails are also drawn, based on the value of dir; to avoid this, set arrowhead and/or arrowtail to \"none\".\nNote: At present, the tapered style only allows a simple filled polygon. Additional styles such as dotted or dashed, or multiple colors supplied via a colorList are ignored.\nThe following table illustrates the style=tapered with penwidth=7 and arrowtail=none.\ndir \\ arrowhead normal none forward back both none Additional styles are available in device-dependent form. Style lists are passed to device drivers, which can use this to generate appropriate output.\nThe style attribute affects the basic appearance of nodes, edges and graphs, but has no effect on any text used in labels. For this, use the fontname, fontsize and fontcolor attributes, or the \u003cFONT\u003e, \u003cB\u003e, \u003cI\u003e, etc. elements in HTML-like labels.\nThe setlinewidth style value can be used for more control over the width of node borders and edges than is allowed by bold. This style value takes an argument, specifying the width of the line in points. For example, style=\"bold\" is equivalent to style=\"setlinewidth(2)\". The use of setlinewidth is deprecated; one should use the penwidth attribute instead.\n","categories":"","description":"","excerpt":"styleItem ( ',' styleItem )*\nwhere styleItem = name or name'('args')' …","ref":"/hugo/docs/attr-types/style/","tags":"","title":"style"},{"body":"Set style information for components of the graph.\nFor cluster subgraphs, if style=\"filled\", the cluster box’s background is filled.\nIf the default style attribute has been set for a component, an individual component can use style=\"\" to revert to the normal default. For example, if the graph has\ndigraph { edge [style=\"invis\"] a -\u003e b } Edit in Playground making all edges invisible, the b-\u003ec edge can overrride this via:\ndigraph { edge [style=\"invis\"] a -\u003e b b -\u003e c [style=\"\"] } Edit in Playground Of course, the component can also explicitly set its style attribute to the desired value.\n","categories":"","description":"","excerpt":"Set style information for components of the graph.\nFor cluster …","ref":"/hugo/docs/attrs/style/","tags":"","title":"style"},{"body":"A URL or pathname specifying an XML style sheet, used in SVG output.\nCombine with class to style elements using CSS selectors.\nSee also:\nclass id ","categories":"","description":"","excerpt":"A URL or pathname specifying an XML style sheet, used in SVG output. …","ref":"/hugo/docs/attrs/stylesheet/","tags":"","title":"stylesheet"},{"body":"svg produces SVG output.\nsvgz produces compressed SVGs.\nSee ID Output Note.\nExample: simple graph rendered with -Tsvg $ echo 'digraph { a-\u003eb }' | dot -Tsvg \u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e \u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e \u003c!-- Generated by graphviz version 2.47.1 (20210417.1919) --\u003e \u003c!-- Pages: 1 --\u003e \u003csvg width=\"62pt\" height=\"116pt\" viewBox=\"0.00 0.00 62.00 116.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\u003e \u003cg id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 112)\"\u003e \u003cpolygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-112 58,-112 58,4 -4,4\"/\u003e \u003c!-- a --\u003e \u003cg id=\"node1\" class=\"node\"\u003e \u003ctitle\u003ea\u003c/title\u003e \u003cellipse fill=\"none\" stroke=\"black\" cx=\"27\" cy=\"-90\" rx=\"27\" ry=\"18\"/\u003e \u003ctext text-anchor=\"middle\" x=\"27\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\"\u003ea\u003c/text\u003e \u003c/g\u003e \u003c!-- b --\u003e \u003cg id=\"node2\" class=\"node\"\u003e \u003ctitle\u003eb\u003c/title\u003e \u003cellipse fill=\"none\" stroke=\"black\" cx=\"27\" cy=\"-18\" rx=\"27\" ry=\"18\"/\u003e \u003ctext text-anchor=\"middle\" x=\"27\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\"\u003eb\u003c/text\u003e \u003c/g\u003e \u003c!-- a\u0026#45;\u0026gt;b --\u003e \u003cg id=\"edge1\" class=\"edge\"\u003e \u003ctitle\u003ea\u0026#45;\u0026gt;b\u003c/title\u003e \u003cpath fill=\"none\" stroke=\"black\" d=\"M27,-71.7C27,-63.98 27,-54.71 27,-46.11\"/\u003e \u003cpolygon fill=\"black\" stroke=\"black\" points=\"30.5,-46.1 27,-36.1 23.5,-46.1 30.5,-46.1\"/\u003e \u003c/g\u003e \u003c/g\u003e \u003c/svg\u003e ","categories":"","description":"Scalable Vector Graphics","excerpt":"Scalable Vector Graphics","ref":"/hugo/docs/outputs/svg/","tags":"","title":"SVG"},{"body":"Position of an edge’s tail label, in points.\nThe position indicates the center of the label.\n","categories":"","description":"","excerpt":"Position of an edge’s tail label, in points.\nThe position indicates …","ref":"/hugo/docs/attrs/tail_lp/","tags":"","title":"tail_lp"},{"body":"If true, the tail of an edge is clipped to the boundary of the tail node; otherwise, the end of the edge goes to the center of the node, or the center of a port, if applicable.\n","categories":"","description":"","excerpt":"If true, the tail of an edge is clipped to the boundary of the tail …","ref":"/hugo/docs/attrs/tailclip/","tags":"","title":"tailclip"},{"body":"Synonym for tailURL.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"Synonym for tailURL.\nSee also:\nedgehref, edgeURL headhref, headURL …","ref":"/hugo/docs/attrs/tailhref/","tags":"","title":"tailhref"},{"body":"Text label to be placed near tail of edge.\nSee limitation.\n","categories":"","description":"","excerpt":"Text label to be placed near tail of edge.\nSee limitation.\n","ref":"/hugo/docs/attrs/taillabel/","tags":"","title":"taillabel"},{"body":"Indicates where on the tail node to attach the tail of the edge.\nSee limitation.\n","categories":"","description":"","excerpt":"Indicates where on the tail node to attach the tail of the edge.\nSee …","ref":"/hugo/docs/attrs/tailport/","tags":"","title":"tailport"},{"body":"If the edge has a tailURL, tailtarget determines which window of the browser is used for the URL.\nSetting tailtarget=_graphviz will open a new window if it doesn’t already exist, or reuse it if it does.\nIf undefined, the value of the target is used.\n","categories":"","description":"","excerpt":"If the edge has a tailURL, tailtarget determines which window of the …","ref":"/hugo/docs/attrs/tailtarget/","tags":"","title":"tailtarget"},{"body":"Tooltip annotation attached to the tail of an edge.\nUsed only if the edge has a tailURL attribute.\nedgetooltip. headtooltip. labeltooltip. tooltip. ","categories":"","description":"","excerpt":"Tooltip annotation attached to the tail of an edge.\nUsed only if the …","ref":"/hugo/docs/attrs/tailtooltip/","tags":"","title":"tailtooltip"},{"body":"If defined, tailURL is output as part of the tail label of the edge.\nAlso, this value is used near the tail node, overriding any URL value.\nSee limitation.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL ","categories":"","description":"","excerpt":"If defined, tailURL is output as part of the tail label of the edge. …","ref":"/hugo/docs/attrs/tailurl/","tags":"","title":"tailURL"},{"body":"If the object has a URL, this attribute determines which window of the browser is used for the URL.\nSee W3C documentation.\n","categories":"","description":"","excerpt":"If the object has a URL, this attribute determines which window of the …","ref":"/hugo/docs/attrs/target/","tags":"","title":"target"},{"body":"Output in the Truevision TGA or TARGA format.\n","categories":"","description":"Truevision TARGA","excerpt":"Truevision TARGA","ref":"/hugo/docs/outputs/tga/","tags":"","title":"TGA"},{"body":"Produces TIFF output.\n","categories":"","description":"Tag Image File Format","excerpt":"Tag Image File Format","ref":"/hugo/docs/outputs/tif/","tags":"","title":"TIFF"},{"body":"Output using the text-based Tcl/Tk graphics primitives.\nExample outputs of a simple graph with two nodes connected with an edge:\nExample: simple graph rendered with -Ttk $ echo 'digraph { a-\u003eb }' | dot -Ttk # Generated by graphviz version 2.47.1 (20210417.1919) # Title: %3 Pages: 1 # a $c create oval 5.3333 53.3333 77.3333 5.3333 -fill white -width 1 -outline black -tags {1node0x75509df0} $c create text 41.3333 30.3 -text {a} -fill black -font {\"Times\" 14} -tags {0node0x75509df0} # b $c create oval 5.3333 149.3333 77.3333 101.3333 -fill white -width 1 -outline black -tags {1node0x75509f10} $c create text 41.3333 126.3 -text {b} -fill black -font {\"Times\" 14} -tags {0node0x75509f10} # a-\u003eb $c create line 41.3333 53.7378 41.3333 64.023 41.3333 76.3834 41.3333 87.8501 -fill black -width 1 -smooth bezier -tags {1edge0x5} $c create polygon 46.0001 87.8609 41.3333 101.1942 36.6668 87.8608 -fill black -width 1 -outline black -tags {1edge0x5} ","categories":"","description":"Tcl/Tk","excerpt":"Tcl/Tk","ref":"/hugo/docs/outputs/tk/","tags":"","title":"Tk"},{"body":"Tooltip (mouse hover text) attached to the node, edge, cluster, or graph.\nIf tooltip is unset, Graphviz will use the object’s label if defined.\nNote that if the label is a record specification or an HTML-like label, the resulting tooltip may be unhelpful. In this case, if tooltips will be generated, the user should set a tooltip attribute explicitly.\nTooltips digraph { label=\"Graph Label\" tooltip=\"Graph Tooltip\" subgraph cluster_a { label=\"Cluster Label\" tooltip=\"Cluster Tooltip\" Node1 [tooltip=\"Node1 Tooltip\"] Node1 -\u003e Node2 [label=\"Edge\" tooltip=\"Edge Tooltip\"] } } Edit in Playground See also:\nedgetooltip. headtooltip. labeltooltip. tailtooltip. ","categories":"","description":"","excerpt":"Tooltip (mouse hover text) attached to the node, edge, cluster, or …","ref":"/hugo/docs/attrs/tooltip/","tags":"","title":"tooltip"},{"body":"Whether internal bitmap rendering relies on a truecolor color model or uses a color palette.\nIf truecolor is unset, truecolor is not used unless there is a shapefile property for some node in the graph. The output model will use the input model when possible.\nUse of color palettes results in less memory usage during creation of the bitmaps and smaller output files.\nUsually, the only time it is necessary to specify the truecolor model is if the graph uses more than 256 colors. However, if one uses bgcolor=transparent with a color palette, font antialiasing can show up as a fuzzy white area around characters. Using truecolor=true avoids this problem.\n","categories":"","description":"","excerpt":"Whether internal bitmap rendering relies on a truecolor color model or …","ref":"/hugo/docs/attrs/truecolor/","tags":"","title":"truecolor"},{"body":"Hyperlinks incorporated into device-dependent output. At present, used in ps2, cmap, i*map and svg formats. For all these formats, URLs can be attached to nodes, edges and clusters. URL attributes can also be attached to the root graph in ps2, cmap and i*map formats. This serves as the base URL for relative URLs in the former, and as the default image map file in the latter.\nFor svg, cmapx and imap output, the active area for a node is its visible image. For example, an unfilled node with no drawn boundary will only be active on its label. For other output, the active area is its bounding box. The active area for a cluster is its bounding box. For edges, the active areas are small circles where the edge contacts its head and tail nodes. In addition, for svg, cmapx and imap, the active area includes a thin polygon approximating the edge. The circles may overlap the related node, and the edge URL dominates. If the edge has a label, this will also be active. Finally, if the edge has a head or tail label, this will also be active.\nFor edges, the attributes headURL, tailURL, labelURL and edgeURL allow control of various parts of an edge.\nif active areas of two edges overlap, it is unspecified which area dominates.\nSee also:\nedgehref, edgeURL headhref, headURL labelhref, labelURL tailhref, tailURL href, URL Example: Van Gogh Paintings with Links graph { label=\"Vincent van Gogh Paintings\" URL=\"https://en.wikipedia.org/wiki/Vincent_van_Gogh\" subgraph cluster_self_portraits { URL=\"https://en.wikipedia.org/wiki/Portraits_of_Vincent_van_Gogh\" label=\"Self-portraits\" \"Self-Portrait with Grey Felt Hat\" [URL=\"https://www.vangoghmuseum.nl/en/collection/s0016V1962\"] \"Self-Portrait as a Painter\" [URL=\"https://www.vangoghmuseum.nl/en/collection/s0022V1962\"] } subgraph cluster_flowers { URL=\"https://en.wikipedia.org/wiki/Sunflowers_(Van_Gogh_series)\" label=\"Flowers\" \"Sunflowers\" [URL=\"https://www.nationalgallery.org.uk/paintings/vincent-van-gogh-sunflowers\"] \"Almond Blossom\" [URL=\"https://www.vangoghmuseum.nl/en/collection/s0176V1962\"] } } Edit in Playground ","categories":"","description":"","excerpt":"Hyperlinks incorporated into device-dependent output. At present, used …","ref":"/hugo/docs/attrs/url/","tags":"","title":"URL"},{"body":"Sets the coordinates of the vertices of the node’s polygon, in inches.\nUsed if the node is polygonal, and output is dot or xdot.\nIf the node is an ellipse or circle, the samplepoints attribute affects the output.\n","categories":"","description":"","excerpt":"Sets the coordinates of the vertices of the node’s polygon, in inches. …","ref":"/hugo/docs/attrs/vertices/","tags":"","title":"vertices"},{"body":"Clipping window on final drawing.\nviewport supersedes any size attribute. The width and height of the viewport specify precisely the final size of the output.\n","categories":"","description":"","excerpt":"Clipping window on final drawing.\nviewport supersedes any size …","ref":"/hugo/docs/attrs/viewport/","tags":"","title":"viewport"},{"body":"\"%lf,%lf,%lf,%lf,%lf\" or \"%lf,%lf,%lf,'%s'\"\nThe viewPort W,H,Z,x,y or W,H,Z,N specifies a viewport for the final image. The pair (W,H) gives the dimensions (width and height) of the final image, in points.\nThe optional Z is the zoom factor, i.e., the image in the original layout will be W/Z by H/Z points in size. By default, Z is 1.\nThe optional last part is either a pair (x,y) giving a position in the original layout of the graph, in points, of the center of the viewport, or the name N of a node whose center should used as the focus.\nBy default, the focus is the center of the graph bounding box, i.e., (bbx/2,bby/2), where \"bbx,bby\" is the value of the bounding box attribute bb.\nSample values: 50,50,.5,'2.8 BSD' or 100,100,2,450,300. The first will take the 100x100 point square centered on the node 2.8 BSD and scale it down by 0.5, yielding a 50x50 point final image.\n","categories":"","description":"","excerpt":"\"%lf,%lf,%lf,%lf,%lf\" or \"%lf,%lf,%lf,'%s'\"\nThe viewPort W,H,Z,x,y or …","ref":"/hugo/docs/attr-types/viewport/","tags":"","title":"viewPort"},{"body":"Produces VML output, the latter in compressed format.\nVML is obsolete, superseded by SVG.\nSee ID Output Note.\n","categories":"","description":"Vector Markup Language","excerpt":"Vector Markup Language","ref":"/hugo/docs/outputs/vml/","tags":"","title":"VML"},{"body":"Factor to scale up drawing to allow margin for expansion in Voronoi technique. dim' = (1+2*margin)*dim.\n","categories":"","description":"","excerpt":"Factor to scale up drawing to allow margin for expansion in Voronoi …","ref":"/hugo/docs/attrs/voro_margin/","tags":"","title":"voro_margin"},{"body":"Outputs graphs in the VRML format. To get a 3D embedding, nodes must have a z attribute. These can either be supplied as part of the input graph, or be generated by neato provided dim=3 and at least one node has a z value.\nLine segments are drawn as cylinders. In general, VRML output relies on having the PNG library to produce images used to texture-fill the node shapes. However, if shape=point, a node is drawn as a 3D sphere.\nExample: simple graph, rendered with -Tvrml $ echo 'digraph { a-\u003eb }' | dot -Tvrml #VRML V2.0 utf8 Group { children [ Transform { scale 0.028 0.028 0.028 children [ Background { skyColor 1.000 1.000 1.000 } # node a Transform { translation 27.000 90.000 0.000 scale 27.000 18.000 1 children [ Transform { rotation 1 0 0 1.57 children [ Shape { geometry Cylinder { side FALSE } appearance Appearance { material Material { ambientIntensity 0.33 diffuseColor 1 1 1 } texture ImageTexture { url \"node1.png\" } } } ] } ] } # node b Transform { translation 27.000 18.000 0.000 scale 27.000 18.000 1 children [ Transform { rotation 1 0 0 1.57 children [ Shape { geometry Cylinder { side FALSE } appearance Appearance { material Material { ambientIntensity 0.33 diffuseColor 1 1 1 } texture ImageTexture { url \"node2.png\" } } } ] } ] } # edge a -\u003e b Group { children [ Transform { children [ Shape { geometry Cylinder { bottom FALSE top FALSE height 25.584 radius 1.000 } appearance Appearance { material Material { ambientIntensity 0.33 diffuseColor 0.000 0.000 0.000 } } } Transform { translation 0 17.792 0 children [ Shape { geometry Cone {bottomRadius 3.500 height 10.000 } appearance Appearance { material Material { ambientIntensity 0.33 diffuseColor 0.000 0.000 0.000 } } } ] } ] center 0 5.000 0 rotation -0.000 0 1.000 -3.142 translation 27.000 49.000 0.000 } ] } ] } Viewpoint {position 1.000 2.000 6.438} ] } ","categories":"","description":"Virtual Reality Modeling Language","excerpt":"Virtual Reality Modeling Language","ref":"/hugo/docs/outputs/vrml/","tags":"","title":"VRML"},{"body":"Produces output in the monochrome Wireless BitMap (WBMP) format, optimized for mobile computing.\n","categories":"","description":"Wireless Bitmap","excerpt":"Wireless Bitmap","ref":"/hugo/docs/outputs/wbmp/","tags":"","title":"WBMP"},{"body":"Produces output in the image format for the Web (WEBP) format, optimized for web devices such as tablets. See Wikipedia’s WebP or Google’s WebP pages.\n","categories":"","description":"WebP","excerpt":"WebP","ref":"/hugo/docs/outputs/webp/","tags":"","title":"WebP"},{"body":"Weight of edge.\nIn dot, the heavier the weight, the shorter, straighter and more vertical the edge is.\nFor twopi, weight=0 indicates the edge should not be used in constructing a spanning tree from the root.\nFor other layouts, a larger weight encourages the layout to make the edge length closer to that specified by the len attribute.\nWeights in dot must be integers.\nEdge Weights digraph { root -\u003e a root -\u003e b [weight=2] root -\u003e c [weight=3] } Edit in Playground ","categories":"","description":"","excerpt":"Weight of edge.\nIn dot, the heavier the weight, the shorter, …","ref":"/hugo/docs/attrs/weight/","tags":"","title":"weight"},{"body":"Width of node, in inches.\nThis is taken as the initial, minimum width of the node. If fixedsize is true, this will be the final width of the node. Otherwise, if the node label requires more width to fit, the node’s width will be increased to contain the label.\nIf the output format is dot, the value given to width will be the final value.\nIf the node shape is regular, the width and height are made identical:\nIf either the width or the height is set explicitly, that value is used. If both the width or the height are set explicitly, the maximum of the two values is used. If neither is set explicitly, the minimum of the two default values is used. Width Example digraph { \"d\" # default \"1in\" [width=1] \"2in\" [width=2] } Edit in Playground ","categories":"","description":"","excerpt":"Width of node, in inches.\nThis is taken as the initial, minimum width …","ref":"/hugo/docs/attrs/width/","tags":"","title":"width"},{"body":"Creates an Xlib (X11) window and displays the output there.\nxlib is an alias for x11.\n","categories":"","description":"X11 Window","excerpt":"X11 Window","ref":"/hugo/docs/outputs/xlib/","tags":"","title":"X11"},{"body":"Determines the version of xdot used in output.\nOnly used for xdot output.\nIf unset, graphviz will set this attribute to the xdot version used for output.\n","categories":"","description":"","excerpt":"Determines the version of xdot used in output.\nOnly used for xdot …","ref":"/hugo/docs/attrs/xdotversion/","tags":"","title":"xdotversion"},{"body":"External label for a node or edge.\nFor nodes, the label will be placed outside of the node but near it. For edges, the label will be placed near the center of the edge. This can be useful in dot to avoid the occasional problem when the use of edge labels distorts the layout. For other layouts, the xlabel attribute can be viewed as a synonym for the label attribute. These labels are added after all nodes and edges have been placed.\nThe labels will be placed so that they do not overlap any node or label. This means it may not be possible to place all of them. To force placing all of them, set forcelabels=true.\nExternal Labels on Nodes and Edges digraph { \"⚡\" [xlabel=\"Sparks\"] \"🔥\" [xlabel=\"Fires\"] \"⚡\"-\u003e\"🔥\" [xlabel=\"Sometimes\" label=\"Cause\"] } Edit in Playground ","categories":"","description":"","excerpt":"External label for a node or edge.\nFor nodes, the label will be placed …","ref":"/hugo/docs/attrs/xlabel/","tags":"","title":"xlabel"},{"body":"Position of an exterior label, in points.\nThe position indicates the center of the label.\n","categories":"","description":"","excerpt":"Position of an exterior label, in points.\nThe position indicates the …","ref":"/hugo/docs/attrs/xlp/","tags":"","title":"xlp"},{"body":"Deprecated: Use pos attribute, along with dimen and/or dim to specify dimensions.\nProvides z coordinate value for 3D layouts and displays. If the graph has dim set to 3 (or more), neato will use a node’s z value for the z coordinate of its initial position if its pos attribute is also defined.\nEven if no z values are specified in the input, it is necessary to declare a z attribute for nodes, e.g, using node[z=\"\"] in order to get z values on output. Thus, setting dim=3 but not declaring z will cause neato -Tvrml to layout the graph in 3D but project the layout onto the xy-plane for the rendering. If the z attribute is declared, the final rendering will be in 3D.\n","categories":"","description":"","excerpt":"Deprecated: Use pos attribute, along with dimen and/or dim to specify …","ref":"/hugo/docs/attrs/z/","tags":"","title":"z"}]